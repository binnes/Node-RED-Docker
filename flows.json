[
    {
        "id": "1c8a3583.7e682a",
        "type": "tab",
        "label": "Startup",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.mgmt.startup\",\n    \"version\" : \"1.2.1\",\n    \"label\"   : \"Startup\",\n    \"description\" : \"Flow de gestión encargado de la inicialización y arranque del equipo\"\n}"
    },
    {
        "id": "31c39280.4de9fe",
        "type": "tab",
        "label": "System Management",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.mgmt.system\",\n    \"version\" : \"1.1.8\",\n    \"label\"   : \"System Management\",\n    \"description\" : \"Flow de configuración a nivel de usuario de la pasarela. Modificado global.set en Create/Delete\"\n}\n"
    },
    {
        "id": "6d0c29a1.c03ff8",
        "type": "tab",
        "label": "Network Mgmt",
        "disabled": false,
        "info": "{\n    \"name\" : \"tlnt.babelbox.mgmt.network\",\n    \"version\" : \"1.2.1\",\n    \"label\" : \"Network Mgmt\",\n    \"description\" : \"Flow de configuración a nivel de red de la pasarela\"\n}\n\n"
    },
    {
        "id": "f7a9df1f.01316",
        "type": "tab",
        "label": "Router Mgmt",
        "disabled": false,
        "info": "{\n    \"name\" : \"tlnt.babelbox.mgmt.router\",\n    \"version\" : \"1.1.1\",\n    \"label\" : \"Router Mgmt\",\n    \"description\" : \"Flow de configuración de router\"\n}\n\n"
    },
    {
        "id": "f6f1314a.c5c41",
        "type": "tab",
        "label": "I/O G5002",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.g5002.io\",\n    \"version\" : \"1.1.4\",\n    \"label\"   : \"I/O G5002\",\n    \"description\" : \"G5002 I/O port management with dashboard\"\n}\n"
    },
    {
        "id": "61743491.06f1dc",
        "type": "tab",
        "label": "BabelGate Agent",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.agent.main\",\n    \"version\" : \"1.1.2\",\n    \"label\"   : \"BabelGate Agent\",\n    \"description\" : \"Flow encargado de la interoperabilidad entre la pasarela y la plataforma BabelGate\"\n}\n\n"
    },
    {
        "id": "9a79c914.b7e6f8",
        "type": "tab",
        "label": "API REST",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.mgmt.api\",\n    \"version\" : \"1.1.1\",\n    \"label\"   : \"API REST\",\n    \"description\" : \"Flow de configuración API\"\n}\n"
    },
    {
        "id": "4b1b7339.7c8b5c",
        "type": "tab",
        "label": "Logs",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3022fd6.d249f02",
        "type": "tab",
        "label": "DataLogger",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.scheduler\",\n    \"version\" : \"1.2.2\",\n    \"label\"   : \"DataLogger Scheduler\",\n    \"description\" : \"DataLogger Scheduler Flow\"\n}\n"
    },
    {
        "id": "e045593e.092be8",
        "type": "tab",
        "label": "DataLogger GUI",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.gui\",\n    \"version\" : \"1.2.0\",\n    \"label\"   : \"DataLogger GUI\",\n    \"description\" : \"DataLogger Dashboard\"\n}\n"
    },
    {
        "id": "87692da3.99da2",
        "type": "tab",
        "label": "DataLogger Cloud",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.cloud\",\n    \"version\" : \"1.1.3\",\n    \"label\"   : \"DataLogger Cloud\",\n    \"description\" : \"DataLogger Cloud tab\"\n}\n"
    },
    {
        "id": "857c3f85.fb474",
        "type": "tab",
        "label": "DataLogger Storage",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.storage\",\n    \"version\" : \"1.1.4\",\n    \"label\"   : \"DataLogger Storage\",\n    \"description\" : \"DataLogger Storage tab\"\n}\n"
    },
    {
        "id": "8d3fdd64.90dd2",
        "type": "tab",
        "label": "DataLogger API",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.api\",\n    \"version\" : \"1.0.1\",\n    \"label\"   : \"DataLogger API\",\n    \"description\" : \"DataLogger API\"\n}\n"
    },
    {
        "id": "6c4882be.3f8e7c",
        "type": "tab",
        "label": "DataLogger DBG",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.debug\",\n    \"version\" : \"1.1.2\",\n    \"label\"   : \"DataLogger Debug\",\n    \"description\" : \"DataLogger Debug Flow\"\n}\n"
    },
    {
        "id": "6c6899a7.084208",
        "type": "tab",
        "label": "Events GUI",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.events-gui\",\n    \"version\" : \"1.1.1\",\n    \"label\"   : \"Events GUI\",\n    \"description\" : \"DataLogger events configuration GUI\"\n}\n"
    },
    {
        "id": "1da514ca.601cbb",
        "type": "tab",
        "label": "Events",
        "disabled": false,
        "info": "{\n    \"name\"    : \"tlnt.babelbox.app.datalogger.events\",\n    \"version\" : \"1.1.1\",\n    \"label\"   : \"Events\",\n    \"description\" : \"DataLogger event processing\"\n}\n"
    },
    {
        "id": "c184c8d0.48fa78",
        "type": "tab",
        "label": "Test InfluxDB",
        "disabled": true,
        "info": ""
    },
    {
        "id": "f59fa069.9f99b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "3193a4bc.9c021c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d390a1f6.a59c1",
        "type": "tab",
        "label": "HTTP Trials",
        "disabled": true,
        "info": ""
    },
    {
        "id": "695d7520.c8484c",
        "type": "subflow",
        "name": "LIGILO Request",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "e4503b1a.fcde28"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 100,
                "wires": [
                    {
                        "id": "4f3564c7.6f8d6c",
                        "port": 0
                    },
                    {
                        "id": "88064b5f.6052e8",
                        "port": 0
                    },
                    {
                        "id": "e4503b1a.fcde28",
                        "port": 2
                    }
                ]
            },
            {
                "x": 1460,
                "y": 240,
                "wires": [
                    {
                        "id": "88064b5f.6052e8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "2121f75f.935408",
        "type": "subflow",
        "name": "BBLGT Deploy Request",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "5d01804.a09788"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 80,
                "wires": [
                    {
                        "id": "5d01804.a09788",
                        "port": 0
                    },
                    {
                        "id": "3c5d17af.3f38f8",
                        "port": 0
                    },
                    {
                        "id": "37118433.0f96ac",
                        "port": 0
                    },
                    {
                        "id": "87203fe.97bc3c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1260,
                "y": 260,
                "wires": [
                    {
                        "id": "87203fe.97bc3c",
                        "port": 1
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "b104bde1.d30e4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#ffffff",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#096f77",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#096f77",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#096f77",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb1be",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#096f77",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "G5002 Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "36baf809.e3bb28",
        "type": "ui_tab",
        "name": "Network",
        "icon": "import_export",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "34dc605d.803f1",
        "type": "ui_group",
        "name": "IP Management",
        "tab": "36baf809.e3bb28",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8300553d.9b0318",
        "type": "ui_group",
        "name": "Control",
        "tab": "4cfa633d.bba3bc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "238dd158.f6e28e",
        "type": "ui_group",
        "name": "Modem",
        "tab": "36baf809.e3bb28",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9065458.be34bb8",
        "type": "ui_tab",
        "name": "G5002 I/O",
        "icon": "dvr",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8e4a0e9d.80ab4",
        "type": "ui_group",
        "name": "Digital I/O",
        "tab": "9065458.be34bb8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ec776a71.602458",
        "type": "ui_group",
        "name": "LEDs",
        "tab": "9065458.be34bb8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4a6ac671.eb4448",
        "type": "ui_group",
        "name": "Input Graphs",
        "tab": "9065458.be34bb8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1a1c9232.df6fce",
        "type": "ui_tab",
        "name": "Services",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e30968ef.275838",
        "type": "ui_group",
        "name": "Service List",
        "tab": "1a1c9232.df6fce",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "efb71a7c.2da118",
        "type": "ui_group",
        "name": "Users",
        "tab": "4cfa633d.bba3bc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b93028b3.fde338",
        "type": "ui_group",
        "name": "Installed",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "538c3453.c375dc",
        "type": "ui_group",
        "name": "Actions",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "62afc1fe.da01d",
        "type": "ui_group",
        "name": "BUBU",
        "tab": "83270d5a.d3e67",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "3f039fe3.d6504",
        "type": "ui_group",
        "name": "DynDNS Client",
        "tab": "36baf809.e3bb28",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4cfa633d.bba3bc",
        "type": "ui_tab",
        "name": "System",
        "icon": "settings",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1aefa463.d7220c",
        "type": "ui_group",
        "d": true,
        "name": "BabelGate",
        "tab": "36baf809.e3bb28",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "298fe5cf.ddcb6a",
        "type": "ui_tab",
        "name": "Hidden",
        "icon": "dashboard",
        "order": 6,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "95ff1e34.2dc79",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "298fe5cf.ddcb6a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "91268927.7f4258",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "95ff1e34.2dc79",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "338ade83.b54192",
        "type": "modbus-client",
        "name": "RS485 (ttyS4)",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyS4",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 200,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "c1b8f622.4aae68",
        "type": "ui_tab",
        "name": "Graphs",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8dd7cb07.27fba8",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "c1b8f622.4aae68",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "440d92f8.877f7c",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "c1b8f622.4aae68",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1ccc68db.c80fd7",
        "type": "ui_group",
        "name": "Power",
        "tab": "c1b8f622.4aae68",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "beff7743.3312d8",
        "type": "ui_group",
        "name": "Current",
        "tab": "c1b8f622.4aae68",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ec985455.6c5468",
        "type": "ui_group",
        "name": "Monitor",
        "tab": "c1b8f622.4aae68",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ca0cabbc.94b5a8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "emiosdemo.energy-minus.es",
        "port": "1883",
        "clientid": "TELNET_CATMModem",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "c7a76c9b.2dd81",
        "type": "websocket-listener",
        "path": "/ws/forward/bob",
        "wholemsg": "false"
    },
    {
        "id": "a1d5fb96.57a028",
        "type": "websocket-client",
        "path": "ws://localhost:1880/ws/forward/bob",
        "tls": "",
        "wholemsg": "false"
    },
    {
        "id": "4e9daff4.0246a",
        "type": "websocket-listener",
        "path": "/ws/forward/alice",
        "wholemsg": "true"
    },
    {
        "id": "2bf0b98f.8f1e66",
        "type": "websocket-client",
        "path": "ws://localhost:1880/ws/forward/alice",
        "tls": "",
        "wholemsg": "true"
    },
    {
        "id": "85466034.14e0c",
        "type": "ui_tab",
        "name": "DataLogger",
        "icon": "storage",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d6880d2.76b36f",
        "type": "ui_group",
        "name": "Device List",
        "tab": "85466034.14e0c",
        "order": 2,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "49b4254c.5474ec",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "85466034.14e0c",
        "order": 3,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "43fa38aa.decf08",
        "type": "ui_group",
        "name": "Measurement List",
        "tab": "85466034.14e0c",
        "order": 9,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "c52ab030.ec40a",
        "type": "ui_group",
        "name": "Measurement Info",
        "tab": "85466034.14e0c",
        "order": 10,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "9cdaa712.01fbb8",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "local",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "8f5f2415.72b0f8",
        "type": "influxdb",
        "z": "c184c8d0.48fa78",
        "hostname": "127.0.0.1",
        "port": "8086",
        "database": "aTimeSeries",
        "name": "aTimeSeries",
        "influxdbVersion": "1.x"
    },
    {
        "id": "a351a0a2.d0184",
        "type": "influxdb",
        "z": "c184c8d0.48fa78",
        "hostname": "127.0.0.1",
        "port": "8086",
        "database": "aTimeSeries",
        "name": "aTimeSeries",
        "influxdbVersion": "1.x"
    },
    {
        "id": "6c2d686e.2ec398",
        "type": "ui_group",
        "name": "MODBUS RTU Info",
        "tab": "85466034.14e0c",
        "order": 4,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "4537d5f9.98c22c",
        "type": "ui_tab",
        "name": "Cloud",
        "icon": "cloud",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a8cf212d.646a6",
        "type": "ui_group",
        "name": "Servers List",
        "tab": "4537d5f9.98c22c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9f1b4f31.7f04f",
        "type": "ui_group",
        "name": "Server Info",
        "tab": "4537d5f9.98c22c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6e01fa88.448514",
        "type": "ui_group",
        "name": "Digital IO Info",
        "tab": "85466034.14e0c",
        "order": 5,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "b3c075c6.7d4bd8",
        "type": "ui_group",
        "name": "ADC Info",
        "tab": "85466034.14e0c",
        "order": 7,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "9b849102.5b534",
        "type": "ui_group",
        "name": "Control",
        "tab": "85466034.14e0c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6fc924.b7d256dc",
        "type": "ui_group",
        "name": "Control",
        "tab": "4537d5f9.98c22c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "748d4ff6.f3e8f",
        "type": "ui_tab",
        "name": "Local Storage",
        "icon": "sd_storage",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a9b35bd0.ff0498",
        "type": "ui_group",
        "name": "CSV Configuration",
        "tab": "748d4ff6.f3e8f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f0ae0529.e2f7a8",
        "type": "ui_group",
        "name": "CSV Status",
        "tab": "748d4ff6.f3e8f",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "668b55e.b379cac",
        "type": "ui_group",
        "name": "Storage Status",
        "tab": "748d4ff6.f3e8f",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4b8f01ce.69f01",
        "type": "ui_group",
        "name": "CSV Files",
        "tab": "748d4ff6.f3e8f",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "1c60e58.a09e11b",
        "type": "ui_group",
        "name": "Field Flags",
        "tab": "4537d5f9.98c22c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4bd344c7.447e0c",
        "type": "ui_tab",
        "name": "Graphs",
        "icon": "dvr",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9a132943.aaa4f8",
        "type": "ui_group",
        "name": "Select Measurement",
        "tab": "4bd344c7.447e0c",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "910d5a55.e2cb88",
        "type": "ui_group",
        "name": "Graph 1",
        "tab": "4bd344c7.447e0c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "69d2e48d.5fb83c",
        "type": "ui_group",
        "name": "Graph 2",
        "tab": "4bd344c7.447e0c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4486389f.2e9958",
        "type": "ui_group",
        "name": "Graph 3",
        "tab": "4bd344c7.447e0c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "739177af.0accb8",
        "type": "ui_group",
        "name": "Graph 4",
        "tab": "4bd344c7.447e0c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9ff99fde.f574e",
        "type": "ui_group",
        "name": "Time Configuration",
        "tab": "4cfa633d.bba3bc",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c341f4cd.2ceee8",
        "type": "ui_group",
        "d": true,
        "name": "Static Routes",
        "tab": "dc94c78f.303db8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3e6ba360.3cbbac",
        "type": "ui_tab",
        "name": "Debug",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ab435d94.d29ce",
        "type": "ui_group",
        "name": "Variables",
        "tab": "3e6ba360.3cbbac",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e2cccaf.0e53c38",
        "type": "ui_group",
        "name": "Variables 2",
        "tab": "3e6ba360.3cbbac",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a674f548.1450d8",
        "type": "semaphore-config",
        "name": "Sem_Operation",
        "capacity": "1"
    },
    {
        "id": "a78155ac.ed5bb8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "12bed69.e35c129",
        "type": "semaphore-config",
        "name": "Sem_MQTT",
        "capacity": "1"
    },
    {
        "id": "7db826fe.ca75c8",
        "type": "ui_group",
        "name": "Server Status",
        "tab": "4537d5f9.98c22c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1b455197.441f2e",
        "type": "ui_group",
        "name": "Pulse Counter Info",
        "tab": "85466034.14e0c",
        "order": 8,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "d6c956cd.138468",
        "type": "ui_group",
        "name": "Web Management",
        "tab": "4cfa633d.bba3bc",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5cf3253d.88c8fc",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "assignment",
        "order": 13,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ee324b2f.1ee438",
        "type": "ui_group",
        "name": "Filter",
        "tab": "5cf3253d.88c8fc",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "b677349c.461718",
        "type": "ui_group",
        "name": "Log View",
        "tab": "5cf3253d.88c8fc",
        "order": 2,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "feff9596.7895a8",
        "type": "ui_group",
        "name": "MODBUS",
        "tab": "3e6ba360.3cbbac",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "deb611cd.001bd",
        "type": "modbus-client",
        "name": "Modbus_Test",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "89.29.240.158",
        "tcpPort": "8083",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "4017dc8d.a7c424",
        "type": "modbus-client",
        "name": "Test",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "tcpHost": "10.0.0.254",
        "tcpPort": "20502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "6778f30e.ac762c",
        "type": "ui_tab",
        "name": "Console",
        "icon": "tv",
        "order": 15,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "6585f725.eb4a18",
        "type": "ui_group",
        "name": "Console",
        "tab": "6778f30e.ac762c",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "9a870408.eb2918",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "dc94c78f.303db8",
        "type": "ui_tab",
        "name": "Router",
        "icon": "router",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "da3bed84.75ded",
        "type": "ui_group",
        "name": "Configuration",
        "tab": "dc94c78f.303db8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bb0661ca.79c59",
        "type": "ui_group",
        "name": "Port Forwarding",
        "tab": "dc94c78f.303db8",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "b6b639a8.016f08",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "f361ac14.75c2f",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "3180f6b6.f83b2a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "f361ac14.75c2f",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "220b7f4b.59dc1",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "f361ac14.75c2f",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "8676968b.cd4fe8",
        "type": "ui_tab",
        "name": "Event Rules",
        "icon": "notifications",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2e99a5e7.c4385a",
        "type": "ui_group",
        "name": "Trigger List",
        "tab": "8676968b.cd4fe8",
        "order": 1,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "a5c385b3.165f88",
        "type": "ui_group",
        "name": "Trigger Info",
        "tab": "8676968b.cd4fe8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "98ccc12f.ef924",
        "type": "ui_group",
        "name": "Rules List",
        "tab": "8676968b.cd4fe8",
        "order": 5,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "d2eefada.da15a8",
        "type": "ui_group",
        "name": "Rules Info",
        "tab": "8676968b.cd4fe8",
        "order": 6,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "fb155faa.7a0cb",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b89ef403.f4a9c8",
        "type": "ui_group",
        "name": "Action List",
        "tab": "8676968b.cd4fe8",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "2765e667.3f5d5a",
        "type": "ui_group",
        "name": "Action Info",
        "tab": "8676968b.cd4fe8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a94ba916.ee9248",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a5c385b3.165f88",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "6c91aa07.aea114",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a5c385b3.165f88",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "a8ea1ada.b80c58",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2765e667.3f5d5a",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "743d4161.18ea1",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2765e667.3f5d5a",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "e801c669.c5e578",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "d2eefada.da15a8",
        "order": 12,
        "width": "2",
        "height": 1
    },
    {
        "id": "c3789abe.c52e88",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "d2eefada.da15a8",
        "order": 17,
        "width": "3",
        "height": 1
    },
    {
        "id": "6abbc83e.014768",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "4b8f01ce.69f01",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "4505ef1.f88251",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "4b8f01ce.69f01",
        "order": 7,
        "width": "1",
        "height": 1
    },
    {
        "id": "290ee9f5.c42786",
        "type": "ui_group",
        "name": "Port Knocking",
        "tab": "4cfa633d.bba3bc",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "292d01a7.ee05ce",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8300553d.9b0318",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "8a9bec6c.62514",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8300553d.9b0318",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "2748a30a.d4f5cc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8300553d.9b0318",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "c6e204d6.9b5898",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8300553d.9b0318",
        "order": 17,
        "width": 2,
        "height": 1
    },
    {
        "id": "83270d5a.d3e67",
        "type": "ui_tab",
        "name": "Prueba",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d1b2041f.9dac98",
        "type": "ui_group",
        "name": "ABB Meter Info",
        "tab": "85466034.14e0c",
        "order": 6,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "549b5637.02d608",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "49b4254c.5474ec",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "4ceab18f.aadf3",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "49b4254c.5474ec",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "8691453e.3acc08",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c52ab030.ec40a",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "5d01804.a09788",
        "type": "function",
        "z": "2121f75f.935408",
        "name": "BBLGT Deploy Login",
        "func": "babelgateStatus = global.get('babelgateStatus');\nbbgtAgtCfg      = global.get('bbgtAgtCfg', \"config\") || {};\nbabelgate       = bbgtAgtCfg.babelgate;\nif (!babelgate || !babelgate.server || !babelgateStatus) {\n    msg.statusCode = 666;\n    return  [ msg, null, null ];\n}\n\nif (!babelgate.deploy_server)\n    babelgate.deploy_server = babelgate.server + \"/deployment/v1\";\n\nnow = Math.floor(new Date().getTime() / 1000);\nvar request_token = false;\nif (babelgateStatus.deploy_token === undefined) {\n    request_token = true;\n}\nelse {\n    var expires = babelgateStatus.deploy_token.expires || 0;\n\n    if (now > expires) {\n        request_token = true;\n    }\n    //node.warn(expires + \" \" + now);\n}\n//node.warn(\"request_token: \" + request_token);\n\nif (request_token === true) {\n    msg.url = babelgate.deploy_server + \"/login\";\n    msg.method = \"POST\";\n    msg.payload = {\n        \"user\" : \"josval\",\n        \"pass\" : \"232882a08215bba01e10c3fa07ae22c6\"\n    };\n    \n    msg.headers = {\n        \"Content-Type\"  : \"application/json\",\n    };\n    \n    msg.rejectUnauthorized = false;\n    \n    return [ null, msg, null ];\n}\n\nreturn [ null, null, msg ];\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 80,
        "wires": [
            [],
            [
                "8ff65f08.47387",
                "e3e820ab.3b79b"
            ],
            [
                "37118433.0f96ac"
            ]
        ]
    },
    {
        "id": "8ff65f08.47387",
        "type": "http request",
        "z": "2121f75f.935408",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "3c5d17af.3f38f8"
            ]
        ]
    },
    {
        "id": "87203fe.97bc3c",
        "type": "function",
        "z": "2121f75f.935408",
        "name": "",
        "func": "if (msg.statusCode != 200)\n    return [ msg, null ];\n\nreturn [ null, msg ]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3c5d17af.3f38f8",
        "type": "function",
        "z": "2121f75f.935408",
        "name": "BBLGT Deploy Process Key",
        "func": "if (msg.statusCode != 200) {\n    return [ msg, null ];\n}\n\nbabelgateStatus = global.get('babelgateStatus');\nbabelgateStatus.deploy_token = msg.payload\nglobal.set('babelgateStatus', babelgateStatus);\nreturn [ null , msg ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 120,
        "wires": [
            [],
            [
                "37118433.0f96ac",
                "2cbb9d50.715a92"
            ]
        ]
    },
    {
        "id": "55c36f30.89c37",
        "type": "http request",
        "z": "2121f75f.935408",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 870,
        "y": 260,
        "wires": [
            [
                "87203fe.97bc3c",
                "52a7217a.d25b1"
            ]
        ]
    },
    {
        "id": "e4503b1a.fcde28",
        "type": "function",
        "z": "695d7520.c8484c",
        "name": "LIGILO Prepare Login",
        "func": "var request_token = false;\n\nglobalFuns      = global.get(\"globalFuns\");\nbabelgateStatus = global.get('babelgateStatus');\nbbgtAgtCfg      = global.get('bbgtAgtCfg', \"config\");\nbabelgate = bbgtAgtCfg.babelgate;\nif (!babelgate || !babelgate.server) {\n    msg.codeStatus = 666;\n    return [ null, null, msg ];\n}\n\n//node.warn(babelgate);\nnow = Math.floor(new Date().getTime() / 1000);\nif (msg.babelgate_request.force_login)\n    request_token = true;\nelse if (babelgateStatus.tokens === undefined) {\n    request_token = true;\n    //node.warn(\"No token\");\n}\nelse {\n    var expires = babelgateStatus.tokens.expires || 0;\n\n    if (now > expires) {\n        request_token = true;\n    }\n    globalFuns.tlnt_log(5, \"LIGILO Request\", \"expires=\" + expires + \" now=\" + now);\n}\nglobalFuns.tlnt_log(3, \"LIGILO Request\", \"request_token: \" + request_token);\n\nif (request_token === true) {\n    msg.url = babelgate.server + \"/enchalma/v1/get\";\n    msg.rejectUnauthorized = false;\n    \n    b = new Buffer(babelgate.user + \":\" + babelgate.password);\n    msg.headers = {\n        \"Content-Type\"  : \"application/json\",\n        \"Authorization\" : \"Basic \" + b.toString('base64')\n    }\n\n    msg.method = \"POST\";\n    msg.payload = {\n      \"payload\": {\n        \"timestamp\": now\n      }\n    };\n    //msg.requestTimeout = 120000;\n    globalFuns.tlnt_log(3, \"LIGILO Request\", \"msg: \" + JSON.stringify(msg));\n    return [ msg, null, null ];\n}\n\nreturn [ null, msg, null ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "c83a28b8.2ff968"
            ],
            [
                "4afe5882.6b26e8"
            ],
            []
        ]
    },
    {
        "id": "c83a28b8.2ff968",
        "type": "http request",
        "z": "695d7520.c8484c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "4f3564c7.6f8d6c",
                "ce0123de.58f13"
            ]
        ]
    },
    {
        "id": "4f3564c7.6f8d6c",
        "type": "function",
        "z": "695d7520.c8484c",
        "name": "LIGILO Save Tokens",
        "func": "if (msg.statusCode != 200)\n    return [ msg, null ];\n\nnow = Math.floor(new Date().getTime() / 1000);\n\nglobalFuns      = global.get(\"globalFuns\");\nbabelgateStatus = global.get('babelgateStatus');\nbabelgateStatus.tokens = msg.payload.data;\nbabelgateStatus.tokens.expires = now + babelgateStatus.tokens.expires_in;\nglobal.set('babelgateStatus', babelgateStatus);\nglobalFuns.tlnt_log(3, \"LIGILO Request\", \"Save Tokens: \" + babelgateStatus.tokens.access_token);\n\nif (msg.babelgate_request.only_login)\n    return [ msg, null ];\n\nreturn [ null , msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 120,
        "wires": [
            [],
            [
                "4afe5882.6b26e8"
            ]
        ]
    },
    {
        "id": "ca8a629b.40509",
        "type": "http request",
        "z": "695d7520.c8484c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 1110,
        "y": 180,
        "wires": [
            [
                "eb9828dc.6340a8",
                "88064b5f.6052e8"
            ]
        ]
    },
    {
        "id": "eb9828dc.6340a8",
        "type": "debug",
        "z": "695d7520.c8484c",
        "name": "DBG: LIGILO Request Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 260,
        "wires": []
    },
    {
        "id": "ce0123de.58f13",
        "type": "debug",
        "z": "695d7520.c8484c",
        "name": "DBG: LIGILO Login Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "88064b5f.6052e8",
        "type": "function",
        "z": "695d7520.c8484c",
        "name": "LIGILO Result",
        "func": "if (msg.statusCode != 200)\n    return [ msg, null ];\n\nreturn [ null, msg ]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1300,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cf67604f.cd439",
        "type": "comment",
        "z": "695d7520.c8484c",
        "name": "ERROR",
        "info": "",
        "x": 1440,
        "y": 40,
        "wires": []
    },
    {
        "id": "45a5e3ee.f7399c",
        "type": "comment",
        "z": "695d7520.c8484c",
        "name": "OK",
        "info": "",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "4afe5882.6b26e8",
        "type": "function",
        "z": "695d7520.c8484c",
        "name": "LIGILO Prepare Request",
        "func": "babelgateStatus = global.get('babelgateStatus');\nbbgtAgtCfg      = global.get('bbgtAgtCfg', \"config\");\nbabelgate = bbgtAgtCfg.babelgate;\n\n\nmsg.payload = msg.babelgate_request.payload || {};\nmsg.url     = babelgate.server + msg.babelgate_request.url;\nmsg.headers = msg.babelgate_request.headers || {};\nmsg.method  = msg.babelgate_request.method || \"POST\";\nmsg.headers[\"Authorization\"] = \"Bearer \" + babelgateStatus.tokens.access_token;\nmsg.headers[\"www-authenticate\"] = \"Basic realm=\\\"BabelGate\\\"\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 180,
        "wires": [
            [
                "ca8a629b.40509",
                "a48a68df.9fed38"
            ]
        ]
    },
    {
        "id": "a48a68df.9fed38",
        "type": "debug",
        "z": "695d7520.c8484c",
        "name": "DBG: LIGILO Request Prepare",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "e10390e2.35256",
        "type": "comment",
        "z": "2121f75f.935408",
        "name": "ERROR",
        "info": "",
        "x": 1360,
        "y": 80,
        "wires": []
    },
    {
        "id": "37118433.0f96ac",
        "type": "function",
        "z": "2121f75f.935408",
        "name": "BBLGT Deploy Request",
        "func": "bbgtAgtCfg      = global.get('bbgtAgtCfg', \"config\") || {};\nbabelgate       = bbgtAgtCfg.babelgate;\nbabelgateStatus = global.get('babelgateStatus');\nif (!babelgate || !babelgate.server || !babelgateStatus) {\n    msg.statusCode = 666;\n    return  [ msg, null, null ];\n}\n\nif (!babelgate.deploy_server)\n    babelgate.deploy_server = babelgate.server + \"/deployment/v1\";\n\nmsg.payload = msg.babelgate_request.payload || {};\nmsg.url     = babelgate.deploy_server + msg.babelgate_request.url;\nmsg.headers = msg.babelgate_request.headers || {};\nmsg.method  = msg.babelgate_request.method || \"POST\";\nmsg.payload.key = babelgateStatus.deploy_token.key;\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 240,
        "wires": [
            [],
            [
                "55c36f30.89c37",
                "ae750bdf.bc8028"
            ]
        ]
    },
    {
        "id": "52a7217a.d25b1",
        "type": "debug",
        "z": "2121f75f.935408",
        "name": "DBG: BBLGT Dep Request Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1140,
        "y": 320,
        "wires": []
    },
    {
        "id": "ae750bdf.bc8028",
        "type": "debug",
        "z": "2121f75f.935408",
        "name": "DBG: BBLGT Dep Request Build",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 600,
        "y": 300,
        "wires": []
    },
    {
        "id": "2cbb9d50.715a92",
        "type": "debug",
        "z": "2121f75f.935408",
        "name": "DBG: BBLGT Dep Login Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 40,
        "wires": []
    },
    {
        "id": "ac530901.b91c98",
        "type": "comment",
        "z": "2121f75f.935408",
        "name": "OK",
        "info": "",
        "x": 1350,
        "y": 260,
        "wires": []
    },
    {
        "id": "e3e820ab.3b79b",
        "type": "debug",
        "z": "2121f75f.935408",
        "name": "DBG: BBLGT Dep Login Prepare",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "18cfe05a.47fc9",
        "type": "subflow:2121f75f.935408",
        "z": "61743491.06f1dc",
        "name": "",
        "env": [],
        "x": 750,
        "y": 120,
        "wires": [
            [
                "646e6c4c.b69984"
            ],
            [
                "646e6c4c.b69984"
            ]
        ]
    },
    {
        "id": "a21edd7e.3bfab",
        "type": "function",
        "z": "61743491.06f1dc",
        "name": "BBLGT Agent Build",
        "func": "babelgateStatus = global.get('babelgateStatus');\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\");\nif (!bbgtAgtCfg || !bbgtAgtCfg.babelgate || !bbgtAgtCfg.server)\n    return [ null, null ];\n\nmsg.statusCode = 666;\nif (!babelgateStatus || !babelgateStatus.uuid)\n    return [ null, msg ];\n\nmsg.babelgate_request = {\n    url     : \"/device/hello\",\n    method  : \"POST\",\n    payload : {\n        uuid : babelgateStatus.uuid\n    }\n}\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "18cfe05a.47fc9"
            ],
            [
                "b1625fbd.8f4bf"
            ]
        ]
    },
    {
        "id": "b1625fbd.8f4bf",
        "type": "debug",
        "z": "61743491.06f1dc",
        "name": "AGT: Build ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 730,
        "y": 200,
        "wires": []
    },
    {
        "id": "646e6c4c.b69984",
        "type": "debug",
        "z": "61743491.06f1dc",
        "name": "AGT: Answer",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "214716e6.52df1a",
        "type": "inject",
        "z": "61743491.06f1dc",
        "name": "BBGT Agent Tick (60s) [5s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "a21edd7e.3bfab"
            ]
        ]
    },
    {
        "id": "62175741.d35128",
        "type": "ui_text",
        "z": "f6f1314a.c5c41",
        "group": "8e4a0e9d.80ab4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<H1>Digital Inputs</H1>",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "21e0cb70.f9ff84",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 2,
        "group": "8e4a0e9d.80ab4",
        "width": 0,
        "height": 0,
        "label": "I/O 7 (IN1)",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "green",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "c44a84b7.67ea08",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 3,
        "group": "8e4a0e9d.80ab4",
        "width": 0,
        "height": 0,
        "label": "I/O 8 (IN2)",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "green",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "bb4dda3.4eae428",
        "type": "ui_text",
        "z": "f6f1314a.c5c41",
        "group": "8e4a0e9d.80ab4",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<H1>Digital Outputs</H1>",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 280,
        "y": 380,
        "wires": []
    },
    {
        "id": "7ddc9067.995e4",
        "type": "ui_switch",
        "z": "f6f1314a.c5c41",
        "name": "",
        "label": "I/O 11 (OUT1)",
        "tooltip": "",
        "group": "8e4a0e9d.80ab4",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "OUT1",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 920,
        "y": 420,
        "wires": [
            [
                "2bdc5b63.4e9e94"
            ]
        ]
    },
    {
        "id": "bd39e450.b35408",
        "type": "ui_switch",
        "z": "f6f1314a.c5c41",
        "name": "",
        "label": "I/O 12 (OUT2)",
        "tooltip": "",
        "group": "8e4a0e9d.80ab4",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "OUT2",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 920,
        "y": 540,
        "wires": [
            [
                "2bdc5b63.4e9e94"
            ]
        ]
    },
    {
        "id": "2bdc5b63.4e9e94",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\nglobalFuns = global.get(\"globalFuns\");\n\nglobalFuns.gpio_set(translate_io[msg.topic], msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "691de1f2.c8c63"
            ]
        ]
    },
    {
        "id": "b23a2967.1347b8",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 5,
        "group": "8e4a0e9d.80ab4",
        "width": 0,
        "height": 0,
        "label": "I/O 10 (IN4)",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "green",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 820,
        "y": 280,
        "wires": []
    },
    {
        "id": "a53e3d1d.1985f",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 500,
        "y": 160,
        "wires": [
            [
                "ac59ce57.4b886"
            ]
        ]
    },
    {
        "id": "dd4a7d17.508ec",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var ioname = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    translate_io[ioname].pin + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 160,
        "wires": [
            [
                "a53e3d1d.1985f"
            ]
        ]
    },
    {
        "id": "79b49cb1.acc3d4",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "IN1 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "IN1",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "dd4a7d17.508ec"
            ]
        ]
    },
    {
        "id": "5716f907.7f7dd8",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 500,
        "y": 200,
        "wires": [
            [
                "bd30ee97.7bc58"
            ]
        ]
    },
    {
        "id": "cf0dc088.41c8f",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var ioname = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    translate_io[ioname].pin + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 200,
        "wires": [
            [
                "5716f907.7f7dd8"
            ]
        ]
    },
    {
        "id": "c45e80b8.c78b9",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "IN2 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "IN2",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "cf0dc088.41c8f"
            ]
        ]
    },
    {
        "id": "fb87e1e1.adc0b",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "df4e26df.c0efb8"
            ]
        ]
    },
    {
        "id": "ab27b12a.52779",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var ioname = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    translate_io[ioname].pin + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 240,
        "wires": [
            [
                "fb87e1e1.adc0b"
            ]
        ]
    },
    {
        "id": "bac009d5.0622b8",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "IN3 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "IN3",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "ab27b12a.52779"
            ]
        ]
    },
    {
        "id": "f45cc7cb.829308",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 500,
        "y": 280,
        "wires": [
            [
                "ccdbc447.1a76d8"
            ]
        ]
    },
    {
        "id": "58512c2e.433954",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var ioname = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    translate_io[ioname].pin + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "f45cc7cb.829308"
            ]
        ]
    },
    {
        "id": "40b9751.0849a8c",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "IN4 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "IN4",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "58512c2e.433954"
            ]
        ]
    },
    {
        "id": "5311ea08.50ee84",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "LED Reset INIT (3s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "Reset",
        "payload": "0",
        "payloadType": "num",
        "x": 600,
        "y": 80,
        "wires": [
            [
                "21e0cb70.f9ff84",
                "c44a84b7.67ea08",
                "b23a2967.1347b8",
                "8d3ba7dc.7568c8"
            ]
        ]
    },
    {
        "id": "ac59ce57.4b886",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "21e0cb70.f9ff84",
                "a2bde4b1.9e8a18"
            ]
        ]
    },
    {
        "id": "bd30ee97.7bc58",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 200,
        "wires": [
            [
                "c44a84b7.67ea08",
                "ef2b70f3.edbfb"
            ]
        ]
    },
    {
        "id": "df4e26df.c0efb8",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 240,
        "wires": [
            [
                "8d3ba7dc.7568c8",
                "38944665.0efd4a"
            ]
        ]
    },
    {
        "id": "ccdbc447.1a76d8",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "b23a2967.1347b8",
                "ddebf1ab.d782b"
            ]
        ]
    },
    {
        "id": "8d3ba7dc.7568c8",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 4,
        "group": "8e4a0e9d.80ab4",
        "width": 0,
        "height": 0,
        "label": "I/O 9 (IN3)",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "green",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 820,
        "y": 240,
        "wires": []
    },
    {
        "id": "a5063cf6.f2e96",
        "type": "ui_text",
        "z": "f6f1314a.c5c41",
        "group": "ec776a71.602458",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<H1>LEDs</H1>",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 680,
        "wires": []
    },
    {
        "id": "5be4e092.7f74c",
        "type": "ui_switch",
        "z": "f6f1314a.c5c41",
        "name": "",
        "label": "LINK",
        "tooltip": "",
        "group": "ec776a71.602458",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "LED_LINK",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 810,
        "y": 740,
        "wires": [
            [
                "799f8bf6.48dc04",
                "8d902a9d.1f75a8"
            ]
        ]
    },
    {
        "id": "e8e5242c.262928",
        "type": "ui_switch",
        "z": "f6f1314a.c5c41",
        "name": "",
        "label": "ERROR",
        "tooltip": "",
        "group": "ec776a71.602458",
        "order": 4,
        "width": "4",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "LED_ERROR",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 820,
        "y": 820,
        "wires": [
            [
                "799f8bf6.48dc04",
                "ceb819ea.e8f8f8"
            ]
        ]
    },
    {
        "id": "799f8bf6.48dc04",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\n\nglobalFuns = global.get(\"globalFuns\");\nglobalFuns.gpio_set(translate_io[msg.topic], msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "fb398600.c9e928",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 5,
        "group": "ec776a71.602458",
        "width": "2",
        "height": "1",
        "label": "  ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 810,
        "y": 860,
        "wires": []
    },
    {
        "id": "e4c7ba0c.56e098",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "LED LINK Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "LED_LINK",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "8d902a9d.1f75a8"
            ]
        ]
    },
    {
        "id": "8d902a9d.1f75a8",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var pin_name = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.gpio     = translate_io[pin_name].pin;\nmsg.pin_name = pin_name;\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    msg.gpio + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 740,
        "wires": [
            [
                "ab25f185.39854"
            ]
        ]
    },
    {
        "id": "ab25f185.39854",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "becf3b31.371778"
            ]
        ]
    },
    {
        "id": "becf3b31.371778",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 740,
        "wires": [
            [
                "5be4e092.7f74c",
                "b5ac46f1.b84868"
            ]
        ]
    },
    {
        "id": "e08b309d.5dccc",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "LED ERROR Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "LED_ERROR",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "ceb819ea.e8f8f8"
            ]
        ]
    },
    {
        "id": "ceb819ea.e8f8f8",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var pin_name = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.gpio     = translate_io[pin_name].pin;\nmsg.pin_name = pin_name;\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    msg.gpio + \"/value\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "90b0197d.759e28"
            ]
        ]
    },
    {
        "id": "90b0197d.759e28",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "3598fed7.ec09c2"
            ]
        ]
    },
    {
        "id": "3598fed7.ec09c2",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 820,
        "wires": [
            [
                "e8e5242c.262928",
                "fb398600.c9e928"
            ]
        ]
    },
    {
        "id": "b5ac46f1.b84868",
        "type": "ui_led",
        "z": "f6f1314a.c5c41",
        "order": 3,
        "group": "ec776a71.602458",
        "width": "2",
        "height": "1",
        "label": "  ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "green",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "",
        "x": 810,
        "y": 780,
        "wires": []
    },
    {
        "id": "45ac4f1b.e5f38",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "OUT1 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "OUT1",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "84200d96.ae236"
            ]
        ]
    },
    {
        "id": "77057713.494a98",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "62b48b87.6aa0d4"
            ]
        ]
    },
    {
        "id": "62b48b87.6aa0d4",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "7ddc9067.995e4"
            ]
        ]
    },
    {
        "id": "6653e1c1.0ff",
        "type": "inject",
        "z": "f6f1314a.c5c41",
        "name": "OUT2 Tick (2s) [4s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "OUT2",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "84200d96.ae236"
            ]
        ]
    },
    {
        "id": "84200d96.ae236",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "var pin_name = msg.topic;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nvar translate_io = bbgtAgtInfo.translate_io;\n\nmsg.gpio     = translate_io[pin_name].pin;\nmsg.pin_name = pin_name;\nmsg.filename = \"/sys/class/gpio/gpio\" +\n    msg.gpio + \"/value\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 480,
        "wires": [
            [
                "71fe54a8.03319c"
            ]
        ]
    },
    {
        "id": "6a084f11.8d9c6",
        "type": "file in",
        "z": "f6f1314a.c5c41",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 610,
        "y": 540,
        "wires": [
            [
                "23692d9b.5ec6f2"
            ]
        ]
    },
    {
        "id": "23692d9b.5ec6f2",
        "type": "function",
        "z": "f6f1314a.c5c41",
        "name": "",
        "func": "msg.payload = msg.payload[0] - 48;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 540,
        "wires": [
            [
                "bd39e450.b35408"
            ]
        ]
    },
    {
        "id": "a2bde4b1.9e8a18",
        "type": "ui_chart",
        "z": "f6f1314a.c5c41",
        "name": "",
        "group": "4a6ac671.eb4448",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "IN1",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 950,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ef2b70f3.edbfb",
        "type": "ui_chart",
        "z": "f6f1314a.c5c41",
        "name": "",
        "group": "4a6ac671.eb4448",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "IN2",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 950,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "38944665.0efd4a",
        "type": "ui_chart",
        "z": "f6f1314a.c5c41",
        "name": "",
        "group": "4a6ac671.eb4448",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "IN3",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 950,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ddebf1ab.d782b",
        "type": "ui_chart",
        "z": "f6f1314a.c5c41",
        "name": "",
        "group": "4a6ac671.eb4448",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "IN4",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 950,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "99cb20c3.ef7e9",
        "type": "link in",
        "z": "f6f1314a.c5c41",
        "name": "IO: READ (IN)",
        "links": [
            "691de1f2.c8c63"
        ],
        "x": 195,
        "y": 480,
        "wires": [
            [
                "84200d96.ae236"
            ]
        ]
    },
    {
        "id": "71fe54a8.03319c",
        "type": "switch",
        "z": "f6f1314a.c5c41",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OUT1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OUT2",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "77057713.494a98"
            ],
            [
                "6a084f11.8d9c6"
            ]
        ]
    },
    {
        "id": "691de1f2.c8c63",
        "type": "link out",
        "z": "f6f1314a.c5c41",
        "name": "IO: READ (OUT)",
        "links": [
            "99cb20c3.ef7e9"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "a7215656.7f06a8",
        "type": "link in",
        "z": "f6f1314a.c5c41",
        "name": "IO: Trigger (IN)",
        "links": [
            "d6c2ca01.8bc338"
        ],
        "x": 795,
        "y": 480,
        "wires": [
            [
                "a6680cc4.b90c7"
            ]
        ]
    },
    {
        "id": "a6680cc4.b90c7",
        "type": "change",
        "z": "f6f1314a.c5c41",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "request.io",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "request.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 480,
        "wires": [
            [
                "2bdc5b63.4e9e94"
            ]
        ]
    },
    {
        "id": "b52f0be1.1715c8",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "Environment Load",
        "func": "// Importar configuracion global\nvar tlntSettings = global.get('tlntSettings');\nvar env = global.get(\"env\");\n\nfunction set_envar_string(envar, value, defval)\n{\n    try {\n        eval(\"env.\" + envar + \"='\" + value + \"'\");\n    } catch(e) {\n        eval(\"env.\" + envar + \"='\" + defval + \"'\");\n    }\n}\n\nfunction set_envar(envar, value, defval)\n{\n    try {\n        eval(\"env.\" + envar + \"=\" + value);\n    } catch(e) {\n        eval(\"env.\" + envar + \"=\" + \"'\" + defval + \"'\");\n    }\n}\n\n/* Project */\nset_envar(\"PROJECT\", \"tlntSettings.project.name\", \"Test Project\");\nset_envar(\"LOGLEVEL\", \"tlntSettings.project.loglevel\", 1);\n\n/* Translation */\nset_envar(\"PERIOD_JOIN_ALLDATA\", \"tlntSettings.translation.periods.allData\", 10);\nset_envar(\"PERIOD_JOIN_LASTDATA\", \"tlntSettings.translation.periods.lastData\", 10);\n\n/* Cloud */\nvar cloud = tlntSettings.cloud;\n    /* Pordo */\nset_envar(\"PORDO_URL\", \"cloud.services.pordo.url\", \"\");\n\n    /* InfluxDB */\nset_envar(\"INFLUXDB_URL\", \"cloud.services.influxdb.url\", \"\");\nset_envar(\"INFLUXDB_DATABASE\", \"cloud.services.influxdb.database\", \"\");\nenv.INFLUXDB_CMD=env.INFLUXDB_URL + \"/write?db=\" + env.INFLUXDB_DATABASE;\n\n    /* PowerBI */\nset_envar(\"POWERBI_URL\", \"cloud.services.powerbi.url\", \"\");\n\n/* Environment */\ntry {\n    var tlntEnv = tlntSettings.project.env;\n    node.warn(tlntEnv);\n    for (var key in tlntEnv) {\n        if (tlntEnv.hasOwnProperty(key)) {\n            set_envar_string(key, tlntEnv[key], \"\");\n            //node.warn(key + \":\" + tlntEnv[key]);\n        }\n    }\n} catch (e) {\n    node.warn(\"ERROR en lectura de Environment\");\n}\n\nmsg.env = env;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "165a95fa.064f6a"
            ]
        ]
    },
    {
        "id": "4c41bee9.29a4a",
        "type": "comment",
        "z": "1c8a3583.7e682a",
        "name": "Load initial configuration into Environment",
        "info": "Load initial configuration\nConfigure Function",
        "x": 220,
        "y": 140,
        "wires": []
    },
    {
        "id": "f706c41c.d91498",
        "type": "catch",
        "z": "1c8a3583.7e682a",
        "name": "CatchAll",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "50539bd6.d925d4",
                "e0248cda.9507b"
            ]
        ]
    },
    {
        "id": "50539bd6.d925d4",
        "type": "debug",
        "z": "1c8a3583.7e682a",
        "name": "DBG CatchAll",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 360,
        "y": 500,
        "wires": []
    },
    {
        "id": "165a95fa.064f6a",
        "type": "debug",
        "z": "1c8a3583.7e682a",
        "name": "STARTUP: Env",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 280,
        "wires": []
    },
    {
        "id": "e6111f00.ba6ca",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Users",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "9fff1128.3b4a6",
        "type": "ui_dropdown",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "User",
        "tooltip": "Select User",
        "place": "Select option",
        "group": "efb71a7c.2da118",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 450,
        "y": 220,
        "wires": [
            [
                "7884edec.7a0ec4",
                "b75238fb.003138"
            ]
        ]
    },
    {
        "id": "cc13f76c.2f7738",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "MGMT Users Inject INIT (3s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "5beef210.a88c3c"
            ]
        ]
    },
    {
        "id": "5beef210.a88c3c",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Users Build",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\nusers = bbgtAgtCfg.users || {};\n\narrayOut = [];\nfor (var i in users) {\n    arrayOut.push(users[i].username);\n}\n\narrayOut.push({ \"<New User>\" : \"__new_user__\" });\n\nmsg.options = arrayOut;\nmsg.payload = arrayOut[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 220,
        "wires": [
            [
                "9fff1128.3b4a6",
                "874b3e16.2e374"
            ]
        ]
    },
    {
        "id": "e250b460.e37628",
        "type": "ui_switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "API User",
        "tooltip": "",
        "group": "efb71a7c.2da118",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 640,
        "y": 280,
        "wires": [
            [
                "db3a7c22.fea0e"
            ]
        ]
    },
    {
        "id": "5602d27b.c73cdc",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "efb71a7c.2da118",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.topic}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "126d462.5034aba"
            ]
        ]
    },
    {
        "id": "3ff09318.056dcc",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "New Password",
        "tooltip": "",
        "group": "efb71a7c.2da118",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "e0280860.1d4d08"
            ]
        ]
    },
    {
        "id": "b28d71b7.4b7ae",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Confirm Password",
        "tooltip": "",
        "group": "efb71a7c.2da118",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "",
        "x": 670,
        "y": 400,
        "wires": [
            [
                "d1a6690d.e73de8"
            ]
        ]
    },
    {
        "id": "7884edec.7a0ec4",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedUser",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b75238fb.003138",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Users Fill",
        "func": "msg1 = null;\nmsg2 = null;\nmsg3 = null;\n\nif (msg.payload == \"__new_user__\") {\n    msg2 = { enabled: true };\n    msg3 = { topic : \"Create User\" };\n    return [ msg1, msg2, msg3 ];\n}\n\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\nusers = bbgtAgtCfg.users || {};\n\nuser = users[msg.payload];\nif (user === undefined) {\n    msg2 = { enabled: false };\n    msg3 = { topic : \"Change Password\" };\n    return [ msg1, msg2, msg3 ];\n}\n\nmsg1 = { payload : false };\nif (user.type.search(\"API\") != -1)\n    msg1 = { payload : true };\n\nmsg2 = { enabled: false };\nmsg3 = { topic : \"Change Password\" };\n\nreturn [ msg1, msg2, msg3 ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "e250b460.e37628"
            ],
            [
                "fe267f88.23f09"
            ],
            [
                "5602d27b.c73cdc"
            ]
        ]
    },
    {
        "id": "e0280860.1d4d08",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "newPassword",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d1a6690d.e73de8",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "newPasswordConfirm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "126d462.5034aba",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "Change/Create User",
        "func": "//*******************************************\n//*******************************************\n\nfunction gen_random_string(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\n\n  /*\n  * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n  * to work around bugs in some JS interpreters.\n  */\n  function safeAdd (x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff)\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xffff)\n  }\n\n  /*\n  * Bitwise rotate a 32-bit number to the left.\n  */\n  function bitRotateLeft (num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt))\n  }\n\n  /*\n  * These functions implement the four basic operations the algorithm uses.\n  */\n  function md5cmn (q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\n  }\n  function md5ff (a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t)\n  }\n  function md5gg (a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)\n  }\n  function md5hh (a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t)\n  }\n  function md5ii (a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t)\n  }\n\n  /*\n  * Calculate the MD5 of an array of little-endian words, and a bit length.\n  */\n  function binlMD5 (x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32)\n    x[((len + 64) >>> 9 << 4) + 14] = len\n\n    var i\n    var olda\n    var oldb\n    var oldc\n    var oldd\n    var a = 1732584193\n    var b = -271733879\n    var c = -1732584194\n    var d = 271733878\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a\n      oldb = b\n      oldc = c\n      oldd = d\n\n      a = md5ff(a, b, c, d, x[i], 7, -680876936)\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\n      b = md5gg(b, c, d, a, x[i], 20, -373897302)\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\n      d = md5hh(d, a, b, c, x[i], 11, -358537222)\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n      a = md5ii(a, b, c, d, x[i], 6, -198630844)\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n      a = safeAdd(a, olda)\n      b = safeAdd(b, oldb)\n      c = safeAdd(c, oldc)\n      d = safeAdd(d, oldd)\n    }\n    return [a, b, c, d]\n  }\n\n  /*\n  * Convert an array of little-endian words to a string\n  */\n  function binl2rstr (input) {\n    var i\n    var output = ''\n    var length32 = input.length * 32\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff)\n    }\n    return output\n  }\n\n  /*\n  * Convert a raw string to an array of little-endian words\n  * Characters >255 have their high-byte silently ignored.\n  */\n  function rstr2binl (input) {\n    var i\n    var output = []\n    output[(input.length >> 2) - 1] = undefined\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0\n    }\n    var length8 = input.length * 8\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32)\n    }\n    return output\n  }\n\n  /*\n  * Calculate the MD5 of a raw string\n  */\n  function rstrMD5 (s) {\n    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\n  }\n\n  /*\n  * Calculate the HMAC-MD5, of a key and some data (raw strings)\n  */\n  function rstrHMACMD5 (key, data) {\n    var i\n    var bkey = rstr2binl(key)\n    var ipad = []\n    var opad = []\n    var hash\n    ipad[15] = opad[15] = undefined\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8)\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636\n      opad[i] = bkey[i] ^ 0x5c5c5c5c\n    }\n    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\n  }\n\n  /*\n  * Convert a raw string to a hex string\n  */\n  function rstr2hex (input) {\n    var hexTab = '0123456789abcdef'\n    var output = ''\n    var x\n    var i\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i)\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)\n    }\n    return output\n  }\n\n  /*\n  * Encode a string as utf-8\n  */\n  function str2rstrUTF8 (input) {\n    return unescape(encodeURIComponent(input))\n  }\n\n  /*\n  * Take string arguments and return either raw or hex encoded strings\n  */\n  function rawMD5 (s) {\n    return rstrMD5(str2rstrUTF8(s))\n  }\n  function hexMD5 (s) {\n    return rstr2hex(rawMD5(s))\n  }\n  function rawHMACMD5 (k, d) {\n    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\n  }\n  function hexHMACMD5 (k, d) {\n    return rstr2hex(rawHMACMD5(k, d))\n  }\n\n  function md5 (string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string)\n      }\n      return rawMD5(string)\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string)\n    }\n    return rawHMACMD5(key, string)\n  }\n\n//*******************************************\n//*******************************************\n\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nusers = bbgtAgtCfg.users || {};\nselectedUser = flow.get(\"selectedUser\");\npasswd  = flow.get(\"newPassword\");\npasswd2 = flow.get(\"newPasswordConfirm\");\nmsg2 = {};\n\nif (passwd != passwd2) {\n    msg2.payload = \"Password Error\";\n    return [ null, msg2 ];\n}\n\npasswd_crypt = md5(passwd);\nbcryptjs = global.get(\"bcryptjs\");\npasswdNR = bcryptjs.hashSync(passwd, 8);\nnode.warn(passwdNR);\n\nmsg2.payload = \"Password Changed\";\nif (selectedUser == \"__new_user__\") {\n    selectedUser = flow.get(\"newUser\");\n    users[selectedUser] = {\n        type : \"\",\n        username : selectedUser\n    };\n    if (flow.get(\"flagAPI\") === true)\n        users[selectedUser].type += \"API\";\n    msg2.payload = \"User Created\";\n    globalFuns.tlnt_log(2, \"SystemMgmt\", \"Create/Change User: User Created: \" + selectedUser + \" \" + users[selectedUser].type);\n}\nelse if (users[selectedUser] === undefined) {\n    msg2.payload = \"Invalid User\";\n    globalFuns.tlnt_log(2, \"SystemMgmt\", \"Create/Change User: Invalid User: \" + selectedUser);\n    return [ null, msg2 ];\n}\nusers[selectedUser].passwordNR = passwdNR;\nusers[selectedUser].password   = passwd_crypt;\nusers[selectedUser].password_clean = passwd;\n\n//node.warn(\"New Password: \" + passwd);\n//node.warn(\"New Password MD5: \" + passwd_crypt);\n//node.warn(users);\n\nmsg.payload = users;\n\nbbgtAgtCfg.users = users;\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\nglobalFuns.tlnt_log(2, \"SystemMgmt\", \"User Saved: \" + selectedUser);\n\nreturn [ msg, msg2 ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 460,
        "wires": [
            [
                "554e7276.cdc63c"
            ],
            [
                "6f791b80.842384",
                "23bad401.aa995c"
            ]
        ]
    },
    {
        "id": "6f791b80.842384",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 1160,
        "y": 500,
        "wires": []
    },
    {
        "id": "554e7276.cdc63c",
        "type": "file",
        "z": "31c39280.4de9fe",
        "name": "",
        "filename": "/etc/config/tlnt/node-red-users.conf",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 460,
        "wires": [
            [
                "f70099ad.88cde8"
            ]
        ]
    },
    {
        "id": "fe267f88.23f09",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "New User",
        "tooltip": "",
        "group": "efb71a7c.2da118",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 640,
        "y": 320,
        "wires": [
            [
                "34708b3e.fd3604"
            ]
        ]
    },
    {
        "id": "34708b3e.fd3604",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "newUser",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "db3a7c22.fea0e",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "flagAPI",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "fa85122b.a4a03",
        "type": "link in",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Users Reload (IN)",
        "links": [
            "f70099ad.88cde8"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "5beef210.a88c3c"
            ]
        ]
    },
    {
        "id": "f70099ad.88cde8",
        "type": "link out",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Users Reload (OUT)",
        "links": [
            "fa85122b.a4a03",
            "69ebea24.492094"
        ],
        "x": 1415,
        "y": 460,
        "wires": []
    },
    {
        "id": "e78035d4.23f118",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "efb71a7c.2da118",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 650,
        "y": 500,
        "wires": [
            [
                "a1103d63.80228"
            ]
        ]
    },
    {
        "id": "a1103d63.80228",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "Delete User",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nusers = bbgtAgtCfg.users;\nif (!users)\n    return null;\n\nselectedUser = flow.get(\"selectedUser\");\n\nmsg2 = { topic : \"Delete User\" };\n\nif (selectedUser == \"__new_user__\") {\n    msg2.payload = \"Invalid User\";\n    return [ null, msg2 ];\n}\nelse if (users[selectedUser] === undefined) {\n    msg2.payload = \"Invalid User\";\n    return [ null, msg2 ];\n}\n\nif (bbgtAgtCfg.web.user && (bbgtAgtCfg.web.user == selectedUser)) {\n    msg2.payload = \"User can't be deleted! It is in use as Web User.\";\n    return [ null, msg2 ];\n}\n\ndelete(users[selectedUser]);\n\nmsg.payload = users;\nmsg2.payload = \"User Deleted\";\n\nbbgtAgtCfg.users = users;\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\nglobalFuns.tlnt_log(2, \"SystemMgmt\", \"User Deleted: \" + selectedUser);\n\nreturn [ msg, msg2 ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 500,
        "wires": [
            [
                "554e7276.cdc63c"
            ],
            [
                "6f791b80.842384",
                "23bad401.aa995c"
            ]
        ]
    },
    {
        "id": "874b3e16.2e374",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: Show Users",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 160,
        "wires": []
    },
    {
        "id": "20dd48a4.6260e8",
        "type": "http in",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "520c0ac9.141ae4",
                "8f0609a3.b22558"
            ]
        ]
    },
    {
        "id": "520c0ac9.141ae4",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Validate User/Password",
        "func": "bbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nusers = bbgtAgtCfg.users || {};\n\nTIMEOUT_KEY=300; // Timeout en segundos\n\nfunction gen_random_string(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\n\n// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\nhttp_key = global.get('http_key');\n\nuser = users[msg.payload.user];\nif ( (user) &&\n     (user.type.search(\"API\") != -1) &&\n     (msg.payload.pass == user.password) ) {\n    if ( (http_key === undefined) ||\n         (http_key.expires < now) ) {\n        http_key = {};\n        http_key.key = gen_random_string(10);\n    }\n    http_key.expires = now + TIMEOUT_KEY;\n    global.set('http_key', http_key);\n\n    msg.statusCode = 200;\n    msg.payload = {\n        \"key\": http_key.key\n    };\n}\nelse {\n    msg.statusCode = 400;\n    msg.payload = {\n        \"error\": \"Authentication Error\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "9e80b3d9.0510e",
                "f2f7ab85.4eb388"
            ]
        ]
    },
    {
        "id": "9e80b3d9.0510e",
        "type": "http response",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Access-Control-Allow-Headers": "Authorization, Content-Type",
            "Access-Control-Allow-Methods": "POST",
            "Access-Control-Allow-Origin": "*"
        },
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "8f0609a3.b22558",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Login IN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2f7ab85.4eb388",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Login OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "23f1f16a.41ee4e",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Validate Key",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\nhttp_key = global.get('http_key');\n\nif ( (http_key === undefined) ||\n     (msg.payload.key != http_key.key) ) {\n    msg.statusCode = 400;\n    msg.payload = { \"error\" : \"Invalid Key\" };\n    return [ null, msg ];\n}\nelse if (http_key.expires < now) {\n    msg.statusCode = 401;\n    msg.payload = { \"error\" : \"Expired Key\" };\n    return [ null, msg ];\n}\n\nmsg.request    = msg.payload;\nmsg.payload    = {};\nmsg.statusCode = 200;\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "8d4e6531.e65268"
            ],
            [
                "9c21c9d3.4aebd8"
            ]
        ]
    },
    {
        "id": "4bbba135.cc9c3",
        "type": "http in",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "url": "/action",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "23f1f16a.41ee4e"
            ]
        ]
    },
    {
        "id": "8d4e6531.e65268",
        "type": "switch",
        "z": "9a79c914.b7e6f8",
        "name": "API: Check action",
        "property": "request.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "io-set",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "exec",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "apt",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "8f7226db.25df08"
            ],
            [
                "4cfc95f6.298d4c"
            ],
            [
                "33b81a21.235676"
            ],
            [
                "b6d3ccbc.3bb27"
            ]
        ]
    },
    {
        "id": "85b73a0b.7899c8",
        "type": "http response",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Access-Control-Allow-Headers": "Authorization, Content-Type",
            "Access-Control-Allow-Methods": "POST",
            "Access-Control-Allow-Origin": "*"
        },
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c21c9d3.4aebd8",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 515,
        "y": 360,
        "wires": []
    },
    {
        "id": "e8e1ad32.048f",
        "type": "link in",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (IN)",
        "links": [
            "1cf81ca4.1cf5d3",
            "24421010.25f47",
            "2cbc7366.74d2ac",
            "394b033f.7f387c",
            "8f555574.7606d8",
            "9c21c9d3.4aebd8",
            "a0fe1ffb.11f15",
            "de8b5cd7.73d09",
            "e54030e2.2c2d6",
            "a400c4b2.c3f7c8",
            "717d23b8.6e353c",
            "c9c46e32.0fe2e",
            "965bc416.f88958",
            "85fb678e.cec8b8",
            "7b1cac91.cdbb14",
            "f506fbd6.550c78",
            "8ad8c026.ff0a8"
        ],
        "x": 1015,
        "y": 100,
        "wires": [
            [
                "85b73a0b.7899c8",
                "d369469b.f06568"
            ]
        ]
    },
    {
        "id": "b6d3ccbc.3bb27",
        "type": "change",
        "z": "9a79c914.b7e6f8",
        "name": "API: Invalid Action",
        "rules": [
            {
                "t": "set",
                "p": "payload.error",
                "pt": "msg",
                "to": "Invalid Action",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "403",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 440,
        "wires": [
            [
                "1cf81ca4.1cf5d3"
            ]
        ]
    },
    {
        "id": "8f7226db.25df08",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'io-set'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif ( (msg.request.io === undefined) ||\n     (msg.request.value === undefined) ) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return0 [ null, msg ];\n}\n\nmsg.statusCode = 200;\nmsg.payload    = {};\n\nreturn [ msg, msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "d6c2ca01.8bc338",
                "2cbc7366.74d2ac"
            ],
            [
                "2cbc7366.74d2ac"
            ]
        ]
    },
    {
        "id": "4cfc95f6.298d4c",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'exec'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif ( (msg.request.cmd === undefined) ||\n     (msg.request.args === undefined) ) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return [ null, msg ];\n}\n\nmsg.payload = msg.request.cmd + \" \" + msg.request.args;\n\nreturn [ msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "a444ac5f.3222d"
            ],
            [
                "a0fe1ffb.11f15"
            ]
        ]
    },
    {
        "id": "33b81a21.235676",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'apt'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif (msg.request.cmd === undefined) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return [ null, msg ];\n}\n\nif ( ( (msg.request.cmd == 'install') ||\n       (msg.request.cmd == 'remove') ) &&\n     ( msg.request.packages !== undefined ) ) {\n    msg.payload = \"apt \" + msg.request.cmd + \" \" + msg.request.packages;\n}\nelse if ( (msg.request.cmd == 'list') &&\n          (msg.request.args !== undefined) ) {\n    msg.payload = \"apt \" + msg.request.cmd + \" \" + msg.request.args;\n}\nelse {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Invalid arguments\" };\n    return [ null, msg ];\n}\n\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "f8bd6ea7.c71c1"
            ],
            [
                "de8b5cd7.73d09"
            ]
        ]
    },
    {
        "id": "d369469b.f06568",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: POST OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1160,
        "y": 140,
        "wires": []
    },
    {
        "id": "d6c2ca01.8bc338",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "IO: Trigger (OUT)",
        "links": [
            "a7215656.7f06a8"
        ],
        "x": 995,
        "y": 180,
        "wires": []
    },
    {
        "id": "2cbc7366.74d2ac",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 995,
        "y": 220,
        "wires": []
    },
    {
        "id": "f8210d0b.619f1",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Validate Key",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\nhttp_key = global.get('http_key');\n\nif ( (http_key === undefined) ||\n     (msg.payload.key != http_key.key) ) {\n    msg.statusCode = 400;\n    msg.payload = { \"error\" : \"Invalid Key\" };\n    return [ null, msg ];\n}\nelse if (http_key.expires < now) {\n    msg.statusCode = 401;\n    msg.payload = { \"error\" : \"Expired Key\" };\n    return [ null, msg ];\n}\n\nmsg.request    = msg.payload;\nmsg.payload    = {};\nmsg.statusCode = 200;\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "daaad11f.e51e5"
            ],
            [
                "24421010.25f47"
            ]
        ]
    },
    {
        "id": "ad541213.ccf56",
        "type": "http in",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "url": "/request",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "f8210d0b.619f1"
            ]
        ]
    },
    {
        "id": "daaad11f.e51e5",
        "type": "switch",
        "z": "9a79c914.b7e6f8",
        "name": "API: Check request",
        "property": "request.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "io-list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "io-get",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 660,
        "wires": [
            [
                "eb908ad5.71c2d8"
            ],
            [],
            [
                "bacd460a.6a99b8"
            ]
        ]
    },
    {
        "id": "eb908ad5.71c2d8",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'io-list'",
        "func": "msg.statusCode = 200;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 580,
        "wires": [
            [
                "394b033f.7f387c"
            ]
        ]
    },
    {
        "id": "24421010.25f47",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 515,
        "y": 720,
        "wires": []
    },
    {
        "id": "394b033f.7f387c",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1035,
        "y": 580,
        "wires": []
    },
    {
        "id": "1cf81ca4.1cf5d3",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1035,
        "y": 440,
        "wires": []
    },
    {
        "id": "bacd460a.6a99b8",
        "type": "change",
        "z": "9a79c914.b7e6f8",
        "name": "API: Invalid Request",
        "rules": [
            {
                "t": "set",
                "p": "payload.error",
                "pt": "msg",
                "to": "Invalid Request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "403",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 720,
        "wires": [
            [
                "e54030e2.2c2d6"
            ]
        ]
    },
    {
        "id": "e54030e2.2c2d6",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1035,
        "y": 720,
        "wires": []
    },
    {
        "id": "adaa860b.14c178",
        "type": "exec",
        "z": "9a79c914.b7e6f8",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 190,
        "y": 880,
        "wires": [
            [
                "850f7346.98fba"
            ],
            [
                "deec1b22.aad818"
            ],
            []
        ]
    },
    {
        "id": "8f555574.7606d8",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 815,
        "y": 880,
        "wires": []
    },
    {
        "id": "37f2382a.e401d8",
        "type": "join",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 550,
        "y": 880,
        "wires": [
            [
                "35d2cc8b.bbe2a4"
            ]
        ]
    },
    {
        "id": "a444ac5f.3222d",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'exec' (OUT)",
        "links": [
            "50880b8c.e143d4"
        ],
        "x": 995,
        "y": 260,
        "wires": []
    },
    {
        "id": "50880b8c.e143d4",
        "type": "link in",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'exec' (IN)",
        "links": [
            "a444ac5f.3222d",
            "f8bd6ea7.c71c1",
            "fcd56c88.dc255",
            "d48ae0c3.bf112"
        ],
        "x": 75,
        "y": 880,
        "wires": [
            [
                "adaa860b.14c178"
            ]
        ]
    },
    {
        "id": "2e84d2e9.d746ce",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /request",
        "info": "",
        "x": 130,
        "y": 600,
        "wires": []
    },
    {
        "id": "f9de9bcd.274098",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /action",
        "info": "200: OK\n400: Invalid Key\n401: Expired Key\n402: Missing Arguments\n403: Invalid Action\n404: Invalid Arguments",
        "x": 130,
        "y": 240,
        "wires": []
    },
    {
        "id": "63a41abd.2334e4",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /login",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "e531f774.cc81e8",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /action 'exec' Commands",
        "info": "",
        "x": 180,
        "y": 820,
        "wires": []
    },
    {
        "id": "850f7346.98fba",
        "type": "change",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stdout",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 860,
        "wires": [
            [
                "37f2382a.e401d8"
            ]
        ]
    },
    {
        "id": "deec1b22.aad818",
        "type": "change",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stderr",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 900,
        "wires": [
            [
                "37f2382a.e401d8"
            ]
        ]
    },
    {
        "id": "35d2cc8b.bbe2a4",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    stdout: msg.stdout || \"\",\n    stderr: msg.stderr || \"\",\n    rc: msg.rc.code\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 880,
        "wires": [
            [
                "8f555574.7606d8"
            ]
        ]
    },
    {
        "id": "f8bd6ea7.c71c1",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: Action 'apt' (OUT)",
        "links": [
            "50880b8c.e143d4"
        ],
        "x": 995,
        "y": 340,
        "wires": []
    },
    {
        "id": "a0fe1ffb.11f15",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 995,
        "y": 300,
        "wires": []
    },
    {
        "id": "de8b5cd7.73d09",
        "type": "link out",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 995,
        "y": 380,
        "wires": []
    },
    {
        "id": "c5625422.8d4bd8",
        "type": "http in",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "url": "/status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "812a4337.f83b",
                "788ebde9.5139b4"
            ]
        ]
    },
    {
        "id": "812a4337.f83b",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: Status Build Answer",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status : \"OK\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "dc05c94.0312a38",
                "c428b163.08ac9"
            ]
        ]
    },
    {
        "id": "dc05c94.0312a38",
        "type": "http response",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Access-Control-Allow-Headers": "Authorization, Content-Type",
            "Access-Control-Allow-Methods": "POST",
            "Access-Control-Allow-Origin": "*"
        },
        "x": 670,
        "y": 1060,
        "wires": []
    },
    {
        "id": "788ebde9.5139b4",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Status IN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c428b163.08ac9",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Status OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 720,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9702b057.b2c2c",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /status",
        "info": "",
        "x": 130,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b21a3d13.ae635",
        "type": "exec",
        "z": "31c39280.4de9fe",
        "command": "/sbin/reboot",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 990,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f9427ea8.88c8c",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Rebooting Device",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 600,
        "wires": [
            [
                "65ca07c4.5645f8"
            ]
        ]
    },
    {
        "id": "311018f5.5fed98",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 780,
        "y": 660,
        "wires": [
            [
                "b21a3d13.ae635"
            ]
        ]
    },
    {
        "id": "ef7e244e.68ce38",
        "type": "switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 660,
        "wires": [
            [
                "f9427ea8.88c8c",
                "311018f5.5fed98",
                "7187230f.20595c"
            ]
        ]
    },
    {
        "id": "f347a25a.609c3",
        "type": "exec",
        "z": "31c39280.4de9fe",
        "command": "service node-red restart",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1230,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "4de966a4.53f3b8",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Restarting System",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 760,
        "wires": [
            [
                "ca06e438.e08d68",
                "98ed05d9.337c78"
            ]
        ]
    },
    {
        "id": "f280763.fe11a88",
        "type": "switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 760,
        "wires": [
            [
                "9ac816e.1d311e8",
                "4de966a4.53f3b8"
            ]
        ]
    },
    {
        "id": "397fdaf8.43b4c6",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot Device",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "power_settings_new",
        "payload": "Reboot Device?",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "b399c2d6.bce2d"
            ]
        ]
    },
    {
        "id": "bd6b9716.bb37a8",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Restart System",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "autorenew",
        "payload": "Restart System?",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 760,
        "wires": [
            [
                "78027603.c2d5a8"
            ]
        ]
    },
    {
        "id": "65ca07c4.5645f8",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 1000,
        "y": 600,
        "wires": []
    },
    {
        "id": "b399c2d6.bce2d",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 410,
        "y": 660,
        "wires": [
            [
                "ef7e244e.68ce38"
            ]
        ]
    },
    {
        "id": "ca06e438.e08d68",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 1020,
        "y": 780,
        "wires": []
    },
    {
        "id": "78027603.c2d5a8",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 410,
        "y": 760,
        "wires": [
            [
                "f280763.fe11a88"
            ]
        ]
    },
    {
        "id": "a3382a22.d689d8",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Control",
        "info": "",
        "x": 250,
        "y": 580,
        "wires": []
    },
    {
        "id": "e994bc4a.a1e9f",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "IP: Save Changes",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\nvar selectedIface = flow.get('mgmtIpSelectedIface');\nvar selectedData  = flow.get('mgmtIpSelectedData');\naddress = selectedData.address;\nnetmask = selectedData.netmask;\ngateway = selectedData.gateway;\ndns     = selectedData.dns;\nmetric  = selectedData.metric;\n\nIFACE = selectedIface;\nnode.warn(IFACE + \":\" + address);\n\nfilename = \"/etc/network/interfaces.d/interface-\" + IFACE;\nfiledata = \n    \"# File auto-generated by node-red BabelGate Agent\\n\" +\n    \"# Last modification: \" + new Date() + \"\\n\\n\" +\n    \"auto \" + IFACE + \"\\n\" +\n    \"allow-hotplug \" + IFACE + \"\\n\" +\n    \"iface \" + IFACE + \" inet static\\n\" +\n    \"    pre-up /sbin/ip addr flush dev \" + IFACE + \"\\n\";\nif (address)\n    filedata += \"    address \" + address + \"\\n\";\nif (netmask)\n    filedata += \"    netmask \" + netmask + \"\\n\";\nif (gateway) filedata +=\n    \"    gateway \" + gateway + \"\\n\";\nif (dns) filedata +=\n    \"    dns-nameservers \" + dns + \"\\n\";\n//  \"    dns-domain telnet-ri.es\\n\";\n//  \"    metric \" + metric \"\\n\";\n    filedata += \"\\n\";\n\nfs = global.get(\"fs\");\nfs.writeFileSync(filename, filedata);\n\nmsg.filename = filename;\nmsg.filedata = filedata;\nmsg.payload = \"Changes Applied\";\n\ncp = global.get(\"child_process\");\ncp.execSync(\"ifmetric \" + IFACE + \" \" + metric, { encoding : \"ascii\" })\n\nif (!bbgtAgtCfg.network)\n    bbgtAgtCfg.network = {};\nif (!bbgtAgtCfg.network[selectedIface])\n    bbgtAgtCfg.network[selectedIface] = {};\n;\nbbgtAgtCfg.network[selectedIface] = RED.util.cloneMessage(selectedData);\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "9ee51c19.29a9b",
                "e779c5ac.344598"
            ]
        ]
    },
    {
        "id": "48f63ef6.020c5",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "NET: IF List INIT (5s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "init",
        "payload": "enp2s0",
        "payloadType": "str",
        "x": 240,
        "y": 220,
        "wires": [
            [
                "da772cf6.5186a"
            ]
        ]
    },
    {
        "id": "da772cf6.5186a",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "IP: Parse",
        "func": "null_return = [ null, null, null, null, null, null, null ];\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtInfo)\n    return null_return;\n\nif (!bbgtAgtCfg.network)\n    bbgtAgtCfg.network = {};\n\nif ( (msg.tab) || (msg.payload == \"connect\") ||\n    (msg.payload == \"change\") || (msg.payload == \"lost\") ) {\n    /* Detectamos que entramos en este TAB */\n    if ( (msg.tab == 1) && (msg.payload == \"change\") ) {\n        msg.topic   = \"init\";\n        msg.payload = flow.get('mgmtIpSelectedIface') || \"enp2s0\";\n    }\n    else\n        return null;\n}\n\nfs = global.get('fs');\nvar ether_list = bbgtAgtInfo.etherList || { ETH1 : \"enp2s0\", ETH2 : \"enp3s0\" };\nvar IFACES_PATH = \"/etc/network/interfaces.d/\";\n\nif (!msg.payload) {\n    globalFuns.tlnt_log(1, \"NetworkMgmt\", \"Selected IF is null\");\n    return null_return;\n}\n\nvar selectedIface = flow.get('mgmtIpSelectedIface');\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"Selected IF: \" + msg.payload + \" (old:\" + selectedIface + \")\");\n\nif (msg.payload != selectedIface) {\n    mgmtIpSelectedData = bbgtAgtCfg.network[msg.payload];\n    flow.set(\"mgmtIpSelectedData\", mgmtIpSelectedData);\n}\nselectedIface = msg.payload;\n\nif (msg.topic == \"init\") {\n    var option_list = { options : [], payload : Object.values(ether_list)[0] };\n    for (var ifname in ether_list) {\n        obj = {}; //new Object();\n        obj[ifname] = ether_list[ifname];\n        option_list.options.push(obj);\n    }\n}\nelse\n    option_list = null;\n\nflow.set('mgmtIpSelectedIface', selectedIface);\n\nmac = globalFuns.get_mac_address(selectedIface);\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"IP Parse: IFNAME: \" + selectedIface + \" MAC: \" + mac);\nglobalFuns.update_bbgtAgtInfo_mac_address(selectedIface, mac);\n\nif (!bbgtAgtCfg.network[selectedIface])\n    bbgtAgtCfg.network[selectedIface] = {};\n\naddress = { payload : bbgtAgtCfg.network[selectedIface].address || \"\" };\nmac     = { payload : bbgtAgtInfo.macAddressList[selectedIface] || \"\" };\nnetmask = { payload : bbgtAgtCfg.network[selectedIface].netmask || \"\" };\ngateway = { payload : bbgtAgtCfg.network[selectedIface].gateway || \"\" };\ndns     = { payload : bbgtAgtCfg.network[selectedIface].dns || \"\" };\nmetric  = { payload : bbgtAgtCfg.network[selectedIface].metric || \"\" };\n\nreturn_data = [ option_list, address, mac, netmask, gateway, dns, metric ];\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"Selected IF Data: \" + JSON.stringify(return_data));\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"option_list: \" + JSON.stringify(option_list));\nreturn return_data;\n\n//return [ option_list, null, null, null, null, null, null ];\n",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "b83ced4a.3a6e6",
                "1750886c.f50a58"
            ],
            [
                "ed793663.596738"
            ],
            [
                "211b390f.5642a6"
            ],
            [
                "40ad9e2c.90319"
            ],
            [
                "9d11fe61.ecefa"
            ],
            [
                "a4d272f3.38261"
            ],
            [
                "3ede1c13.f4cd74"
            ]
        ]
    },
    {
        "id": "9ee51c19.29a9b",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: IP Save",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "cca2891.a3a9f78",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "e994bc4a.a1e9f"
            ]
        ]
    },
    {
        "id": "f57462ce.c0ca4",
        "type": "comment",
        "z": "6d0c29a1.c03ff8",
        "name": "IP Configuration",
        "info": "",
        "x": 240,
        "y": 140,
        "wires": []
    },
    {
        "id": "a22430b7.91e7e",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "var selectedIface = flow.get('mgmtIpSelectedIface');\nmgmtIpSelectedData = flow.get('mgmtIpSelectedData') || {};\nmgmtIpSelectedData[msg.topic] = msg.payload;\nflow.set(\"mgmtIpSelectedData\", mgmtIpSelectedData);\n//flow.set(msg.topic + \"_\" + selectedIface, msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2adbd8fb.ec6628",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "Net MGMT Status Tick (2s) [1m]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1620,
        "wires": [
            [
                "b731fe7f.e5728"
            ]
        ]
    },
    {
        "id": "b731fe7f.e5728",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Net Status Build",
        "func": "cp = global.get(\"child_process\");\n\nfunction search_modem_mmcli()\n{\n    // '    /org/freedesktop/ModemManager1/Modem/2 [Quectel Incorporated] LTE Module\\n'\n    try {\n        result = cp.execSync(\"/snap/bin/mmcli -L\", { encoding : \"ascii\" });\n        str = result.split(\" \")[4];\n        fields = str.split(\"/\");\n        //node.warn(fields)\n        return fields[5];\n    }\n    catch(e) {\n        node.warn(\"search_modem_mmcli ERROR: \" + e);\n        return -1;\n    }\n}\nfunction get_modem_status_mmcli()\n{\n    mmcliModemIndex = context.get(\"mmcliModemIndex\");\n    if (!mmcliModemIndex) {\n        mmcliModemIndex = 0;\n        context.set(\"mmcliModemIndex\", mmcliModemIndex);\n    }\n    \n    //cmd = `mmcli -m ${mmcliModemIndex} --signal-get`;\n/*    result = cp.execSync(cmd, { encoding : \"ascii\" });\n    if (result.includes(\"couldn't find\")) {\n        \n    }\n    else if (result.includes(\"no extended\")) {\n        signal = null\n    }*/\n\n    //node.warn(\"mmcliModemIndex: \" + mmcliModemIndex);\n    try {\n        cmd = `/snap/bin/mmcli -m ${mmcliModemIndex} -K | grep \"modem.generic.signal-quality.value \"`;\n        result = cp.execSync(cmd, { encoding : \"ascii\" });\n        if (result.includes(\"couldn't find\")) {\n            mmcliModemIndex = search_modem_mmcli();\n            if (mmcliModemIndex >= 0)\n                context.set(\"mmcliModemIndex\", mmcliModemIndex);\n        }\n        signal = result.split(\": \")[1].trimRight();\n        \n        cmd = `/snap/bin/mmcli -m ${mmcliModemIndex} -K | grep \"modem.generic.state \"`;\n        result = cp.execSync(cmd, { encoding : \"ascii\" });\n        state = result.split(\": \")[1].trimRight();\n        cntError = context.get(\"cntError\") || 0;\n        //node.warn(state + \" cntError=\" + cntError)\n        if (state == \"registered\") {\n            status = \"SIM Inserted and Ready\";\n            cntError = 0;\n        }\n        else if (state == \"connected\") {\n            status = \"Connected\";\n            cntError = 0;\n        }\n        else if (state == \"connecting\") {\n            status = \"Connecting\";\n            cntError = 0;\n        }\n        else if (state == \"searching\") {\n            status = \"SIM inserterd. Searching Network\";\n            cntError = 0;\n        }\n        else if (state == \"failed\") {\n            cmd = `/snap/bin/mmcli -m ${mmcliModemIndex} -K | grep \"modem.generic.state-failed-reason \"`;\n            result = cp.execSync(cmd, { encoding : \"ascii\" });\n            status = result.split(\": \")[1].trimRight();\n            cntError++;\n        }\n        else {\n            cntError++;\n            status = \"Undefined Error\";\n        }\n        // Reset del modem\n        if (cntError > 20) {\n            cntError = 0;\n            node.warn(`WARNING!!! Reseting modem ${mmcliModemIndex}`);\n            result = cp.execSync(`/snap/bin/mmcli -m ${mmcliModemIndex} -r`);\n            node.warn(`RESET result: result`);\n        }\n        context.set(\"cntError\", cntError);\n\n    }\n    catch(e) {\n        mmcliModemIndex = search_modem_mmcli();\n        node.warn(\"get_modem_status_mmcli ERROR: \" + e + \". mmcliModemIndex=\" + mmcliModemIndex);\n        if (mmcliModemIndex >= 0)\n            context.set(\"mmcliModemIndex\", mmcliModemIndex);\n        signal = null;\n        status = null;\n    }\n    return { signal : signal, status : status };\n}\n\nfunction get_modem_status_pppd()\n{\n    // Aqui hay que cambiar el modo de lectura de potencia del modem\n    modemPowerCnt = context.get(\"modemPowerCnt\") || 0;\n    MODEM_REFRESH_PERIOD = 10;\n    if (++modemPowerCnt > MODEM_REFRESH_PERIOD) {\n        try {\n            //result = cp.execSync(\"grep -e 'CSQ:' /var/log/syslog | tail -n 1\", { encoding : \"ascii\" } ).trimRight();\n            result = cp.execSync(\"tail -n 35 /var/log/ppp-connect-errors | grep -e 'Initializing modem' -A 20\", { encoding : \"ascii\" } );\n            lines = result.split(\"\\n\");\n            \n            csqIdx = lines.indexOf(\"AT+CSQ\");\n            percent = 0;\n            if (csqIdx > 0) {\n                csqResult = lines[csqIdx + 1];\n                fields = csqResult.split(\"+CSQ: \");\n                if (fields.length == 2) {\n                    values = fields[1].split(\",\");\n                    rssi = values[0];\n                    ber  = values[1];\n                    if (rssi <= 31) {\n                        //percent = (rssi * 100 / 31).toFixed(2);\n                        percent = Math.round(rssi * 100 / 31);\n                    }\n                }\n            }\n    \n            cpinIdx = lines.indexOf(\"AT+CPIN?\");\n            status = \"Unknown\"\n            if (cpinIdx > 0) {\n                cpinResult = lines[cpinIdx + 1];\n                if (cpinResult == \"ERROR\")\n                    status = \"SIM not inserted\";\n                else if (cpinResult.includes(\"NOT INSERTED\"))\n                    status = \"SIM Not Inserted\";\n                else if (cpinResult.includes(\"READY\"))\n                    status = \"SIM Inserted and Ready\"\n                else {\n                    status = cpinResult.split(\": \")[1];\n                }\n            }\n            \n            //node.warn(result);\n            //node.warn(fields);\n            //node.warn(values);\n            //node.warn(percent);\n        }\n        catch(e) {\n            result = \"\";\n            percent = 0;\n            status  = \"Not connected\"; //[Unknown]\";\n            //node.warn(\"Net Status Build: Error CSQ: \" + e);\n        }\n        modemPowerCnt = 0;\n        retval = {\n            signal : percent,\n            status : status\n        };\n    }\n    else {\n        retval = {\n            signal : null,\n            status : null\n        };\n    }\n    \n    context.set(\"modemPowerCnt\", modemPowerCnt);\n    return retval;\n}\n\nos=global.get('os');\n\nnetIfs = os.networkInterfaces();\nif (netIfs === undefined) {\n    return [ null, null, null, null ];    \n}\n\nif (netIfs.enp2s0 === undefined)\n    msg1 = { payload : false };\nelse\n    msg1 = { payload : true };\n\nif (netIfs.enp3s0 === undefined)\n    msg2 = { payload : false };\nelse\n    msg2 = { payload : true };\n\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\n\nif (bbgtAgtCfg.modem.mmcli_mode) {\n    netIfList = Object.keys(netIfs);\n    if1 = netIfList.find(e => e.startsWith(\"ww\"))\n    if (if1)\n        modemIf = netIfs[if1];\n    else\n        modemIf = undefined;\n}\nelse {\n    modemIf = netIfs.ppp0;\n}\n\nif (modemIf === undefined) {\n    msg3 = { payload : false };\n    msg4 = { payload : \"disconnected\" };\n}\nelse {\n    msg3 = { payload : true };\n    msg4 = { payload : modemIf[0].address };\n}\n\nif (bbgtAgtCfg.modem.mmcli_mode)\n    retval = get_modem_status_mmcli();\nelse\n    retval = get_modem_status_pppd();\n\nmsg5 = retval.signal ? { payload : retval.signal } : null;\nmsg6 = retval.status ? { payload : retval.status } : null;\n\nreturn [ msg1, msg2, msg3, msg4, msg5, msg6 ];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1620,
        "wires": [
            [
                "ee23bbc7.274618"
            ],
            [
                "d1a699b2.281ff8"
            ],
            [
                "b4a41916.8da508"
            ],
            [
                "ead0cc6c.96606"
            ],
            [
                "49ed7556.4992ec"
            ],
            [
                "ce89a7f7.cf5958"
            ]
        ]
    },
    {
        "id": "782373cc.1a13ac",
        "type": "comment",
        "z": "6d0c29a1.c03ff8",
        "name": "Link Status",
        "info": "",
        "x": 220,
        "y": 1540,
        "wires": []
    },
    {
        "id": "64e6c558.83781c",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "IP Save Changes",
        "group": "34dc605d.803f1",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Save Changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "e994bc4a.a1e9f"
            ]
        ]
    },
    {
        "id": "b83ced4a.3a6e6",
        "type": "ui_dropdown",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Ethernet Interface",
        "tooltip": "",
        "place": "Select Interface",
        "group": "34dc605d.803f1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "da772cf6.5186a",
                "a71e2d2c.2ab4f"
            ]
        ]
    },
    {
        "id": "ed793663.596738",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "mgmtIpAddrInput",
        "label": "IP Address",
        "tooltip": "",
        "group": "34dc605d.803f1",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "500",
        "topic": "address",
        "x": 830,
        "y": 100,
        "wires": [
            [
                "a22430b7.91e7e"
            ]
        ]
    },
    {
        "id": "40ad9e2c.90319",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "mgmtNetmaskInput",
        "label": "Netmask",
        "tooltip": "",
        "group": "34dc605d.803f1",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "500",
        "topic": "netmask",
        "x": 830,
        "y": 180,
        "wires": [
            [
                "a22430b7.91e7e"
            ]
        ]
    },
    {
        "id": "9d11fe61.ecefa",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "mgmtGatewayInput",
        "label": "Gateway",
        "tooltip": "",
        "group": "34dc605d.803f1",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "500",
        "topic": "gateway",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "a22430b7.91e7e"
            ]
        ]
    },
    {
        "id": "a4d272f3.38261",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "mgmtDnsInput",
        "label": "DNS Servers",
        "tooltip": "",
        "group": "34dc605d.803f1",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "500",
        "topic": "dns",
        "x": 820,
        "y": 260,
        "wires": [
            [
                "a22430b7.91e7e"
            ]
        ]
    },
    {
        "id": "734f47e.e7934b8",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "34dc605d.803f1",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Label: Ethernet Link Status",
        "label": "",
        "format": "<H3>Ethernet Link Status</H3>",
        "layout": "row-left",
        "x": 1080,
        "y": 1580,
        "wires": []
    },
    {
        "id": "dba4cef0.a88e4",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "238dd158.f6e28e",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "Label: Modem Conn Status",
        "label": "",
        "format": "<H3>Modem Connection Status</H3>",
        "layout": "row-left",
        "x": 1080,
        "y": 1623,
        "wires": []
    },
    {
        "id": "ead0cc6c.96606",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "238dd158.f6e28e",
        "order": 16,
        "width": 0,
        "height": 0,
        "name": "Modem Address",
        "label": "Address",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 1640,
        "wires": []
    },
    {
        "id": "e779c5ac.344598",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "ee23bbc7.274618",
        "type": "ui_led",
        "z": "6d0c29a1.c03ff8",
        "order": 11,
        "group": "34dc605d.803f1",
        "width": 0,
        "height": 0,
        "label": "ETH1",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "LED enp2s0 (ETH1)",
        "x": 720,
        "y": 1520,
        "wires": []
    },
    {
        "id": "d1a699b2.281ff8",
        "type": "ui_led",
        "z": "6d0c29a1.c03ff8",
        "order": 12,
        "group": "34dc605d.803f1",
        "width": 0,
        "height": 0,
        "label": "ETH2",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "LED enp3s0 (ETH2)",
        "x": 720,
        "y": 1560,
        "wires": []
    },
    {
        "id": "b4a41916.8da508",
        "type": "ui_led",
        "z": "6d0c29a1.c03ff8",
        "order": 15,
        "group": "238dd158.f6e28e",
        "width": 0,
        "height": 0,
        "label": "Modem",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "LED ppp0 (Modem)",
        "x": 710,
        "y": 1600,
        "wires": []
    },
    {
        "id": "65ff7402.958c9c",
        "type": "comment",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS",
        "info": "",
        "x": 240,
        "y": 1703,
        "wires": []
    },
    {
        "id": "664b216e.b9fe7",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS User",
        "label": "User",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "user",
        "x": 700,
        "y": 1900,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "aca6f95e.78b4e8",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Change",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtCfg.dyndns)\n    return [ null, null ];\n\nif ( (msg.topic == \"daemon\") && (bbgtAgtCfg.dyndns.daemon == msg.payload) )\n    return [ null, null ];\n\nbbgtAgtCfg.dyndns[msg.topic] = msg.payload;\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\nmsgRefresh = { topic : \"refresh\" };\n\nreturn [ msgRefresh, msg ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1900,
        "wires": [
            [
                "fcefb878.7879a8"
            ],
            [
                "e95263b0.d6fe6"
            ]
        ]
    },
    {
        "id": "c824f005.ca75e",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Password",
        "label": "Password",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "password",
        "delay": "1000",
        "topic": "password",
        "x": 710,
        "y": 1940,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "a9f4cf9b.43f49",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Server",
        "label": "Server",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "server",
        "x": 700,
        "y": 1860,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "f33a65b.9e25c98",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Name",
        "label": "DNS Name",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "dnsName",
        "x": 700,
        "y": 1980,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "3941a147.02fdae",
        "type": "ui_dropdown",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Service",
        "label": "DynDNS Service",
        "tooltip": "DynDNS Service",
        "place": "Select option",
        "group": "3f039fe3.d6504",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "DynU",
                "value": "DynU",
                "type": "str"
            },
            {
                "label": "custom",
                "value": "Custom",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "service",
        "x": 710,
        "y": 1780,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "1c847362.371e8d",
        "type": "ui_dropdown",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Protocol",
        "label": "DynDNS Protocol",
        "tooltip": "DynDNS Protocol",
        "place": "Select option",
        "group": "3f039fe3.d6504",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "dyndns2",
                "value": "dyndns2",
                "type": "str"
            },
            {
                "label": "dyndns1",
                "value": "dyndns1",
                "type": "str"
            },
            {
                "label": "easydns",
                "value": "easydns",
                "type": "str"
            },
            {
                "label": "namecheap",
                "value": "namecheap",
                "type": "str"
            },
            {
                "label": "zoneedit1",
                "value": "zoneedit1",
                "type": "str"
            },
            {
                "label": "Changeip",
                "value": "Changeip",
                "type": "str"
            },
            {
                "label": "googledomains",
                "value": "googledomains",
                "type": "str"
            },
            {
                "label": "duckdns",
                "value": "duckdns",
                "type": "str"
            },
            {
                "label": "nsupdate",
                "value": "nsupdate",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "protocol",
        "x": 710,
        "y": 1820,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "af931ac1.cc72a8",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Extra",
        "label": "Extra data",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "extra",
        "x": 700,
        "y": 2020,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "6f467679.4d4ef8",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "filename": "/etc/ddclient.conf",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 1230,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "fcefb878.7879a8",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Cfg Read",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\n\nif (!bbgtAgtCfg.dyndns) {\n    bbgtAgtCfg.dyndns = {\n        service  : \"DynU\",\n        protocol : \"\",\n        server   : \"\",\n        user     : \"\",\n        password : \"\",\n        extra    : \"\",\n        daemon   : false,\n        dnsName  : \"\"\n    };\n}\n\nvar dyndns = bbgtAgtCfg.dyndns;\nif (!dyndns.service)\n    dyndns.service = \"DynU\";\n\nenableProto  = true;\nenableExtra  = true;\nenableServer = true;\nif (dyndns.service == \"DynU\") {\n    enableProto  = false;\n    enableExtra  = false;\n    enableServer = false;\n    dyndns.protocol = \"dyndns2\";\n    dyndns.server   = \"api.dynu.com\";\n    dyndns.extra    = \"use=web, web=checkip.dynu.com/, web-skip='IP Address'\";\n}\n\nvar msgService = {\n    payload : dyndns.service\n};\nvar msgProto = {\n    payload : dyndns.protocol,\n    enabled : enableProto\n};\nvar msgServer = {\n    payload : dyndns.server || \"\",\n    enabled : enableServer\n};\nvar msgUser = {\n    payload : dyndns.user || \"\"\n};\nvar msgPassword = {\n    payload : dyndns.password || \"\"\n};\nvar msgName = {\n    payload : dyndns.dnsName || \"\"\n};\nvar msgExtra = {\n    payload : dyndns.extra,\n    enabled : enableExtra\n};\nvar msgDaemon = {\n    payload : (dyndns.daemon != undefined) ? dyndns.daemon : false\n};\n\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"DynDNS Conf: \" + JSON.stringify(dyndns));\n\nreturn [ msgService, msgProto, msgServer, msgUser, msgPassword, \n        msgName, msgExtra, msgDaemon ];\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1860,
        "wires": [
            [
                "3941a147.02fdae"
            ],
            [
                "1c847362.371e8d"
            ],
            [
                "a9f4cf9b.43f49"
            ],
            [
                "664b216e.b9fe7"
            ],
            [
                "c824f005.ca75e"
            ],
            [
                "f33a65b.9e25c98"
            ],
            [
                "af931ac1.cc72a8"
            ],
            [
                "c7492103.2e461"
            ]
        ]
    },
    {
        "id": "834ff422.499798",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "NET: DynDNS INIT (3s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1860,
        "wires": [
            [
                "fcefb878.7879a8"
            ]
        ]
    },
    {
        "id": "c7492103.2e461",
        "type": "ui_switch",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Enable Service",
        "tooltip": "",
        "group": "3f039fe3.d6504",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "daemon",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 700,
        "y": 2060,
        "wires": [
            [
                "aca6f95e.78b4e8"
            ]
        ]
    },
    {
        "id": "5b6b5b49.a45594",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "group": "3f039fe3.d6504",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Restart DynDNS Client Service",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Restart DynDNS Client Service",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 2143,
        "wires": [
            [
                "5b65a933.b42b58"
            ]
        ]
    },
    {
        "id": "449b2bb2.2da4c4",
        "type": "exec",
        "z": "6d0c29a1.c03ff8",
        "command": "systemctl restart ddclient.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 2143,
        "wires": [
            [
                "fdd861c4.52654"
            ],
            [],
            []
        ]
    },
    {
        "id": "fdd861c4.52654",
        "type": "change",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Restarting DynDNS Client Service",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 2140,
        "wires": [
            [
                "3f3a610d.b3b55e"
            ]
        ]
    },
    {
        "id": "3f3a610d.b3b55e",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1420,
        "y": 2140,
        "wires": []
    },
    {
        "id": "5b65a933.b42b58",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 470,
        "y": 2143,
        "wires": [
            [
                "9e1e31f4.e579b"
            ]
        ]
    },
    {
        "id": "9e1e31f4.e579b",
        "type": "switch",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 2143,
        "wires": [
            [
                "449b2bb2.2da4c4"
            ]
        ]
    },
    {
        "id": "f198e869.d48b78",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "group": "3f039fe3.d6504",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop DynDNS Client Service",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Stop DynDNS Client Service",
        "payloadType": "str",
        "topic": "",
        "x": 220,
        "y": 2203,
        "wires": [
            [
                "eb067859.8d80b8"
            ]
        ]
    },
    {
        "id": "7192f23c.b6a5bc",
        "type": "exec",
        "z": "6d0c29a1.c03ff8",
        "command": "systemctl stop ddclient.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 2203,
        "wires": [
            [
                "244dd949.6ab826"
            ],
            [],
            []
        ]
    },
    {
        "id": "244dd949.6ab826",
        "type": "change",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Stopping DynDNS Client Service",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 2200,
        "wires": [
            [
                "3f3a610d.b3b55e"
            ]
        ]
    },
    {
        "id": "eb067859.8d80b8",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 2203,
        "wires": [
            [
                "6728ece0.4afa64"
            ]
        ]
    },
    {
        "id": "6728ece0.4afa64",
        "type": "switch",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 2203,
        "wires": [
            [
                "7192f23c.b6a5bc"
            ]
        ]
    },
    {
        "id": "10ab7f39.faafe1",
        "type": "comment",
        "z": "6d0c29a1.c03ff8",
        "name": "BabelGate",
        "info": "",
        "x": 180,
        "y": 2300,
        "wires": []
    },
    {
        "id": "f1a5330c.5b912",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "BabelGate UI Build",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtInfo)\n    return null;\n\nif (!bbgtAgtCfg.babelgate) {\n    bbgtAgtCfg.babelgate = {\n        /* NOTA: Si queremos especificar otro servidor distinto de babelgate.server, hay que hacerlo aqui \n         *       Esto sirve para hacer pruebas */\n        deploy_server : \"\",\n    };\n}\n\nvar babelgate = bbgtAgtCfg.babelgate;\n\nvar babelgateStatus = global.get('babelgateStatus');\nif (!babelgateStatus) {\n    babelgateStatus = {\n        tokens : {},\n        deploy_token : {},\n    }\n}\n\nvar iface = Object.keys(bbgtAgtInfo.macAddressList)[0];\nvar mac = (iface) ? bbgtAgtInfo.macAddressList[iface] : \"\";\n\nmsgForm = {\n    server   : babelgate.server || \"\",\n    domain   : babelgate.domain || \"\",\n    project  : babelgate.project || \"\",\n    name     : babelgate.name || \"\",\n    user     : babelgate.user || \"\",\n    password : babelgate.password || \"\"\n};\n\nuuid = babelgate.uuid || \"\";\nlen = uuid.length;\nvar msgUUID = {\n    payload : uuid.substr(0, len/2) + \"\\n\" + uuid.substr(len/2, len/2)\n};\nvar msgMAC = {\n    payload : mac || \"\"\n};\n\nbabelgateStatus.mac = mac;\n\nglobal.set('babelgateStatus', babelgateStatus);\n\nreturn [ msgForm, msgMAC, msgUUID ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 2400,
        "wires": [
            [
                "c7a738b3.193b78"
            ],
            [
                "2ff9c562.ae65ea"
            ],
            [
                "15c7931a.e06dbd"
            ]
        ]
    },
    {
        "id": "7082306.6e599d",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "babelgateStatus = global.get(\"babelgateStatus\");\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nbbgtAgtCfg.babelgate = msg.payload;\n\n/* Reiniciamos los tokens */\nbabelgateStatus.tokens = undefined;\nbabelgateStatus.deploy_token = undefined;\n\nglobal.set(\"babelgateStatus\", babelgateStatus);\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\nvar msg1 = {\n    payload: babelgate\n};\n\nreturn msg1;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 2360,
        "wires": [
            [
                "3f30a6eb.a1e7fa"
            ]
        ]
    },
    {
        "id": "e434c84c.5c6258",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "NET: BabelGate INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2400,
        "wires": [
            [
                "f1a5330c.5b912"
            ]
        ]
    },
    {
        "id": "cac35fca.ae79a",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "BBGT Check Conn Tick (30min)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 2740,
        "wires": [
            [
                "3b6f13a2.3d684c"
            ]
        ]
    },
    {
        "id": "32d17f8a.be4c6",
        "type": "ui_led",
        "z": "6d0c29a1.c03ff8",
        "order": 6,
        "group": "1aefa463.d7220c",
        "width": 0,
        "height": 0,
        "label": "BabelGate Connectivity",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "LED BabelGate Conn",
        "x": 1320,
        "y": 2740,
        "wires": []
    },
    {
        "id": "d9027242.47599",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "1aefa463.d7220c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Label: BabelGate Conn Status",
        "label": "",
        "format": "<H3>BabelGate Connection Status</H3>",
        "layout": "row-left",
        "x": 1350,
        "y": 2660,
        "wires": []
    },
    {
        "id": "3b6f13a2.3d684c",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "group": "1aefa463.d7220c",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Check BabelGate Connectivity",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 270,
        "y": 2700,
        "wires": [
            [
                "7994fb26.528a94",
                "9138ad45.a16d"
            ]
        ]
    },
    {
        "id": "c28c1dd.7f793e",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: BabelGate Check Status Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 2600,
        "wires": []
    },
    {
        "id": "3ede1c13.f4cd74",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "mgmtMetricInput",
        "label": "Interface Metric",
        "tooltip": "",
        "group": "34dc605d.803f1",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "500",
        "topic": "metric",
        "x": 830,
        "y": 300,
        "wires": [
            [
                "a22430b7.91e7e"
            ]
        ]
    },
    {
        "id": "a71e2d2c.2ab4f",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "IP: Select Eth Port",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "bfd8b84c.71b2b8",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "group": "1aefa463.d7220c",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Register in BabelGate",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 2880,
        "wires": [
            [
                "9966ff19.c1fda"
            ]
        ]
    },
    {
        "id": "743fe8da.7ea3f8",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Build Register",
        "func": "msg2 = {};\nbabelgateStatus = global.get(\"babelgateStatus\");\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nbabelgate = bbgtAgtCfg.babelgate;\nif (!babelgate || !babelgateStatus || !babelgateStatus.mac || !babelgateStatus.uuid) {\n    msg2.payload = \"ERROR registering. Invalid configuration.\";\n    return [ null, msg2 ];\n}\n\naddress = msg.address || babelgate.name || babelgateStatus.ipaddr;\n\nif ( (!babelgateStatus.uuid) ||\n     (!babelgate.server) ||\n     (!address) ||\n     (!babelgate.user) || (!babelgate.password) ) {\n    msg2.payload = \"ERROR registering. Check configuration.\";\n    return [ null, msg2 ];\n}\n\nnow = Math.floor(new Date().getTime() / 1000);\nmsg.babelgate_request = {\n    url     : \"/device/register\",\n    method  : \"POST\",\n    payload : {\n        uuid   : babelgateStatus.uuid,\n        mac    : babelgateStatus.mac,\n        ipaddr : address\n    },\n}\n\nmsg.rejectUnauthorized = false;\nmsg2.payload = \"Registering in BabelGate\";\n\nreturn [ msg, msg2 ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 2860,
        "wires": [
            [
                "eba336b8.d4ca58"
            ],
            [
                "63c9c2fa.71138c"
            ]
        ]
    },
    {
        "id": "b6d7a2fa.aa576",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "msg.topic = \"BabelGate Register\";\nerror_msg = msg.payload;\nif (msg.statusCode == 200)\n    msg.payload = \"OK\";\nelse {\n    if (error_msg.status !== undefined)   \n        msg.payload = \"ERROR:\\n\" + error_msg.status;\n    else\n        msg.payload = \"ERROR:\\n\" + error_msg;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 2860,
        "wires": [
            [
                "11e28460.21107c",
                "a621dfe0.b2b0f"
            ]
        ]
    },
    {
        "id": "2feb67da.d6add8",
        "type": "ui_led",
        "z": "6d0c29a1.c03ff8",
        "order": 7,
        "group": "1aefa463.d7220c",
        "width": 0,
        "height": 0,
        "label": "Registered in BabelGate",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "name": "LED BabelGate Registered",
        "x": 1340,
        "y": 2700,
        "wires": []
    },
    {
        "id": "15c7931a.e06dbd",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "1aefa463.d7220c",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "UUID: ",
        "format": "<H5>{{msg.payload}}</H5>",
        "layout": "row-left",
        "x": 710,
        "y": 2440,
        "wires": []
    },
    {
        "id": "fb703982.be3068",
        "type": "subflow:695d7520.c8484c",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "env": [],
        "x": 700,
        "y": 3080,
        "wires": [
            [
                "91f4c73f.612708"
            ],
            [
                "91f4c73f.612708"
            ]
        ]
    },
    {
        "id": "393fafaf.d7a4f",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Build UUID",
        "func": "PRODUCT_API_DEFAULT = 42;\nPRODUCT_VERSION_DEFAULT = \"12\";\nEXP_DATE=\"20991028\";\n\nglobalFuns = global.get(\"globalFuns\");\nbbgtAgtCfg      = global.get('bbgtAgtCfg', \"config\");\nbbgtAgtInfo     = global.get('bbgtAgtInfo', \"config\");\nproductInfo     = bbgtAgtInfo.productInfo;\nbabelgateStatus = global.get('babelgateStatus');\n\nfunction console_log(txt)\n{\n    globalFuns.tlnt_log(3, \"NetworkMgmt\", \"Build UUID: \" + txt)\n    //node.warn(txt);\n}\n\nfunction buildBaseUuid(mac)\n{\n    //Api \n    var api_padding = PRODUCT_API_DEFAULT;\n    console_log(api_padding)\n    //Model\n    var model_padding = productInfo.babelgate_code;\n    console_log(model_padding)\n    //Version\n    var version_padding = productInfo.version || PRODUCT_VERSION_DEFAULT;\n    console_log(version_padding)\n    //Mac\n    var mac_padding = mac.replace(/:/g, '')\n    console_log(mac_padding)\n    //Date OLD\n    var exp_date =  EXP_DATE\n    var mi_year = exp_date.substring(0, 4)\n    var mi_month = exp_date.substring(4, 6)\n    var mi_day = exp_date.substring(6, 8)\n    var day_bin = String(\"00000\" + parseInt(exp_date.substring(6, 8), 10).toString(2)).slice(-5)\n    var month_bin = String(\"0000\" + parseInt(exp_date.substring(4, 6), 10).toString(2)).slice(-4)\n    var year_bin = String(\"000000000000\" + parseInt(exp_date.substring(0, 4), 10).toString(2)).slice(-12)\n    var hexa_date = parseInt(day_bin+month_bin+year_bin, 2).toString(16).toUpperCase();\n    var hexa_date_padding = String(\"000000\" + hexa_date).slice(-6)\n    console_log(hexa_date_padding)\n    \n    //Name\n    var name_padding = \"\";\n    var id = productInfo.model.substr(0, 11);\n    for (var i=0; i<id.length; i++) {\n        hex = id.charCodeAt(i).toString(16);\n        name_padding+= (\"00\"+hex).slice(-2);\n    }\n    for (i=0; i<11-id.length; i++) name_padding += \"20\"\n    console_log(name_padding)\n    var full_id_before = api_padding + model_padding + version_padding + mac_padding + hexa_date_padding + name_padding;\n    console_log(\"full_id_before = \"+full_id_before)\n    \n    //generateGatewayIDFrom(0, full_id_before)\n    return full_id_before;\n}\n\n//msg.ipaddr = \"10.10.111.88\"   // Dato Fake para pruebas\nnow = Math.floor(new Date().getTime() / 1000);\nuuidBefore = buildBaseUuid(babelgateStatus.mac);\nmsg.babelgate_request = {\n    payload : {\n        payload: { \"timestamp\": now  }\n    },\n    headers : {\n        \"Content-Type\"  : \"application/json\",\n    },\n    url :  \"/ligilo/v1/create_kluzo_uuid/\" + uuidBefore,\n};\nmsg.payload = \"Creating UUID\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 3100,
        "wires": [
            [
                "fb703982.be3068",
                "96e3e446.0c0908",
                "e2f88e9b.8e02d"
            ]
        ]
    },
    {
        "id": "388521f6.5d28be",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2920,
        "wires": [
            [
                "9966ff19.c1fda"
            ]
        ]
    },
    {
        "id": "36086c70.2fbd54",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: BabelGate UUID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1160,
        "y": 3080,
        "wires": []
    },
    {
        "id": "91f4c73f.612708",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "globalFuns = global.get(\"globalFuns\");\n\nmsg2 = { };\nif (msg.statusCode != 200) {\n    msg2.payload = \"ERROR getting UUID\";\n    return [ null, msg2 ];\n}\n\nuuid = msg.payload.uuid.trimRight();\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"UUID Result: \" + uuid);\nbabelgateStatus = global.get('babelgateStatus');\nbabelgateStatus.uuid = uuid;\nif (msg.ipaddr)\n    babelgateStatus.ipaddr = msg.ipaddr;\nglobal.set('babelgateStatus', babelgateStatus);\n\nmsg.payload = uuid;\nmsg2.payload = \"UUID created successfully\";\n\nreturn [ msg, msg2 ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 3080,
        "wires": [
            [
                "36086c70.2fbd54",
                "e55e6426.c88c98"
            ],
            [
                "6363b799.aeff98",
                "36086c70.2fbd54"
            ]
        ]
    },
    {
        "id": "67fc2d80.99ade4",
        "type": "link in",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: UUID Get (IN)",
        "links": [],
        "x": 235,
        "y": 2960,
        "wires": [
            [
                "9966ff19.c1fda"
            ]
        ]
    },
    {
        "id": "e55e6426.c88c98",
        "type": "link out",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: UUID Get (OUT)",
        "links": [
            "3f7f977c.7bbfc8",
            "b754fb8b.148908"
        ],
        "x": 1035,
        "y": 3040,
        "wires": []
    },
    {
        "id": "3f7f977c.7bbfc8",
        "type": "link in",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Update UUID",
        "links": [
            "e55e6426.c88c98"
        ],
        "x": 395,
        "y": 2520,
        "wires": [
            [
                "46321e18.1b714"
            ]
        ]
    },
    {
        "id": "d40d161c.850398",
        "type": "subflow:2121f75f.935408",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "env": [],
        "x": 890,
        "y": 2660,
        "wires": [
            [
                "c28c1dd.7f793e"
            ],
            [
                "c28c1dd.7f793e",
                "47ef19d5.a55558"
            ]
        ]
    },
    {
        "id": "7994fb26.528a94",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "BBLGT Check Status Build",
        "func": "babelgateStatus = global.get('babelgateStatus');\nmsg.statusCode = 666;\nif (babelgateStatus === undefined)\n    return [ null, msg ];\n\nif (!babelgateStatus.uuid)\n    return [ null, msg ];\n\nmsg.babelgate_request = {\n    url     : \"/device/status\",\n    method  : \"POST\",\n    payload : {\n        uuid : babelgateStatus.uuid\n    }\n}\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2700,
        "wires": [
            [
                "d40d161c.850398"
            ],
            [
                "47ef19d5.a55558"
            ]
        ]
    },
    {
        "id": "47ef19d5.a55558",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "var connOk = false;\nif (msg.statusCode == 200)\n    connOk = true;\n\nvar regOk = false;\nif ( (msg.payload.registered !== undefined) && (msg.payload.registered == \"true\") )\n    regOk = true;\n\nmsgConn = { payload : connOk };\nmsgReg  = { payload : regOk };\n\nreturn [ msgReg, msgConn ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2700,
        "wires": [
            [
                "2feb67da.d6add8"
            ],
            []
        ]
    },
    {
        "id": "11e28460.21107c",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: BabelGate Reg  Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1260,
        "y": 2860,
        "wires": []
    },
    {
        "id": "a621dfe0.b2b0f",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 1230,
        "y": 2900,
        "wires": []
    },
    {
        "id": "eba336b8.d4ca58",
        "type": "subflow:2121f75f.935408",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "env": [],
        "x": 850,
        "y": 2860,
        "wires": [
            [
                "b6d7a2fa.aa576"
            ],
            [
                "b6d7a2fa.aa576"
            ]
        ]
    },
    {
        "id": "46321e18.1b714",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "len = msg.payload.length;\ns = msg.payload;\nmsg.payload = s.substr(0, len/2) + \"\\n\" + s.substr(len/2, len/2)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 2520,
        "wires": [
            [
                "15c7931a.e06dbd"
            ]
        ]
    },
    {
        "id": "9138ad45.a16d",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "LIGILO Check Status Build",
        "func": "msg.babelgate_request = {\n    force_login : true,\n    only_login  : true,\n    url     : \"/enchalma/v1/refresh\",\n    method  : \"POST\",\n    payload : { },\n    headers : {\n        \"Content-Type\"  : \"application/json\",\n    }\n}\n\nnode.warn(msg);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2740,
        "wires": [
            [
                "40a33e55.f0f48"
            ]
        ]
    },
    {
        "id": "40a33e55.f0f48",
        "type": "subflow:695d7520.c8484c",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "env": [],
        "x": 840,
        "y": 2740,
        "wires": [
            [
                "f491f64a.1f8908"
            ],
            [
                "f491f64a.1f8908"
            ]
        ]
    },
    {
        "id": "f491f64a.1f8908",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "//node.warn(msg);\nvar ret = (msg.statusCode == 200) ? true : false;\nmsg.payload = ret;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2740,
        "wires": [
            [
                "32d17f8a.be4c6"
            ]
        ]
    },
    {
        "id": "96e3e446.0c0908",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 710,
        "y": 3140,
        "wires": []
    },
    {
        "id": "211b390f.5642a6",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "34dc605d.803f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "mgmtMACAddress",
        "label": "MAC Address: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "6fac08fd.788758",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "IP Restart Service",
        "group": "34dc605d.803f1",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Restart Network Service",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "675f4c54.695674"
            ]
        ]
    },
    {
        "id": "675f4c54.695674",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "IP: Restart Service",
        "func": "msg.payload = \"Restarting Network Service\";\n\ncp = global.get(\"child_process\");\ncp.execSync(\"systemctl restart networking.service\", \n    { encoding : \"ascii\" });\n\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtCfg.network)\n    return msg;\n\nfor (var ifname in bbgtAgtCfg.network) {\n    iface = bbgtAgtCfg.network[ifname];\n    if (iface.metric) {\n        cp.execSync(\"ifmetric \" + ifname + \" \" + iface.metric,\n                { encoding : \"ascii\" });\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 460,
        "wires": [
            [
                "e779c5ac.344598",
                "eac1d9c4.7a7038"
            ]
        ]
    },
    {
        "id": "eac1d9c4.7a7038",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Net Restart",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "1864732c.dcdc1d",
        "type": "exec",
        "z": "6d0c29a1.c03ff8",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1190,
        "y": 2000,
        "wires": [
            [
                "d0e50a44.b0cee8"
            ],
            [
                "d0e50a44.b0cee8"
            ],
            [
                "c8e09e74.5af6b"
            ]
        ]
    },
    {
        "id": "d0e50a44.b0cee8",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: DynDNS Exec",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1420,
        "y": 2000,
        "wires": []
    },
    {
        "id": "42730316.a1c90c",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1060,
        "wires": [
            [
                "56ee530.ebdb5ac"
            ]
        ]
    },
    {
        "id": "56ee530.ebdb5ac",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Params Build",
        "func": "globalFuns = global.get(\"globalFuns\");\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\n\nnow = new Date();\n\ncp = global.get(\"child_process\");\n\nmsg.oldConf = {};\nObject.assign(msg.oldConf, bbgtAgtCfg.modem);\nif (msg.topic == \"config/apply\") {\n    modemConf = {};\n    Object.assign(modemConf, bbgtAgtCfg.modem);\n}\nelse\n    modemConf = flow.get(\"modemConf\", \"memoryOnly\");\n\nif (msg.oldConf.mmcli_mode != modemConf.mmcli_mode)\n    cp.execSync(\"systemctl stop snap.modem-manager.modemmanager.service snap.network-manager.networkmanager.service\");\n\nif (modemConf.mmcli_mode) {\n    msg.modemConf = modemConf;\n    node.send([null, null, null, null, null, null, null, null, msg]);\n    bbgtAgtCfg.modem = {};\n    Object.assign(bbgtAgtCfg.modem, modemConf);\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\n    modemConf = {\n        internal_port : \"/dev/null\",\n        sms_support   : false,\n        sms_port      : \"\",\n        auto_connect  : false,\n        mmcli_mode    : true\n    };\n}\napn      = modemConf.APN;\nuser     = modemConf.user || \"empty\";\npassword = modemConf.password || \"empty\";\nmetric   = modemConf.metric;\nspeed    = modemConf.baudspeed;\nauto_connect = modemConf.auto_connect;\nmodel    = modemConf.modem_model || \"default\";\n\nIFACE  = \"tlnt-modem\";\nPEER   = \"tlnt-modem-xbee-nr\";\nDIALER = \"tlnt-modem-xbee\"\nSERIAL = modemConf.internal_port || modemConf.custom_port || \"/dev/modem-xbee\";\nSPEED  = speed; // \"115200\";\n//PIN    = \"6107\";\n//#Init3 = AT+CGDCONT=1,'IP','sm2ms.movistar.es'\\n\" +\n\nvar wvdial_conf = \n    \"[Dialer \" + DIALER + \"]\\n\" +\n    \"Init1 = AT\\n\" +\n    \"Init2 = ATZ\\n\" +\n    //\"Init3 = AT+CPIN=\" + PIN + \"\\n\" +\n    \"Init3 = AT+CSQ\\n\" +\n    \"Init4 = AT+CPIN?\\n\" +\n    \"Init5 = AT+CREG?\\n\" +\n    \"Init6 = AT+CGDCONT=1,\\\"IP\\\",\\\"\" + apn + \"\\\"\\n\" +\n    \"Idle Seconds = 1\\n\" +\n    \"Stupid mode = on\\n\" +\n    \"Phone = *99***1#\\n\" +\n    \"ISDN = 0\\n\" +\n    \"Username = \" + user + \"\\n\" +\n    \"Password = \" + password + \"\\n\" +\n    \"New PPPD = yes\\n\" +\n    \"Login = \" + user + \"\\n\" +\n    \"Modem = \" + SERIAL + \"\\n\" +\n    \"Baud = \" + SPEED + \"\\n\";\n\nvar peer_conf =\n    \"# Autogenerated by node-red BG IoT Agent\\n# \" + now + \"\\n\" +\n    \"name \" + user + \"\\n\" +\n    SERIAL + \"\\n\" +\n    SPEED + \"\\n\" +\n    \"init \\\"/usr/local/bin/init_modem.sh\\\"\\n\" +\n    \"connect \\\"/usr/bin/wvdial --chat \" + DIALER + \"\\\"\\n\" +\n    //\"connect \\\"/usr/local/lib/tlnt/modem/modem-connect-script.sh \" + DIALER + \"\\\"\\n\" +\n    \"local\\n\" +\n    \"nocrtscts\\n\" +\n    \"usepeerdns\\n\" +\n    \"noauth\\n\" +\n    \"defaultroute\\n\" +\n    \"replacedefaultroute\\n\" +\n    \"debug\\n\" +\n    \"noipdefault\\n\" +\n    \"persist\\n\" +\n    \"maxfail 0\\n\" +\n    \"idle 3600\\n\" +\n    \"#noipx\\n\" +\n    \"#noccp\\n\" +\n    \"#novj\\n\" +\n    \"#nobsdcomp\\n\" +\n    \"#nodetach\\n\";\n\n//var conf = apn + \",\" + user + \",\" + password;\n\nvar interfacePppConf = \"# Auto-generated by node-red BG IoT Agent\\n\";\ninterfacePppConf += \"# \" + now + \"\\n\";\nif (auto_connect)\n    interfacePppConf += \"auto \" + IFACE + \"\\n\"\ninterfacePppConf +=\n    \"iface \" + IFACE + \" inet ppp\\n\" +\n    \"    provider \" + PEER + \"\\n\" +\n    \"    unit 0\\n\";\n    //+ \"    pre-up /usr/local/bin/init_modem.sh \" + model + \"\\n\";\n\nnow = new Date();\nvar fileModemConf = \"# Auto-generated by node-red BG IoT Agent\\n\";\nfileModemConf += \"# \" + now + \"\\n\";\nfileModemConf += \"MODEM_TYPE=\" + model + \"\\n\";\n\nif (modemConf.reconfigure_modem) {\n    modemExtraConfScript = \"#! /bin/sh\\n\" +\n        \"sleep 1\\n\" +\n        //\"/usr/local/bin/tlnt/modem-chg-speed.sh 9600 \" +  SPEED + \" \" + SERIAL + \"\\n\";\n        \"/usr/local/bin/tlnt/modem-chg-speed.sh 9600 \" +  SPEED + \"\\n\";\n    fileModemConf += \"MODEM_SPEED_INIT=9600\\n\";\n    fileModemConf += \"MODEM_SPEED_FINAL=\" + SPEED + \"\\n\";\n}\nelse {\n    modemExtraConfScript = \"#! /bin/sh\\n\";\n}\n\nfileSmsdConf = \"# Auto-generated by node-red BG IoT Agent\\n\" +\n        \"# \" + now + \"\\n\" +\n        \"outgoing = /var/spool/sms/outgoing\\n\" +\n        \"checked = /var/spool/sms/checked\\n\" +\n        \"incoming = /var/spool/sms/incoming\\n\" +\n        \"logfile = /var/log/smstools/smsd.log\\n\" +\n        \"infofile = /var/run/smstools/smsd.working\\n\" +\n        \"pidfile = /var/run/smstools/smsd.pid\\n\" +\n        \"outgoing = /var/spool/sms/outgoing\\n\" +\n        \"checked = /var/spool/sms/checked\\n\" +\n        \"failed = /var/spool/sms/failed\\n\" +\n        \"incoming = /var/spool/sms/incoming\\n\" +\n        \"sent = /var/spool/sms/sent\\n\" +\n        \"stats = /var/log/smstools/smsd_stats\\n\" +\n        \"loglevel = 7\\n\\n\" +\n        \"receive_before_send = no\\n\" +\n        \"autosplit = 3\\n\\n\";\nfileSmsdConf += \"devices = \" + (modemConf.sms_support ? \"tlnt-xbee\\n\\n\" : \"\\n\\n\");\nfileSmsdConf += \"[tlnt-xbee]\\n\" +\n    \"device = \" + modemConf.sms_port + \"\\n\" +\n    \"incoming = yes\\n\" +\n    \"baudrate = 115200\\n\\n\";\n\nmsg1 = { payload : wvdial_conf };\nmsg2 = { payload : \"Changes Applied\" };\nmsg3 = { payload : modemConf };\nmsg4 = { payload : interfacePppConf };\nmsg5 = { payload : modemExtraConfScript };\nmsg6 = { payload : peer_conf };\nmsg7 = { payload : fileModemConf };\nmsg8 = { payload : fileSmsdConf };\n\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"Modem Save: \" + JSON.stringify(modemConf));\nif ( (msg.topic != \"config/apply\") && (!modemConf.mmcli_mode) ) {\n    bbgtAgtCfg.modem = modemConf;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n}\n\nreturn [ msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, null ];\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1020,
        "wires": [
            [
                "ef31cf50.68e3f"
            ],
            [
                "58e32c7b.ad8164"
            ],
            [
                "338293b4.88171c"
            ],
            [
                "1006a063.e730f"
            ],
            [
                "a27f37a4.5508d8"
            ],
            [
                "341726b2.e6d44a"
            ],
            [
                "2c29d50a.403c5a"
            ],
            [
                "20927423.24eadc"
            ],
            [
                "94bab38c.f3742",
                "86493eb7.b75a3"
            ]
        ]
    },
    {
        "id": "ef31cf50.68e3f",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: wvdial.conf",
        "filename": "/etc/wvdial.conf",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 760,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "338293b4.88171c",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: modem-conf.json",
        "filename": "/etc/config/tlnt/modem-conf.json",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "993581b8.63bac",
        "type": "comment",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Configuration",
        "info": "",
        "x": 220,
        "y": 640,
        "wires": []
    },
    {
        "id": "eff4b20f.20254",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Cfg Read",
        "func": "if ( (msg.topic != \"init\") && (msg.topic != \"refresh\") && (msg.topic != \"config/apply\") )\n    return null;\n\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\n\nif (!bbgtAgtCfg.modem)\n    bbgtAgtCfg.modem = {};\n\nif (msg.topic == \"config/apply\")\n    var modemConf = undefined;\nelse\n    var modemConf = flow.get(\"modemConf\", \"memoryOnly\");\nif (!modemConf) {\n    modemConf = RED.util.cloneMessage(bbgtAgtCfg.modem);\n    if (!modemConf) {\n        modemConf = {\n            modem_model   : \"other\",\n            modem_type    : \"xbee-rs232\",\n            custom_port   : \"\",\n            internal_port : \"/dev/modem-xbee\",\n            APN      : \"\",\n            user     : \"\",\n            password : \"\",\n            baudspeed : \"115200\",\n            metric   : 0,\n            auto_connect : false,\n            reconfigure_modem : true\n        };\n    }\n    flow.set(\"modemConf\", modemConf, \"memoryOnly\");\n}\n\nmodem_model = modemConf.modem_model || \"other\";\nmodem_type  = modemConf.modem_type || \"xbee-rs232\";\nenableOther      = (modem_model == \"other\");\nenableCustomPort = (enableOther) && (modem_type == \"custom\");\nif (modemConf.reconfigure_modem === undefined)\n    reconfigure_modem = true;\nelse\n    reconfigure_modem = modemConf.reconfigure_modem\n\nmsg1  = { payload : modem_model };\nmsg2  = { payload : modem_type, enabled : enableOther };\nmsg3  = { payload : modemConf.custom_port, enabled : enableCustomPort };\nmsg4  = { payload : modemConf.APN };\nmsg5  = { payload : modemConf.user };\nmsg6  = { payload : modemConf.password };\nmsg7  = { payload : modemConf.metric || 1 };\nmsg8  = { payload : modemConf.baudspeed, enabled : enableOther };\nmsg9  = { payload : modemConf.auto_connect || false };\nmsg10 = { payload : reconfigure_modem, enabled : enableOther };\n\nglobalFuns.tlnt_log(3, \"NetworkMgmt\", \"Modem Conf: \" + JSON.stringify(modemConf));\n\nreturn [ msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10 ];\n",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 700,
        "wires": [
            [
                "a3bbf144.1523f"
            ],
            [
                "3cd4f45f.09c44c"
            ],
            [
                "e251dd17.3d3ac"
            ],
            [
                "569691bb.e1e9f"
            ],
            [
                "8bc128db.a957f8"
            ],
            [
                "eea10467.ff0608"
            ],
            [
                "7815fd9d.370764"
            ],
            [
                "cf65520d.3c45d"
            ],
            [
                "1c03edc2.2ff722"
            ],
            [
                "71b319e0.df0d08"
            ]
        ]
    },
    {
        "id": "3bc7d29a.d1ed1e",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "NET: Modem INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "eff4b20f.20254"
            ]
        ]
    },
    {
        "id": "b0cd46ca.4bcb48",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "MODEM Save Changes",
        "group": "238dd158.f6e28e",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Save Changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "56ee530.ebdb5ac"
            ]
        ]
    },
    {
        "id": "569691bb.e1e9f",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "APN",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "APN",
        "x": 810,
        "y": 620,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "8bc128db.a957f8",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "User",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "user",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "eea10467.ff0608",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "password",
        "x": 820,
        "y": 700,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "58e32c7b.ad8164",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 760,
        "y": 980,
        "wires": []
    },
    {
        "id": "7815fd9d.370764",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Metric",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "metric",
        "x": 810,
        "y": 740,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "1c5ca27a.386b4e",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Change",
        "func": "modemConf = flow.get(\"modemConf\", \"memoryOnly\") || {};\nif (!modemConf)\n    return null;\nif (modemConf === undefined) {\n    modemConf = {\n        modem_model   : \"other\",\n        modem_type    : \"xbee-rs232\",\n        custom_port   : \"\",\n        internal_port : \"/dev/modem-xbee\",\n        APN      : \"\",\n        user     : \"\",\n        password : \"\",\n        baudspeed : \"115200\",\n        metric   : 0,\n        auto_connect : false,\n        reconfigure_modem : true\n    };\n}\n\nmodemConf[msg.topic] = msg.payload;\nif (msg.topic == \"modem_model\") {\n    if (modemConf.modem_model == \"gprsbee\") {\n        modemConf.modem_type        = \"xbee-rs232\";\n        modemConf.mmcli_mode        = false;\n        modemConf.custom_port       = \"\";\n        modemConf.internal_port     = \"/dev/ttyS5\";\n        modemConf.baudspeed         = 460800;\n        modemConf.reconfigure_modem = true;\n        modemConf.sms_support       = false;\n        modemConf.sms_port          = \"\";\n    }\n    else if (modemConf.modem_model == \"ryh2018\") {\n        modemConf.modem_type        = \"xbee-usb\";\n        modemConf.mmcli_mode        = true;\n        modemConf.custom_port       = \"\";\n        modemConf.internal_port     = \"/dev/ttyACM2\";\n        modemConf.baudspeed         = 2000000;\n        modemConf.reconfigure_modem = false;\n        modemConf.sms_support       = true;\n        modemConf.sms_port          = \"/dev/ttyACM3\";\n    }\n    else if (modemConf.modem_model == \"digi_3g\") {\n        modemConf.modem_type        = \"xbee-rs232\";\n        modemConf.mmcli_mode        = false;\n        modemConf.custom_port       = \"\";\n        modemConf.internal_port     = \"/dev/ttyS5\";\n        modemConf.baudspeed         = 460800;\n        modemConf.reconfigure_modem = false;\n        modemConf.sms_support       = false;\n        modemConf.sms_port          = \"\";\n    }\n    else if (modemConf.modem_model == \"quectel_em05\") {\n        modemConf.modem_type        = \"xbee-usb\";\n        modemConf.mmcli_mode        = true;\n        modemConf.custom_port       = \"\";\n        modemConf.internal_port     = \"/dev/ttyUSB2\";\n        modemConf.baudspeed         = 2000000;\n        modemConf.reconfigure_modem = false;\n        modemConf.sms_support       = true;\n        modemConf.sms_port          = \"/dev/ttyUSB3\";\n    }\n    else {\n        modemConf.internal_port     = \"\";\n        modemConf.mmcli_mode        = true;\n        modemConf.sms_support       = false;\n        modemConf.sms_port          = \"\";\n    }\n}\nflow.set(\"modemConf\", modemConf, \"memoryOnly\");\n\nmsg.modemConf = modemConf;\n\nif ( (msg.topic == \"modem_model\") || (msg.topic == \"modem_type\") )\n    msg.topic = \"refresh\";\nelse\n    msg.topic = \"stop\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 700,
        "wires": [
            [
                "cddde553.5b3338",
                "11a2a974.ee9e27"
            ]
        ]
    },
    {
        "id": "cddde553.5b3338",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: Modem Config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1160,
        "y": 760,
        "wires": []
    },
    {
        "id": "1006a063.e730f",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: interface-ppp",
        "filename": "/etc/network/interfaces.d/interface-ppp",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 770,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "1c03edc2.2ff722",
        "type": "ui_switch",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Automatic connection",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "auto_connect",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 860,
        "y": 820,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "e04ef9d8.b715f8",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "MODEM Stop",
        "group": "238dd158.f6e28e",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop modem connection",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "ifdown tlnt-modem",
        "payloadType": "str",
        "topic": "stop",
        "x": 1080,
        "y": 1060,
        "wires": [
            [
                "6001ec94.3e56b4"
            ]
        ]
    },
    {
        "id": "75017b13.2320a4",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "MODEM Start",
        "group": "238dd158.f6e28e",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start modem connection",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "ifup tlnt-modem",
        "payloadType": "str",
        "topic": "start",
        "x": 1080,
        "y": 1100,
        "wires": [
            [
                "6001ec94.3e56b4"
            ]
        ]
    },
    {
        "id": "bce19853.9fbea8",
        "type": "exec",
        "z": "6d0c29a1.c03ff8",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1270,
        "y": 1120,
        "wires": [
            [],
            [],
            [
                "d32e3f1d.20f15"
            ]
        ]
    },
    {
        "id": "cf65520d.3c45d",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Modem Baudspeed",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "baudspeed",
        "x": 850,
        "y": 780,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "a27f37a4.5508d8",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: modem-extraconf.sh",
        "filename": "/etc/config/tlnt/modem-extraconf.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 790,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "341726b2.e6d44a",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: peer conf",
        "filename": "/etc/ppp/peers/tlnt-modem-xbee-nr",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 760,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2b34857b.8e8a1a",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "group": "1aefa463.d7220c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh UUID",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 180,
        "y": 3100,
        "wires": [
            [
                "393fafaf.d7a4f"
            ]
        ]
    },
    {
        "id": "63c9c2fa.71138c",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 830,
        "y": 2900,
        "wires": []
    },
    {
        "id": "cc231309.f0bec",
        "type": "inject",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 3140,
        "wires": [
            [
                "393fafaf.d7a4f"
            ]
        ]
    },
    {
        "id": "6363b799.aeff98",
        "type": "ui_toast",
        "z": "6d0c29a1.c03ff8",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 1110,
        "y": 3120,
        "wires": []
    },
    {
        "id": "e2f88e9b.8e02d",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: BabelGate UUID Request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 750,
        "y": 3040,
        "wires": []
    },
    {
        "id": "71b319e0.df0d08",
        "type": "ui_switch",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Reconfigure Modem",
        "tooltip": "",
        "group": "238dd158.f6e28e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "reconfigure_modem",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 860,
        "y": 860,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "2ff9c562.ae65ea",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "1aefa463.d7220c",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "MAC: ",
        "format": "<H5>{{msg.payload}}</H5>",
        "layout": "row-left",
        "x": 710,
        "y": 2400,
        "wires": []
    },
    {
        "id": "9966ff19.c1fda",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Get BG Address",
        "func": "bbgtAgtCfg = global.get('bbgtAgtCfg', \"config\");\nbabelGateStatus = global.get(\"babelgateStatus\");\nbabelgate = bbgtAgtCfg.babelgate;\nif (!babelgate || !babelGateStatus)\n    return null;\n\n/* Si existe la direccion en el objeto 'babelgate', usamos ese, \n * si no, obtenemos la IP local del interfaz que se conecta a BG */\nif (babelgate.name) {\n    msg.ipaddr  = \"\";\n    msg.name = babelgate.name;\n    return [ msg, null ];\n}\n\nfs = global.get('fs');\n\n/** Extraer el host del URL */\nfunction get_host_from_url(url)\n{\n    host_port = \"\";\n    f = url.split(\"/\");\n    if (f.length == 1)\n        host_port = f[0];\n    else if (f.length >= 3)\n        host_port = f[2];\n    else\n        return \"\"\n    \n    f = host_port.split(\":\");\n    return f[0]\n}\n\n/** Resolver la direccion IP del Host destino */\nfunction resolve_ip_address(destination_host)\n{\n    cp = global.get('child_process');\n    cmd = \"nslookup \" + destination_host;\n    try {\n        result = cp.execSync(cmd, { \"encoding\" : \"ascii\" });\n    }\n    catch (e) {\n        node.warn(\"resolve_ip_address ERROR (\" + e + \"): \" + cmd)\n        return \"\"\n    }\n    lines = result.split(\"\\n\");\n    fields = lines[4].split(\":\");\n    if (fields[0] == \"Address\")\n        return fields[1].trim()\n    fields = lines[5].split(\":\");\n    if (fields[0] == \"Address\")\n        return fields[1].trim()\n    \n    node.warn(\"resolve_ip_address ERROR (\" + lines + \")\")\n    return \"\"\n}\n\n/** Obtener mi direccion IP del interfaz que llega a una direccion destino */\nfunction get_my_ip_address_to_host(destination_ip)\n{\n    cp = global.get('child_process');\n    cmd = \"ip ro get \" + destination_ip;\n    try {\n        result = cp.execSync(cmd, { \"encoding\" : \"ascii\" });\n    }\n    catch (e) {\n        node.warn(\"get_my_ip_address_to_host ERROR (\" + e + \"): \" + cmd)\n        return \"\";\n    }\n    fields = result.split(\" \");\n    idx = fields.indexOf(\"src\");\n    if (idx >= 0)\n        return fields[idx + 1];\n    return \"\"\n}\n\n/** Obtener el nombre del servidor BabelGate */\nserver = babelgate.deploy_server || babelgate.server;\nserver_name = get_host_from_url(server);\n\n/** Obtener la IP propia del interfaz por el que se llega a BabelGate */\nmsg.ipaddr = get_my_ip_address_to_host(server_name);\nif (msg.ipaddr === \"\") {\n    server_ip  = resolve_ip_address(server_name)\n    if (server_ip === \"\") {\n        msg.payload = \"ERROR: Unresolved IP\";\n        return [ null, msg ];\n    }\n    \n    msg.ipaddr = get_my_ip_address_to_host(server_ip);\n    if (msg.ipaddr === \"\") {\n        msg.payload = \"ERROR: No route to server\";\n        return [ null, msg ];\n    }\n}\nbabelgateStatus.ipaddr = msg.ipaddr;\nglobal.set('babelgateStatus', babelgateStatus);\nmsg.address = msg.ipaddr;\n\nreturn [ msg, null ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2880,
        "wires": [
            [
                "743fe8da.7ea3f8"
            ],
            [
                "63c9c2fa.71138c"
            ]
        ]
    },
    {
        "id": "5e513c1e.2506d4",
        "type": "link in",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Check Conn (IN)",
        "links": [
            "3f30a6eb.a1e7fa"
        ],
        "x": 75,
        "y": 2700,
        "wires": [
            [
                "3b6f13a2.3d684c"
            ]
        ]
    },
    {
        "id": "3f30a6eb.a1e7fa",
        "type": "link out",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Check Conn (OUT)",
        "links": [
            "5e513c1e.2506d4"
        ],
        "x": 1115,
        "y": 2360,
        "wires": []
    },
    {
        "id": "bec29f89.06535",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "49b4254c.5474ec",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "name",
        "x": 990,
        "y": 960,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "828aa5cd.4c5a88",
        "type": "ui_dropdown",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Type",
        "tooltip": "",
        "place": "Select option",
        "group": "49b4254c.5474ec",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "MODBUS RTU",
                "value": "modbus-rtu",
                "type": "str"
            },
            {
                "label": "Digital IN",
                "value": "digital-in",
                "type": "str"
            },
            {
                "label": "ADC",
                "value": "adc",
                "type": "str"
            },
            {
                "label": "Pulse Counter Input",
                "value": "pwm-in",
                "type": "str"
            },
            {
                "label": "ABB Electricity Meter",
                "value": "abb",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "type",
        "x": 990,
        "y": 1080,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "51297f18.edcfc",
        "type": "ui_list",
        "z": "e045593e.092be8",
        "group": "d6880d2.76b36f",
        "name": "Device List",
        "order": 1,
        "width": 5,
        "height": 12,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "19ab5941.050d67",
                "1e82f8d1.501717"
            ]
        ]
    },
    {
        "id": "b750207a.efb1a",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Scheduler",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\nif ( (!dataLogger) || (!dataLoggerStatus) || (!dataLogger.scheduler) || (!dataLogger.scheduler.enabled) )\n    return null;\n\nmonitorList   = dataLogger.monitor.deviceList;\nmonitorStatus = dataLoggerStatus.monitor.deviceList;\nif (!monitorList || !monitorStatus) {\n    return null;\n}\n\nnow            = msg.payload;\nlast_timestamp = context.get(\"last_timestamp\") || 0;\nforce_expires  = false;\nif (Math.abs(last_timestamp - now) > 5000) {\n    force_expires = true;\n    node.warn(`DL: Scheduler: Force Expires. now=${now} last=${last_timestamp}`);\n}\ncontext.set(\"last_timestamp\", now)\n\nmsg.now = now;\nfor (var itemName in monitorList) {\n    //node.warn(\"Item: \" + itemName);\n    var item       = monitorList[itemName];\n    var itemStatus = monitorStatus[itemName];\n    if (!itemStatus) {\n        monitorStatus[itemName] = { expires : 0 };\n        itemStatus = monitorStatus[itemName];\n        dataLoggerStatus.monitor.deviceList[itemName] = itemStatus;\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    }\n    if (!item.enabled)\n        continue;\n    if (force_expires)\n        itemStatus.expires = 0;\n    if (itemStatus.expires < now) {\n        itemStatus.expires = now + item.period * 1000;\n        monitorStatus[itemName] = itemStatus;\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n        msg.payload    = itemName;\n        msg.itemName   = itemName;\n        msg.item       = item;\n        msg.itemStatus = itemStatus;\n        //node.warn(item);\n        const msg_snd = RED.util.cloneMessage(msg);\n        node.send(msg_snd);\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "12318647.344d7a",
                "b43e125f.3ea52"
            ]
        ]
    },
    {
        "id": "a28f7e91.6e356",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "DL Scheduler Tick 1s [5s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "b750207a.efb1a"
            ]
        ]
    },
    {
        "id": "12318647.344d7a",
        "type": "switch",
        "z": "3022fd6.d249f02",
        "name": "",
        "property": "item.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "modbus-rtu",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "digital-in",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "adc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pwm-in",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "abb",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "eaab99fd.727298"
            ],
            [
                "2cbdaac3.3caa26"
            ],
            [
                "fed30a15.b7b538"
            ],
            [
                "1ce98527.d2f9ab"
            ],
            [
                "536b8e98.44d59"
            ],
            [
                "f1c30e2.a187bf"
            ]
        ]
    },
    {
        "id": "b43e125f.3ea52",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Scheduler",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 660,
        "y": 140,
        "wires": []
    },
    {
        "id": "eaab99fd.727298",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Modbus Type (OUT)",
        "links": [
            "235a01d.eeed9fe"
        ],
        "x": 795,
        "y": 180,
        "wires": []
    },
    {
        "id": "2cbdaac3.3caa26",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Digital-IN Type (OUT)",
        "links": [
            "661e8a2f.797904"
        ],
        "x": 835,
        "y": 200,
        "wires": []
    },
    {
        "id": "fed30a15.b7b538",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: ADC Type (OUT)",
        "links": [
            "aac29865.9eaa48"
        ],
        "x": 875,
        "y": 220,
        "wires": []
    },
    {
        "id": "f1c30e2.a187bf",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: OTHER Type (OUT)",
        "links": [],
        "x": 995,
        "y": 280,
        "wires": []
    },
    {
        "id": "235a01d.eeed9fe",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Request (IN)",
        "links": [
            "eaab99fd.727298"
        ],
        "x": 115,
        "y": 380,
        "wires": [
            [
                "8e0301dd.d71c4"
            ]
        ]
    },
    {
        "id": "aa8f7e84.86c91",
        "type": "modbus-flex-getter",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Read",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "338ade83.b54192",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 740,
        "y": 380,
        "wires": [
            [
                "b5c13eb.1d095c",
                "89e9bfe1.54fe"
            ],
            []
        ]
    },
    {
        "id": "8e0301dd.d71c4",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Build",
        "func": "modbus = msg.item.modbus;\n\nmsg.payload = modbus;\nmsg.payload.unitId = msg.payload.unitid;\nif (modbus.regtype.startsWith(\"int32\") || modbus.regtype.startsWith(\"float\"))\n    msg.payload.quantity *= 2;\n\n//msg.payload.connectorType = 'SERIAL';\n//msg.payload.serialPort = \"/dev/ttyS4\";\n//msg.payload.serialType = \"RTU\";\n//msg.payload.serialBaudrate = '115200';\n//msg.payload.serialParity = 'kk';\n\n//msg.payload.emptyQueue = true;\n//msg.resetQueue = true;\n//msg.emptyQueue = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 265,
        "y": 380,
        "wires": [
            [
                "b498e102.d1338",
                "3f06aa59.8c8456"
            ]
        ]
    },
    {
        "id": "39f7db5c.bd5654",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MODBUS Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1280,
        "y": 440,
        "wires": []
    },
    {
        "id": "b6f74647.ebda18",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Request (OUT)",
        "links": [
            "30ab35fe.693b6a"
        ],
        "x": 1315,
        "y": 360,
        "wires": []
    },
    {
        "id": "5b087637.65e2f8",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Build Device List",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nmonitorList = dataLogger.monitor.deviceList;\nif (!monitorList) {\n    msg.payload = [];\n    return msg;\n}\n\nvar newPayload = [];\nfor (var itemName in monitorList) {\n    var item = monitorList[itemName];\n    var newLine = {\n        title: itemName,\n        description: item.description,\n        item : item\n    };\n    newPayload.push(newLine);\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1080,
        "wires": [
            [
                "51297f18.edcfc",
                "11fe6bbd.916bf4"
            ]
        ]
    },
    {
        "id": "d8cc66b6.19d868",
        "type": "inject",
        "z": "e045593e.092be8",
        "name": "TS: Dev List INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "5b087637.65e2f8",
                "6d72fa8a.52b954"
            ]
        ]
    },
    {
        "id": "11fe6bbd.916bf4",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Build Device List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1e82f8d1.501717",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Device",
        "func": "if (msg.topic == \"add\") {\n    selectedDevice = {\n        name        : \"\",\n        description : \"\",\n        model       : \"\",\n        serial      : \"\",\n        type        : \"modbus-rtu\",\n        enabled     : false,\n        period      : 15\n    };\n    enable     = true;\n    enableName = true;\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\nelse if (msg.topic == \"edit\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if ( (!selectedDevice) || (Object.keys(selectedDevice).length === 0) )\n        return null;\n    enable     = true;\n    enableName = false;\n}\nelse if (msg.topic == \"del\") {\n    selectedDevice = {};\n    enable     = false;\n    enableName = false;\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    enable     = false;\n    enableName = false;\n}\nelse {\n    enable     = false;\n    enableName = false;\n    dataLogger = global.get(\"dataLogger\", \"config\");\n    if (!dataLogger)\n        return null;\n    selectedDevice = {};\n    try { Object.assign(selectedDevice, dataLogger.monitor.deviceList[msg.payload.item.name]); }\n    catch(e) { return null; }\n    node.warn(selectedDevice);\n    node.warn(msg.payload.item.name);\n    Object.assign(msg.payload.item, selectedDevice);\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n    msg.topic = \"refresh\";\n}\n\nmsgName   = { payload : selectedDevice.name || \"\", enabled : enableName };\nmsgModel  = { payload : selectedDevice.model || \"\", enabled : enable };\nmsgSerial = { payload : selectedDevice.serial || \"\", enabled : enable };\nmsgType   = { payload : selectedDevice.type, enabled : enable };\nmsgDesc   = { payload : selectedDevice.description || \"\", enabled : enable };\nmsgPeriod = { payload : selectedDevice.period || \"\", enabled : enable };\nmsgEnable = { payload : selectedDevice.enabled || false, enabled : enable };\n\nmsgControl = { payload : msg.payload, topic : msg.topic };\n\nreturn [\n    msgName, \n    msgModel, \n    msgSerial, \n    msgType, \n    msgDesc, \n    msgPeriod,\n    msgEnable,\n    msgControl\n];\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "bec29f89.06535"
            ],
            [
                "43620786.8ca598"
            ],
            [
                "db48db94.eb6728"
            ],
            [
                "828aa5cd.4c5a88"
            ],
            [
                "8ec61fda.98825"
            ],
            [
                "f5b23ba0.775ed8"
            ],
            [
                "dcf7762e.0ff0a8"
            ],
            [
                "f001feb1.19dd8",
                "cfdb2e24.f0cd7"
            ]
        ]
    },
    {
        "id": "19ab5941.050d67",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Dev",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 480,
        "y": 1020,
        "wires": []
    },
    {
        "id": "350b86f7.8cd11a",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Address",
        "tooltip": "Initial register address (0-49999)",
        "group": "6c2d686e.2ec398",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "address",
        "x": 1000,
        "y": 1480,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "1825caa8.4f47d5",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Count",
        "tooltip": "Number of registers to read (1-255)",
        "group": "6c2d686e.2ec398",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "quantity",
        "x": 990,
        "y": 1520,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "872d3fc7.97421",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Device SAVE",
        "group": "49b4254c.5474ec",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "bb1f5059.1cf2e"
            ]
        ]
    },
    {
        "id": "37459d3d.bc76f2",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Device DEL",
        "group": "49b4254c.5474ec",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 160,
        "y": 1300,
        "wires": [
            [
                "bb1f5059.1cf2e"
            ]
        ]
    },
    {
        "id": "73f67da4.6125e4",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {};\nselectedDevice[msg.topic] = msg.payload;\nflow.set('selectedDevice', selectedDevice, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1080,
        "wires": [
            [
                "cfdb2e24.f0cd7",
                "6bfd635e.3fdc4c"
            ]
        ]
    },
    {
        "id": "bb1f5059.1cf2e",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Dev Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null, null ];\n}\n\nmsgNotify = { };\ndataLogger  = global.get(\"dataLogger\", \"config\");\nmonitorList = dataLogger.monitor.deviceList;\nselectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {}\nif (!selectedDevice)\n    return [ null, null, null ];\nglobalFuns = global.get(\"globalFuns\");\n\nfield_list = {\n    name        : { type : \"string\", name : \"Name\", regex : /^[a-zA-Z0-9_]{1,20}$/i },\n    description : { type : \"string\", name : \"Description\", regex : /^[a-zA-Z0-9_\\-\\+ ;:.]{0,40}$/i },\n    period : { type : \"number\", min : 1, max : 30 * 24 * 60 * 60, name : \"Poll Period\" }\n};\nfield_list_modbus = {\n    unitid   : { type : \"number\", min : 1, max : 255, name : \"Unit ID\" },\n    fc       : { type : \"number\", min : 1, max : 4, name : \"FC\" },\n    address  : { type : \"number\", min : 0, max : 49999, name : \"Address\" },\n    quantity : { type : \"number\", min : 1, max : 255, name : \"Count\" },\n};\nfield_list_pwm_in = {\n    reset_on_restart : { type : \"boolean\", name : \"Reset on Restart\" },\n    period           : { type : \"number\", min : 1, max : 30 * 24 * 60 * 60, name : \"Pulse Counter Period\" },\n    ioname           : { type : \"ioname\", name : \"IO Name\" },\n};\nfield_list_digital_in = {\n    ioname           : { type : \"ioname\", name : \"IO Name\" },\n};\nfield_list_abb = {\n    ipadd         : { type : \"string\", name : \"IP Address\",  regex : /^[0-9.]{7,15}$/i },\n};\n/************************************\n * Find function\n ************************************/\nfunction find_io(element, index, array, thisArg)\n{\n    ioname = this.toString();\n    // Ponemos un try por si no existe algun objeto\n    try { return (element.type == 'pwm-in') && (element.pwm_in.ioname == ioname); }\n    catch(e) { return false; }\n}\n\n/************************************\n * Validate SAVE DEVICE\n ************************************/\nfunction validate_save_device_params()\n{\n    result = globalFuns.validate_fields(field_list, selectedDevice);\n    if (result.status !== 0)\n        return result;\n\n    if (selectedDevice.type == \"modbus-rtu\") {\n        result = globalFuns.validate_fields(field_list_modbus, selectedDevice.modbus);\n        if (result.status !== 0)\n            return result;\n    }\n\n    if (selectedDevice.type == \"pwm-in\") {\n        result = globalFuns.validate_fields(field_list_pwm_in, selectedDevice.pwm_in);\n        if (result.status !== 0)\n            return result;\n    }\n\n    if (selectedDevice.type == \"digital-in\") {\n        result = globalFuns.validate_fields(field_list_digital_in, selectedDevice.digital_in);\n        if (result.status !== 0)\n            return result;\n    }\n    \n     if (selectedDevice.type == \"abb\") {\n        result = globalFuns.validate_fields(field_list_abb, selectedDevice.abb);\n        if (result.status !== 0)\n            return result;\n    }\n    \n    return result;\n}\n\nif (msg.topic == 'save') {\n    msgNotify.topic = \"Save Device\";\n    result = validate_save_device_params();\n    if (result.status !== 0) {\n        msgNotify.payload = result.error;\n        return [ null, null, msgNotify ];\n    }\n    \n    //node.warn(selectedDevice);\n    //node.warn(selectedDevice.name);\n    monitorListOld = RED.util.cloneMessage(monitorList);\n    msg.monitorListOld = monitorListOld;\n    if (!selectedDevice.measList)\n        selectedDevice.measList = { };\n    monitorList[selectedDevice.name] = RED.util.cloneMessage(selectedDevice);\n    \n    dataLoggerStatus = global.get(\"dataLoggerStatus\");\n    if (dataLoggerStatus && dataLoggerStatus.monitor && dataLoggerStatus.monitor.deviceList[selectedDevice.name]) {\n        dataLoggerStatus.monitor.deviceList[selectedDevice.name].expires = 0;\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    }\n\n    msgNotify.payload = selectedDevice.name + \" saved OK\";\n}\nelse {\n    msgNotify.topic   = \"Delete Device\";\n    if (monitorList[selectedDevice.name])\n        delete(monitorList[selectedDevice.name]);\n    dataLoggerStatus = global.get(\"dataLoggerStatus\");\n    if (dataLoggerStatus && dataLoggerStatus.monitor && dataLoggerStatus.monitor.deviceList[selectedDevice.name]) {\n        delete(dataLoggerStatus.monitor.deviceList[selectedDevice.name]);\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    }\n\n    msgNotify.payload = selectedDevice.name + \" deleted\";\n}\n\ndataLogger.monitor.deviceList = monitorList;\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nmsgCtl = { topic : msg.topic };\nmsg.notify = { topic : msgNotify.topic, payload : msgNotify.payload };\nmsg.selectedDevice = selectedDevice;\n\nreturn [ msgCtl, msg, msgNotify ];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1240,
        "wires": [
            [
                "1e82f8d1.501717"
            ],
            [
                "2a7597f8.117ae8",
                "fca664bc.abc668",
                "b2d9ca57.852618"
            ],
            [
                "7820d22f.f0573c"
            ]
        ]
    },
    {
        "id": "8ec61fda.98825",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Description",
        "tooltip": "",
        "group": "49b4254c.5474ec",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "description",
        "x": 1010,
        "y": 1120,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "632568eb.3e71d8",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: List Dev Trigger Build (IN)",
        "links": [
            "2a7597f8.117ae8",
            "d385f88f.27f688",
            "778e7cc1.2cfd14",
            "cadc12d4.3d4dc",
            "ac723793.476328"
        ],
        "x": 55,
        "y": 1080,
        "wires": [
            [
                "5b087637.65e2f8"
            ]
        ]
    },
    {
        "id": "2a7597f8.117ae8",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: List Dev Trigger Build (OUT)",
        "links": [
            "632568eb.3e71d8"
        ],
        "x": 595,
        "y": 1300,
        "wires": []
    },
    {
        "id": "cfdb2e24.f0cd7",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Storage",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1290,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f5b23ba0.775ed8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Poll Period",
        "tooltip": "Period in seconds (1-2592000)",
        "group": "49b4254c.5474ec",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "period",
        "x": 1010,
        "y": 1160,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "3d3435a0.7b79ba",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "MODBUS-RTU",
        "info": "",
        "x": 175,
        "y": 340,
        "wires": []
    },
    {
        "id": "a1ff0ed9.1fcd4",
        "type": "inject",
        "z": "c184c8d0.48fa78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 100,
        "wires": [
            [
                "411eefda.b4c37"
            ]
        ]
    },
    {
        "id": "411eefda.b4c37",
        "type": "function",
        "z": "c184c8d0.48fa78",
        "name": "",
        "func": "tlntSettings = global.get('tlntSettings');\nredis = tlntSettings.loadModule('fs');\nmsg.redis = redis;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 100,
        "wires": [
            [
                "157903ec.1bac0c"
            ]
        ]
    },
    {
        "id": "157903ec.1bac0c",
        "type": "debug",
        "z": "c184c8d0.48fa78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "b27d4f4.10219b",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "SCHEDULER",
        "info": "",
        "x": 170,
        "y": 160,
        "wires": []
    },
    {
        "id": "744d8b8b.bb2864",
        "type": "ui_list",
        "z": "e045593e.092be8",
        "group": "43fa38aa.decf08",
        "name": "Measurement List",
        "order": 1,
        "width": 5,
        "height": 12,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "x": 470,
        "y": 2300,
        "wires": [
            [
                "1a0f668f.770d79",
                "2a1f3bd0.a2cf14"
            ]
        ]
    },
    {
        "id": "28d960d.80736a",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Build Meas List",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nmonitorList = dataLogger.monitor.deviceList;\nif (!monitorList) {\n    msg.payload = [];\n    return msg;\n}\n\nselectedDevice = flow.get('selectedDevice', \"memoryOnly\");\nif (!selectedDevice) {\n    msg.payload = [];\n    return msg;\n}\n\ndevItem = monitorList[selectedDevice.name];\nif (!devItem) {\n    msg.payload = [];\n    return msg;\n}\n\nvar newPayload = [];\nfor (var measName in devItem.measList) {\n    var meas = devItem.measList[measName];\n    var newLine = {\n        title: meas.name,\n        description: meas.description,\n        meas : meas\n    };\n    newPayload.push(newLine);\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 210,
        "y": 2300,
        "wires": [
            [
                "744d8b8b.bb2864",
                "7758fd9f.726764"
            ]
        ]
    },
    {
        "id": "baa1d799.094118",
        "type": "inject",
        "z": "e045593e.092be8",
        "name": "DL Meas INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2240,
        "wires": [
            [
                "28d960d.80736a"
            ]
        ]
    },
    {
        "id": "7758fd9f.726764",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Build Meas List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 450,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2a1f3bd0.a2cf14",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Meas",
        "func": "if (msg.topic == \"add\") {\n    selectedMeas = { \n        name        : \"\",\n        type        : \"\",\n        ID          : \"\",\n        description : \"\",\n        value       : \"\",\n        enabled     : false,\n        csv_enabled : false,\n        store_changes_only : false,\n        send_changes_only  : false,\n        use_time_diff      : false,\n        post_oper   : \"none\",\n        threshold   : \"\",\n        keep_alive  : \"\"\n    };\n    enable     = true;\n    enableName = true;\n    flow.set('selectedMeas', selectedMeas, \"memoryOnly\");\n}\nelse if (msg.topic == \"edit\") {\n    selectedMeas = flow.get(\"selectedMeas\", \"memoryOnly\");\n    if ( (!selectedMeas) || (Object.keys(selectedMeas).length === 0) )\n        return null;\n    enable = true;\n    enableName = false;\n}\nelse if (msg.topic == \"del\") {\n    selectedMeas = { };\n    enable     = false;\n    enableName = false;\n    flow.set('selectedMeas', selectedMeas, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedMeas = flow.get(\"selectedMeas\", \"memoryOnly\");\n    if (Object.keys(selectedMeas).length === 0)\n        return null;\n    enable     = false;\n    enableName = false;\n}\nelse {  /* Select Meas o Select Device */\n    enable     = false;\n    enableName = false;\n    selectedMeas = msg.payload.meas || { };\n    flow.set('selectedMeas', selectedMeas, \"memoryOnly\");\n}\n\nmsgName   = { payload : selectedMeas.name || \"\", enabled : enableName };\nmsgType   = { payload : selectedMeas.type || \"\", enabled : enable };\nmsgID     = { payload : selectedMeas.ID || \"\", enabled : enable };\nmsgUnit   = { payload : selectedMeas.units || \"\", enabled : enable };\nmsgDesc   = { payload : selectedMeas.description || \"\", enabled : enable };\nmsgValue  = { payload : selectedMeas.value || \"\", enabled : enable };\nmsgEnable = { payload : selectedMeas.enabled, enabled : enable };\nmsgCSVEnable = { payload : selectedMeas.csv_enabled, enabled : enable };\nmsgStoreChg  = { payload : selectedMeas.store_changes_only, enabled : enable };\nmsgSendChg   = { payload : selectedMeas.send_changes_only, enabled : enable };\nmsgThreshold = { payload : selectedMeas.threshold || \"\", enabled : enable };\nmsgKeepAlive = { payload : selectedMeas.keep_alive || \"\", enabled : enable };\nmsgPostOper  = { payload : selectedMeas.post_oper || \"none\", enabled : enable };\n\nmsgCloud  = { payload : msg.payload, topic : msg.topic };\n\nreturn [\n    msgName, \n    msgType, \n    msgID, \n    msgUnit, \n    msgDesc, \n    msgValue,\n    msgEnable,\n    msgCSVEnable,\n    msgStoreChg,\n    msgSendChg,\n    msgThreshold,\n    msgKeepAlive,\n    msgPostOper,\n    msgCloud\n];\n",
        "outputs": 14,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 2300,
        "wires": [
            [
                "f1c7cc8.0f2493"
            ],
            [
                "833e6592.ab49f8"
            ],
            [
                "4ef763ee.94ce8c"
            ],
            [
                "ee9b2e9.8717dd"
            ],
            [
                "1a2b1a9d.532025"
            ],
            [
                "c187f2d4.65eef"
            ],
            [
                "91844357.509ff"
            ],
            [
                "c72eeb6b.e66138"
            ],
            [
                "a64ffafd.564328"
            ],
            [
                "7bcc142.b5664ec"
            ],
            [
                "7a805a18.e292f4"
            ],
            [
                "51c99eb.df33f6"
            ],
            [
                "f3bd450a.8e3f78"
            ],
            [
                "723b14d9.9d73dc"
            ]
        ]
    },
    {
        "id": "1a0f668f.770d79",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Meas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 440,
        "y": 2240,
        "wires": []
    },
    {
        "id": "afbe033f.accee",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: List Meas Trigger Build (IN)",
        "links": [
            "befac04d.21067",
            "f001feb1.19dd8",
            "778e7cc1.2cfd14",
            "cadc12d4.3d4dc"
        ],
        "x": 115,
        "y": 2360,
        "wires": [
            [
                "28d960d.80736a"
            ]
        ]
    },
    {
        "id": "de0aa0c2.e15b6",
        "type": "function",
        "z": "c184c8d0.48fa78",
        "name": "Create database InfluxDB",
        "func": "msg.query = \"CREATE DATABASE local\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "31b3659.f1e0f9a"
            ]
        ]
    },
    {
        "id": "31b3659.f1e0f9a",
        "type": "influxdb in",
        "z": "c184c8d0.48fa78",
        "influxdb": "9cdaa712.01fbb8",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 880,
        "y": 260,
        "wires": [
            [
                "a195a390.c3c2c"
            ]
        ]
    },
    {
        "id": "724ed75f.4c0fb8",
        "type": "inject",
        "z": "c184c8d0.48fa78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "de0aa0c2.e15b6"
            ]
        ]
    },
    {
        "id": "a195a390.c3c2c",
        "type": "debug",
        "z": "c184c8d0.48fa78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 260,
        "wires": []
    },
    {
        "id": "5c08bea6.4984e",
        "type": "inject",
        "z": "c184c8d0.48fa78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "d63859aa.7b31e8"
            ]
        ]
    },
    {
        "id": "d63859aa.7b31e8",
        "type": "function",
        "z": "c184c8d0.48fa78",
        "name": "Create database InfluxDB",
        "func": "msg.query = \"SHOW DATABASES\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "31b3659.f1e0f9a"
            ]
        ]
    },
    {
        "id": "1753270.569fad9",
        "type": "influxdb out",
        "z": "c184c8d0.48fa78",
        "influxdb": "a351a0a2.d0184",
        "name": "",
        "measurement": "test",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "c9d8ecd8.2e852",
        "type": "function",
        "z": "c184c8d0.48fa78",
        "name": "single value",
        "func": "msg.payload = Math.random()*10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 447,
        "y": 488,
        "wires": [
            [
                "1753270.569fad9"
            ]
        ]
    },
    {
        "id": "57003540.041f8c",
        "type": "inject",
        "z": "c184c8d0.48fa78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 303,
        "y": 463,
        "wires": [
            [
                "c9d8ecd8.2e852"
            ]
        ]
    },
    {
        "id": "f1c7cc8.0f2493",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Name",
        "tooltip": "Measurement name",
        "group": "c52ab030.ec40a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "name",
        "x": 1010,
        "y": 2160,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "833e6592.ab49f8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Type",
        "tooltip": "Type string (volt, power, temp, ...)",
        "group": "c52ab030.ec40a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "type",
        "x": 1010,
        "y": 2200,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "4ef763ee.94ce8c",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas ID",
        "tooltip": "Measurement ID for cloud platform",
        "group": "c52ab030.ec40a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "ID",
        "x": 1000,
        "y": 2240,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "ee9b2e9.8717dd",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Units",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "units",
        "x": 1010,
        "y": 2280,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "1a2b1a9d.532025",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Description",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "description",
        "x": 1030,
        "y": 2320,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "c187f2d4.65eef",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Value / Operation",
        "tooltip": "rawdata[N] ==> Nth value, rawlast[N] ==> Nth last value",
        "group": "c52ab030.ec40a",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "value",
        "x": 1050,
        "y": 2360,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "f0febc78.78444",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Meas",
        "func": "selectedMeas = flow.get('selectedMeas', \"memoryOnly\") || {};\nselectedMeas[msg.topic] = msg.payload;\nflow.set('selectedMeas', selectedMeas, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1370,
        "y": 2380,
        "wires": [
            [
                "84208901.0fa328"
            ]
        ]
    },
    {
        "id": "84208901.0fa328",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Meas Storage",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1430,
        "y": 2560,
        "wires": []
    },
    {
        "id": "befac04d.21067",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: List Meas Trigger Build (OUT)",
        "links": [
            "afbe033f.accee"
        ],
        "x": 615,
        "y": 2460,
        "wires": []
    },
    {
        "id": "43620786.8ca598",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Model",
        "tooltip": "",
        "group": "49b4254c.5474ec",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "model",
        "x": 990,
        "y": 1000,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "db48db94.eb6728",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Serial",
        "tooltip": "",
        "group": "49b4254c.5474ec",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "serial",
        "x": 990,
        "y": 1040,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "33ca3c5f.9126b4",
        "type": "ui_ui_control",
        "z": "e045593e.092be8",
        "name": "",
        "x": 640,
        "y": 140,
        "wires": [
            [
                "3affa791.c2f0c8"
            ]
        ]
    },
    {
        "id": "3affa791.c2f0c8",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Dev UI CTL (OUT)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "baf77576.355698",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Operation",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\n\nfunction update_dataLoggerStatus(deviceName, measName, timestamp, rawdata, value)\n{\n    now = timestamp.getTime();\n    if (!dataLoggerStatus.monitor)\n        dataLoggerStatus.monitor = { deviceList : {} };\n    if (!dataLoggerStatus.monitor.deviceList[deviceName])\n        dataLoggerStatus.monitor.deviceList[deviceName] = { measList : {} };\n    if (!dataLoggerStatus.monitor.deviceList[deviceName].measList)\n        dataLoggerStatus.monitor.deviceList[deviceName].measList = {};\n    if (!dataLoggerStatus.monitor.deviceList[deviceName].measList[measName]) {\n        dataLoggerStatus.monitor.deviceList[deviceName].measList[measName] = {\n            rawlast              : rawdata,\n            value                : value,\n            value_ts             : 0,\n            last_value           : value,\n            last_value_ts        : 0,\n            last_value_commit    : value,\n            last_value_commit_ts : 0,\n        };\n    }\n    last_value         = dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].value || 0;\n    last_value_ts      = dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].value_ts || 0;\n    store_changes_only = dataLogger.monitor.deviceList[deviceName].measList[measName].store_changes_only || false;\n    send_changes_only  = dataLogger.monitor.deviceList[deviceName].measList[measName].send_changes_only || false;\n    changes_only_commit = false;\n    if (store_changes_only || send_changes_only) {\n        last_value_commit    = dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value_commit || last_value;\n        last_value_commit_ts = dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value_commit_ts || last_value_ts;\n        keep_alive     = dataLogger.monitor.deviceList[deviceName].measList[measName].keep_alive || 0;\n        threshold      = dataLogger.monitor.deviceList[deviceName].measList[measName].threshold || 0;\n\n        /* Si los resultados no cambian y no ha expirado el timeout, no almacenamos nada */\n        expires = last_value_commit_ts + keep_alive * 1000;\n        //node.warn(deviceName + \" \" + measName)\n        //node.warn(value + \" \" + last_value);\n        //node.warn(keep_alive + \" \" + now + \" \" + expires);\n        if ( (Math.abs(value - last_value_commit) <= threshold) && \n             (keep_alive && (now < expires)) )\n            changes_only_commit = false;\n        else {\n            changes_only_commit = true;\n            //last_value_ts       = now;\n        }\n    }\n\n    if (changes_only_commit) {\n        dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value_commit    = value;\n        dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value_commit_ts = now;\n    }\n\n    // Meas\n    dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value    = last_value;\n    dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].last_value_ts = last_value_ts;\n    dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].value         = value;\n    dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].value_ts      = now;\n\n    //dataLoggerStatus.monitor.deviceList[deviceName].measList[measName].rawlast        = rawdata;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    \n    return changes_only_commit;\n}\n\nrawdata = msg.payload;\n\nmsg.timestamp = new Date();\n\n// Device\ndataLoggerStatus.monitor.deviceList[msg.itemName].rawlast = dataLoggerStatus.monitor.deviceList[msg.itemName].rawdata;\ndataLoggerStatus.monitor.deviceList[msg.itemName].rawdata = rawdata;\ndataLoggerStatus.monitor.deviceList[msg.itemName].status = \"OK\";\ndataLoggerStatus.monitor.deviceList[msg.itemName].timestamp_ok = msg.timestamp;\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nmeasList = msg.item.measList;\nfor (var measName in measList) {\n    meas = measList[measName];\n    if (!meas.enabled)\n        continue;\n\n    try {\n        rawlast     = dataLoggerStatus.monitor.deviceList[msg.itemName].measList[measName].rawlast || [ 0 ];\n        last_value  = dataLoggerStatus.monitor.deviceList[msg.itemName].measList[measName].last_value;\n    }\n    catch (e) {\n        rawlast     = new Array(rawdata.length).fill(0);\n        last_value  = 0;\n    }\n\n    /** Operation */\n    operation = meas.value;\n    if (operation) {\n        cmd = \"_opresult = \" + operation;\n        try {\n            var last = last_value;\n            data = rawdata; // Esto habria que quitarlo\n            eval(cmd);\n            _opresult = +_opresult.toFixed(4);\n        }\n        catch(e) {\n            globalFuns = global.get(\"globalFuns\");\n            globalFuns.tlnt_log(1, \"DataLogger\", `Operation (${measName}: ${cmd}): Eval error: ${e}`);\n            return [ null, msg ];\n        }\n    }\n    else\n        _opresult = rawdata[0];\n    value = _opresult; // Resultado de la operacion\n    //node.warn(cmd)\n    //node.warn(rawdata);\n    //node.warn(rawlast);\n    //node.warn(value);\n    \n    msg.payload = value;\n    msg.meas = meas;\n    \n    try {\n        tmp_last_value_commit_ts = dataLoggerStatus.monitor.deviceList[msg.itemName].measList[measName].last_value_commit_ts;\n        tmp_last_value_commit    = dataLoggerStatus.monitor.deviceList[msg.itemName].measList[measName].last_value_commit;\n    }\n    catch(e) {\n        tmp_last_value_commit_ts = msg.timestamp.getTime();\n        tmp_last_value_commit    = value;\n    }\n\n    msg.changes_only_commit = update_dataLoggerStatus(msg.itemName, measName, msg.timestamp, rawdata, value);\n    const msg_snd = RED.util.cloneMessage(msg);\n\n    post_oper = dataLogger.monitor.deviceList[msg.itemName].measList[measName].post_oper || \"none\";\n    //if (changes_only_commit) {\n    //if (dataLogger.monitor.deviceList[msg.itemName].measList[measName].use_time_diff) {\n    if (post_oper.includes(\"timediff\")) {\n        msg_snd.timediff = msg.timestamp.getTime() - tmp_last_value_commit_ts;\n        if ( (post_oper == \"timediff_nonzero\") && (tmp_last_value_commit == 0) )\n            msg_snd.payload  = 0;\n        else if ( (post_oper == \"timediff_zero\") && (tmp_last_value_commit != 0) )\n            msg_snd.payload  = 0;\n        else\n            msg_snd.payload  = Math.floor(msg_snd.timediff / 1000);\n        msg_snd.timestamp = msg.timestamp; //.getTime();\n        msg_snd.tmp_last_value_commit_ts = tmp_last_value_commit_ts;\n        //node.warn(`${msg.itemName} ${measName}: ${msg_snd.timestamp}, ${tmp_last_value_commit_ts}, ${msg_snd.timediff}`);\n    }\n    node.send([ msg_snd, null ]);\n    \n}\n\nreturn [ null, msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "b8424f3b.34841",
                "ce63d4d5.1f79e8",
                "13d72297.0a4e6d"
            ],
            [
                "94e1c18a.e7481"
            ]
        ]
    },
    {
        "id": "30ab35fe.693b6a",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: Operation (IN)",
        "links": [
            "b6f74647.ebda18",
            "32fa09e2.bf9f96",
            "57da7917.9c4bc8",
            "2e07c34b.830e8c"
        ],
        "x": 115,
        "y": 1080,
        "wires": [
            [
                "643ee994.13dda8",
                "95a867bd.187338"
            ]
        ]
    },
    {
        "id": "b8424f3b.34841",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Operation (OUT)",
        "links": [
            "d281d54a.530558",
            "4744915c.d6804",
            "d4b0b8ed.aaea68"
        ],
        "x": 915,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ce63d4d5.1f79e8",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Operate Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "366d0cff.223644",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: GUI Control (IN)",
        "links": [
            "f001feb1.19dd8",
            "6bfd635e.3fdc4c",
            "778e7cc1.2cfd14",
            "6d72fa8a.52b954",
            "cadc12d4.3d4dc"
        ],
        "x": 235,
        "y": 140,
        "wires": [
            [
                "a731e8ee.f0ac28"
            ]
        ]
    },
    {
        "id": "a731e8ee.f0ac28",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Build UI-Control",
        "func": "if ( (msg.topic != \"init\") && (msg.topic != \"refresh\") &&\n     (msg.topic != \"type\") && (msg.topic != \"add\") &&\n     !( (msg.payload == \"change\") && (msg.name == \"DataLogger\") ) )\n    return null;\n\nselectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\nif (!selectedDevice)\n    type = \"\";\nelse\n    type = selectedDevice.type || \"\";\n\nshowList = [ \"DataLogger_Measurement_Info\" ];\nhideList = [];\n\nif (type == 'modbus-rtu') {\n    showList.push(\"DataLogger_MODBUS_RTU_Info\");\n    hideList.push(\"DataLogger_Digital_IO_Info\");\n    hideList.push(\"DataLogger_ADC_Info\");\n    hideList.push(\"DataLogger_Pulse_Counter_Info\");\n    hideList.push(\"DataLogger_ABB_Meter_Info\");\n}\nelse if (type == 'digital-in') {\n    hideList.push(\"DataLogger_MODBUS_RTU_Info\");\n    showList.push(\"DataLogger_Digital_IO_Info\");\n    hideList.push(\"DataLogger_ADC_Info\");\n    hideList.push(\"DataLogger_Pulse_Counter_Info\");\n    hideList.push(\"DataLogger_ABB_Meter_Info\");\n}\nelse if (type == 'adc') {\n    hideList.push(\"DataLogger_MODBUS_RTU_Info\");\n    hideList.push(\"DataLogger_Digital_IO_Info\");\n    showList.push(\"DataLogger_ADC_Info\");\n    hideList.push(\"DataLogger_Pulse_Counter_Info\");\n    hideList.push(\"DataLogger_ABB_Meter_Info\");\n}\nelse if (type == 'pwm-in') {\n    hideList.push(\"DataLogger_MODBUS_RTU_Info\");\n    hideList.push(\"DataLogger_Digital_IO_Info\");\n    hideList.push(\"DataLogger_ADC_Info\");\n    showList.push(\"DataLogger_Pulse_Counter_Info\");\n    hideList.push(\"DataLogger_ABB_Meter_Info\");\n}\nelse if (type == 'abb') {\n    hideList.push(\"DataLogger_MODBUS_RTU_Info\");\n    hideList.push(\"DataLogger_Digital_IO_Info\");\n    hideList.push(\"DataLogger_ADC_Info\");\n    hideList.push(\"DataLogger_Pulse_Counter_Info\");\n    showList.push(\"DataLogger_ABB_Meter_Info\");\n}\nelse {\n    hideList.push(\"DataLogger_MODBUS_RTU_Info\");\n    hideList.push(\"DataLogger_Digital_IO_Info\");\n    hideList.push(\"DataLogger_ADC_Info\");\n    hideList.push(\"DataLogger_Pulse_Counter_Info\");\n    hideList.push(\"DataLogger_ABB_Meter_Info\");\n}\n\nmsgControl = {\n    payload : {\n        group : {\n            show : showList,\n            hide : hideList\n        }\n    }\n};\n\nreturn msgControl;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "58b9989d.5ddd58",
                "33ca3c5f.9126b4"
            ]
        ]
    },
    {
        "id": "29712f4f.63f3c",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Dev MODBUS",
        "func": "retNull = [ null, null, null, null, null, null, null ];\nif (msg.topic == \"add\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    selectedDevice.modbus = {\n        fc : 3, unitid : 1, address : 0, quantity : 0, regtype : \"int16\"\n    };\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n    enable = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"modbus-rtu\")\n        return retNull;\n    enable = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedDevice = { modbus : {} };\n    enable = false;\n}\nelse if (msg.topic == \"save\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"modbus-rtu\")\n        return retNull;\n    enable = false;\n}\nelse {\n    enable = false;\n    //selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {};\n    selectedDevice = msg.payload.item;\n    if (selectedDevice.type != \"modbus-rtu\")\n        return retNull;\n\n    selectedDevice.modbus = msg.payload.item.modbus || { };\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\n\nmsgFC     = { payload : selectedDevice.modbus.fc, enabled : enable };\nmsgUnitID = { payload : selectedDevice.modbus.unitid || 0, enabled : enable };\nmsgReg    = { payload : selectedDevice.modbus.address || 0, enabled : enable };\nmsgCnt    = { payload : selectedDevice.modbus.quantity || 0, enabled : enable };\nmsgSpeed  = { payload : selectedDevice.modbus.serialBaudrate || 9600, enabled : enable };\nmsgParity = { payload : selectedDevice.modbus.serialParity  || \"none\", enabled : enable };\nmsgRegtype= { payload : selectedDevice.modbus.regtype || \"int16\", enabled : enable };\n\nreturn [\n    msgFC, \n    msgUnitID, \n    msgReg, \n    msgCnt,\n    msgSpeed,\n    msgParity,\n    msgRegtype\n];\n",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1520,
        "wires": [
            [
                "2cd05548.07274a"
            ],
            [
                "8216277f.e8cbf8"
            ],
            [
                "350b86f7.8cd11a"
            ],
            [
                "1825caa8.4f47d5"
            ],
            [
                "400328ff.8805d8"
            ],
            [
                "cec7a6a4.0622a8"
            ],
            [
                "567990d.86f0f7"
            ]
        ]
    },
    {
        "id": "f001feb1.19dd8",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: Sel Dev (OUT)",
        "links": [
            "366d0cff.223644",
            "afbe033f.accee",
            "92c0658e.9cbda8",
            "df7755af.53c8d8",
            "810274d1.086858",
            "1e1c21dc.f3d93e",
            "da2294e9.45b588",
            "e5bbd303.f24c5"
        ],
        "x": 955,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8216277f.e8cbf8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "UnitID",
        "tooltip": "MODBUS Device UnitID (1-255)",
        "group": "6c2d686e.2ec398",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "unitid",
        "x": 990,
        "y": 1440,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "8a8dddac.349bd",
        "type": "comment",
        "z": "e045593e.092be8",
        "name": "UI CONTROL",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "cc79faf0.db0a18",
        "type": "comment",
        "z": "e045593e.092be8",
        "name": "Device List",
        "info": "",
        "x": 160,
        "y": 960,
        "wires": []
    },
    {
        "id": "2eb243db.a38ebc",
        "type": "comment",
        "z": "e045593e.092be8",
        "name": "Measurement List",
        "info": "",
        "x": 190,
        "y": 2180,
        "wires": []
    },
    {
        "id": "cad02bf0.932718",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev MODBUS",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || { };\nif (!selectedDevice.modbus)\n    selectedDevice.modbus = {};\nselectedDevice.modbus[msg.topic] = msg.payload;\nflow.set('selectedDevice', selectedDevice, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1520,
        "wires": [
            [
                "388cff53.d947f"
            ]
        ]
    },
    {
        "id": "388cff53.d947f",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Storage MODBUS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1360,
        "y": 1460,
        "wires": []
    },
    {
        "id": "58b9989d.5ddd58",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Dev UI CTL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "6bfd635e.3fdc4c",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: Sel Dev St (OUT)",
        "links": [
            "366d0cff.223644"
        ],
        "x": 1475,
        "y": 1080,
        "wires": []
    },
    {
        "id": "dcf7762e.0ff0a8",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Device Enabled",
        "tooltip": "",
        "group": "49b4254c.5474ec",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enabled",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1020,
        "y": 1200,
        "wires": [
            [
                "73f67da4.6125e4"
            ]
        ]
    },
    {
        "id": "91844357.509ff",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Meas Enabled",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enabled",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1020,
        "y": 2400,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "147ce31a.a0852d",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Input Name",
        "tooltip": "I/O Name (IN1, IN2, ...)",
        "group": "6e01fa88.448514",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "ioname",
        "x": 1010,
        "y": 1700,
        "wires": [
            [
                "109f1471.47a98c"
            ]
        ]
    },
    {
        "id": "becf04d0.6d67c8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Channel Number",
        "tooltip": "",
        "group": "b3c075c6.7d4bd8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "fc",
        "x": 1030,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "c64cb197.91757",
        "type": "inject",
        "z": "87692da3.99da2",
        "name": "DL Server List INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "4ed27239.6ea3dc"
            ]
        ]
    },
    {
        "id": "4ed27239.6ea3dc",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "DL: Build Server List",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nserverList = dataLogger.cloud.serverList;\nif (!serverList) {\n    msg.payload = [];\n    return msg;\n}\n\nvar newPayload = [];\nfor (var itemName in serverList) {\n    var item = serverList[itemName];\n    var newLine = {\n        title: itemName,\n        description: item.description,\n        item : item\n    };\n    newPayload.push(newLine);\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 440,
        "wires": [
            [
                "2e302f4e.2f214"
            ]
        ]
    },
    {
        "id": "2e302f4e.2f214",
        "type": "ui_list",
        "z": "87692da3.99da2",
        "group": "a8cf212d.646a6",
        "name": "Server List",
        "order": 1,
        "width": "6",
        "height": "12",
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "303578a2.7df5d8",
                "1ee875d8.f90a3a",
                "455ef938.a671c8"
            ]
        ]
    },
    {
        "id": "303578a2.7df5d8",
        "type": "debug",
        "z": "87692da3.99da2",
        "name": "DBG: DL Cloud: Select",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 380,
        "wires": []
    },
    {
        "id": "1ee875d8.f90a3a",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "DL: Select Server",
        "func": "if (msg.topic == \"add\") {\n    selectedServer = { type : \"InfluxDB\" };\n    enable     = true;\n    enableName = true;\n    flow.set('selectedServer', selectedServer, \"memoryOnly\");\n}\nelse if (msg.topic == \"edit\") {\n    selectedServer = flow.get(\"selectedServer\", \"memoryOnly\");\n    if ( (!selectedServer) || (Object.keys(selectedServer).length === 0) )\n        return null;\n    enable     = true;\n    enableName = false;\n}\nelse if (msg.topic == \"del\") {\n    selectedServer = {};\n    enable     = false;\n    enableName = false;\n    flow.set('selectedServer', selectedServer, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedServer = flow.get(\"selectedServer\", \"memoryOnly\");\n    enable     = false;\n    enableName = false;\n}\nelse {\n    enable     = false;\n    enableName = false;\n    selectedServer = msg.payload.item;\n    flow.set('selectedServer', selectedServer, \"memoryOnly\");\n}\n\nmsgName     = { payload : selectedServer.name || \"\", enabled : enableName };\nmsgType     = { payload : selectedServer.type, enabled : enable };\nmsgURL      = { payload : selectedServer.url || \"\", enabled : enable };\nmsgUser     = { payload : selectedServer.user || \"\", enabled : enable };\nmsgPassword = { payload : selectedServer.password || \"\", enabled : enable };\nmsgDatabase = { payload : selectedServer.database || \"\", enabled : enable };\nmsgExtra    = { payload : selectedServer.extra || \"\", enabled : enable };\nmsgTTL      = { payload : selectedServer.queue_ttl || 0, enabled : enable };\nmsgEnable   = { payload : selectedServer.enabled || false, enabled : enable };\n\nmsgControl  = { payload : msg.payload };\n\nreturn [\n    msgName, \n    msgType, \n    msgURL, \n    msgUser, \n    msgPassword, \n    msgDatabase,\n    msgExtra,\n    msgTTL,\n    msgEnable,\n    msgControl\n];\n",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 440,
        "wires": [
            [
                "e2ad6263.8458"
            ],
            [
                "c4cd6357.d0d64"
            ],
            [
                "962299b8.f14948"
            ],
            [
                "c00337f3.917288"
            ],
            [
                "ad43268e.f8e7a8"
            ],
            [
                "32253d22.590092"
            ],
            [
                "f77b1325.3fe94"
            ],
            [
                "787f2fd.69685d"
            ],
            [
                "cf5cd70c.a79258"
            ],
            []
        ]
    },
    {
        "id": "e2ad6263.8458",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "name",
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "c4cd6357.d0d64",
        "type": "ui_dropdown",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Type",
        "tooltip": "",
        "place": "Select option",
        "group": "9f1b4f31.7f04f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "InfluxDB",
                "value": "influxdb",
                "type": "str"
            },
            {
                "label": "BabelGate",
                "value": "pordo",
                "type": "str"
            },
            {
                "label": "Power BI",
                "value": "powerbi",
                "type": "str"
            },
            {
                "label": "FTP",
                "value": "ftp",
                "type": "str"
            },
            {
                "label": "MQTT",
                "value": "mqtt",
                "type": "str"
            },
            {
                "label": "EMIOS Real Time",
                "value": "mqtt_emios",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "type",
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "cf5cd70c.a79258",
        "type": "ui_switch",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Server Enabled",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enabled",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1080,
        "y": 680,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "962299b8.f14948",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "URL",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "url",
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "c00337f3.917288",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "User",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "user",
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "ad43268e.f8e7a8",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "password",
        "delay": "1000",
        "topic": "password",
        "x": 1060,
        "y": 520,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "32253d22.590092",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Database/Dataset/Topic",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "database",
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "b0545b19.679248",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "DL: Store Selected Server",
        "func": "selectedServer = flow.get('selectedServer', \"memoryOnly\") || {};\nselectedServer[msg.topic] = msg.payload;\nflow.set('selectedServer', selectedServer, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 440,
        "wires": [
            [
                "64f6eefa.c4dea"
            ]
        ]
    },
    {
        "id": "3aafda7e.93a136",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "Storage / CSV",
        "info": "",
        "x": 170,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fb6a1a2d.ca53a8",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "Cloud",
        "info": "",
        "x": 150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d281d54a.530558",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud (IN)",
        "links": [
            "b8424f3b.34841"
        ],
        "x": 115,
        "y": 1460,
        "wires": [
            [
                "4434888c.b22198"
            ]
        ]
    },
    {
        "id": "b84585e9.5f9528",
        "type": "switch",
        "z": "3022fd6.d249f02",
        "name": "",
        "property": "server.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "influxdb",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerbi",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "babelgate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mqtt_emios",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 470,
        "y": 1460,
        "wires": [
            [
                "2261045a.fb24ec"
            ],
            [],
            [],
            [
                "b71097fa.5604c8"
            ],
            [
                "d69200ab.27767"
            ],
            []
        ]
    },
    {
        "id": "6d0b1da2.f7ae44",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "OPERATION",
        "info": "",
        "x": 170,
        "y": 1040,
        "wires": []
    },
    {
        "id": "661e8a2f.797904",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: DIGITAL-IN Request (IN)",
        "links": [
            "2cbdaac3.3caa26"
        ],
        "x": 115,
        "y": 500,
        "wires": [
            [
                "6a59c92a.a17ed8"
            ]
        ]
    },
    {
        "id": "6a59c92a.a17ed8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: DIGITAL-IN Build",
        "func": "var digital_in = msg.item.digital_in;\n\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\n\nif (!digital_in || !translate_io)\n    return null;\n\niopin = translate_io[digital_in.ioname].pin;\nif (!iopin)\n    return null;\n\nmsg.filename =\n    \"/sys/class/gpio/gpio\" + iopin + \"/value\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 500,
        "wires": [
            [
                "9ae4cbe.32aa938"
            ]
        ]
    },
    {
        "id": "709c94fa.4706ec",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "DIGITAL IN",
        "info": "",
        "x": 165,
        "y": 460,
        "wires": []
    },
    {
        "id": "32fa09e2.bf9f96",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: DIGITAL-IN Request (OUT)",
        "links": [
            "30ab35fe.693b6a"
        ],
        "x": 875,
        "y": 500,
        "wires": []
    },
    {
        "id": "9ae4cbe.32aa938",
        "type": "file in",
        "z": "3022fd6.d249f02",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 470,
        "y": 500,
        "wires": [
            [
                "fe9b7ee4.2471c"
            ]
        ]
    },
    {
        "id": "237ad8dc.00fc48",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Dev DIGITAL-IN",
        "func": "if (msg.topic == \"add\") {\n    selectedDevice = { digital_in : {} };\n    enable = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"digital-in\")\n        return null;\n    enable = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedDevice = { digital_in : {} };\n    enable = false;\n}\nelse if (msg.topic == \"save\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"digital-in\")\n        return null;\n    enable = false;\n}\nelse {\n    enable = false;\n    //selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {};\n    selectedDevice = msg.payload.item;\n    if (selectedDevice.type != \"digital-in\")\n        return null;\n\n    selectedDevice.digital_in = msg.payload.item.digital_in || { };\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\n\nmsgIOName = { payload : selectedDevice.digital_in.ioname || \"\", enabled : enable };\n\nreturn msgIOName\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1700,
        "wires": [
            [
                "147ce31a.a0852d"
            ]
        ]
    },
    {
        "id": "109f1471.47a98c",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev DIGITAL-IN",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || { };\nif (!selectedDevice.digital_in)\n    selectedDevice.digital_in = {};\nselectedDevice.digital_in[msg.topic] = msg.payload;\nflow.set('selectedDevice', selectedDevice, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "fe9b7ee4.2471c",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: DIGITAL-IN Process",
        "func": "data = msg.payload[0] - 48;\nmsg.payload = [ data ];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 500,
        "wires": [
            [
                "32fa09e2.bf9f96",
                "c49b32fe.52aed"
            ]
        ]
    },
    {
        "id": "d74f916d.3f3ea",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "ADC",
        "info": "",
        "x": 150,
        "y": 580,
        "wires": []
    },
    {
        "id": "aac29865.9eaa48",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: ADC Request (IN)",
        "links": [
            "fed30a15.b7b538"
        ],
        "x": 115,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4434888c.b22198",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\") || { cloud : {} };\n\n/* Store Changes Only */\nif (msg.meas.send_changes_only) {\n    //node.warn(msg.meas.name + \":\" + msg.changes_only_commit);\n    if (!msg.changes_only_commit) {\n        //node.warn(\"changes_only_commit = false\");\n        return null;\n    }\n}\n\nserverList = dataLogger.cloud.serverList;\nif (!serverList)\n    return null;\n\nmeasServerList = msg.meas.serverList;\nfor (var idx in measServerList) {\n    measServer = measServerList[idx];\n\n    server = serverList[measServer];\n    if ( (!server) || (!server.enabled) )\n        continue;\n\n    msg.server  = server;\n    const msg_snd = RED.util.cloneMessage(msg);\n    node.send(msg_snd);\n}\nnode.done();\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 1460,
        "wires": [
            [
                "b84585e9.5f9528",
                "1901d21d.518c2e"
            ]
        ]
    },
    {
        "id": "c49b32fe.52aed",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: DIGITAL-IN Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 980,
        "y": 460,
        "wires": []
    },
    {
        "id": "7841e653.f71728",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "group": "9b849102.5b534",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reload",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 720,
        "y": 640,
        "wires": [
            [
                "778e7cc1.2cfd14"
            ]
        ]
    },
    {
        "id": "778e7cc1.2cfd14",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: Control RELOAD (OUT)",
        "links": [
            "366d0cff.223644",
            "632568eb.3e71d8",
            "afbe033f.accee"
        ],
        "x": 975,
        "y": 640,
        "wires": []
    },
    {
        "id": "a802456e.cf64c8",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "group": "9b849102.5b534",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Export",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "export",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "9707cfa6.6635"
            ]
        ]
    },
    {
        "id": "a9d4a367.9d42f",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "group": "9b849102.5b534",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Import",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "attach_file",
        "payload": "",
        "payloadType": "str",
        "topic": "import",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "731c2525.b1d17c"
            ]
        ]
    },
    {
        "id": "134c2a81.f27e35",
        "type": "comment",
        "z": "87692da3.99da2",
        "name": "Server List",
        "info": "",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "f80e724.4e2909",
        "type": "comment",
        "z": "87692da3.99da2",
        "name": "Control",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "63955166.49cd8",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "DL: Cloud Control Reload",
        "group": "6fc924.b7d256dc",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Reload",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "reload",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "b2552e94.56a01"
            ]
        ]
    },
    {
        "id": "d06c7ba7.d2aee8",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "d": true,
        "name": "DL: Cloud Control Export",
        "group": "6fc924.b7d256dc",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Export",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "reload",
        "x": 250,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d71c5e60.17ca3",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "d": true,
        "name": "DL: Cloud Control Import",
        "group": "6fc924.b7d256dc",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Import",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "attach_file",
        "payload": "",
        "payloadType": "str",
        "topic": "reload",
        "x": 250,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "40ad3fa.efb21c",
        "type": "link in",
        "z": "87692da3.99da2",
        "name": "DL: Cloud Build List (IN)",
        "links": [
            "b2552e94.56a01"
        ],
        "x": 95,
        "y": 440,
        "wires": [
            [
                "4ed27239.6ea3dc"
            ]
        ]
    },
    {
        "id": "b2552e94.56a01",
        "type": "link out",
        "z": "87692da3.99da2",
        "name": "DL: Cloud Reload (OUT)",
        "links": [
            "40ad3fa.efb21c"
        ],
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "879ba59.70cbc58",
        "type": "ui_text",
        "z": "e045593e.092be8",
        "group": "c52ab030.ec40a",
        "order": 18,
        "width": 0,
        "height": 0,
        "name": "Cloud Servers Label",
        "label": "<H3>Cloud Servers<H3>",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1040,
        "y": 2820,
        "wires": []
    },
    {
        "id": "723b14d9.9d73dc",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Meas-Cloud",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nserverList = dataLogger.cloud.serverList;\nif (!serverList) {\n    msg.payload = [];\n    return msg;\n}\n\nif (msg.topic == \"add\") {\n    selectedMeas = { serverList : [] };\n    enable = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedMeas = flow.get(\"selectedMeas\", \"memoryOnly\");\n    enable = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedMeas = { serverList : [] };\n    enable = false;\n}\nelse if (msg.topic == \"save\") {\n    selectedMeas = flow.get(\"selectedMeas\", \"memoryOnly\");\n    enable = false;\n}\nelse {\n    enable = false;\n    selectedMeas = msg.payload.meas;\n    if (!selectedMeas)\n        return null;\n\n    //selectedMeas.modbus = msg.payload.item.digital_in || { };\n    flow.set('selectedMeas', selectedMeas, \"memoryOnly\");\n}\n\nvar newPayload = [];\nfor (var serverName in serverList) {\n    var server = serverList[serverName];\n\n    if (selectedMeas.serverList)\n        isChecked = selectedMeas.serverList.includes(serverName);\n    else\n        isChecked = false;\n\n    var newLine = {\n        title       : serverName,\n        description : server.description,\n        isChecked   : isChecked,\n        item        : server\n    };\n    newPayload.push(newLine);\n}\n\nmsg.payload = newPayload;\nmsg.enabled = enable;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 2860,
        "wires": [
            [
                "73570287.b52bcc",
                "10f510d0.c2561f"
            ]
        ]
    },
    {
        "id": "73570287.b52bcc",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Select Meas Build ServerList",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 2900,
        "wires": []
    },
    {
        "id": "10f510d0.c2561f",
        "type": "ui_list",
        "z": "e045593e.092be8",
        "group": "c52ab030.ec40a",
        "name": "Cloud Server List",
        "order": 19,
        "width": 5,
        "height": 3,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "x": 1030,
        "y": 2860,
        "wires": [
            [
                "73570287.b52bcc",
                "145aaf02.df43a1"
            ]
        ]
    },
    {
        "id": "145aaf02.df43a1",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Meas-Cloud",
        "func": "selectedMeas = flow.get('selectedMeas', \"memoryOnly\") || {};\nif (!selectedMeas.serverList)\n    selectedMeas.serverList = [];\n\nserverName = msg.payload.title;\nisInList = selectedMeas.serverList.includes(serverName);\n\nif (isInList == msg.payload.isChecked)\n    return null;\n\nif (msg.payload.isChecked)\n    selectedMeas.serverList.push(serverName)\nelse {\n    idx = selectedMeas.serverList.indexOf(serverName);\n    if (idx >= 0)\n        selectedMeas.serverList.splice(idx, 1);\n}\n\nflow.set('selectedMeas', selectedMeas, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "846046b9.d74158",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Device EDIT",
        "group": "49b4254c.5474ec",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "bb1f5059.1cf2e"
            ]
        ]
    },
    {
        "id": "4a56bb93.b49654",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Device ADD",
        "group": "49b4254c.5474ec",
        "order": 11,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "bb1f5059.1cf2e"
            ]
        ]
    },
    {
        "id": "96259b2b.6d1878",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "DL: Enable",
        "label": "Datalogger Enable",
        "tooltip": "",
        "group": "9b849102.5b534",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 750,
        "y": 280,
        "wires": [
            [
                "48a70d25.432d14"
            ]
        ]
    },
    {
        "id": "48a70d25.432d14",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Sch Enabled",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\") || {};\ndataLogger.scheduler.enabled = msg.payload;\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "75857a44.99cc64",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Build Sch Enabled",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\") || { scheduler : { enabled : false } };\nmsg.payload = dataLogger.scheduler.enabled || false;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "96259b2b.6d1878"
            ]
        ]
    },
    {
        "id": "41acdf13.d6982",
        "type": "inject",
        "z": "e045593e.092be8",
        "name": "DL Build Cfg INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "75857a44.99cc64",
                "67d0a052.7a22e"
            ]
        ]
    },
    {
        "id": "2261045a.fb24ec",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud InfluxDB (OUT)",
        "links": [
            "995e4644.0968e8",
            "b6d3e4e4.c03698"
        ],
        "x": 655,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5dd1d959.57ab28",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud FTP (OUT)",
        "links": [
            "dda3c141.14e73"
        ],
        "x": 555,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9d0d1f2.8a45ee",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Meas SAVE",
        "group": "c52ab030.ec40a",
        "order": 20,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 180,
        "y": 2520,
        "wires": [
            [
                "da7c8213.45e9a"
            ]
        ]
    },
    {
        "id": "da3c0932.f0b758",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Meas DEL",
        "group": "c52ab030.ec40a",
        "order": 22,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 180,
        "y": 2560,
        "wires": [
            [
                "da7c8213.45e9a"
            ]
        ]
    },
    {
        "id": "da7c8213.45e9a",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Meas Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null, null ];\n}\nmsgNotify = { };\n\ndataLogger = global.get(\"dataLogger\", \"config\");\nmonitorList = dataLogger.monitor.deviceList;\nselectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {}\nif (!selectedDevice)\n    return [ null, null, null ];\n\nselectedMeas = flow.get('selectedMeas', \"memoryOnly\");\nif (!selectedMeas)\n    return [ null, null, null ];\n\nfield_list = {\n    name        : { type : \"string\", name : \"Name\", regex : /^[a-zA-Z0-9_]{1,20}$/i },\n    description : { type : \"string\", name : \"Description\", regex : /^[a-zA-Z0-9_\\- ;:.]{0,40}$/i },\n    ID          : { type : \"string\", name : \"ID\", regex : /^[a-zA-Z0-9_\\-;:.]{1,20}$/i },\n};\n\nglobalFuns = global.get(\"globalFuns\");\n\n/************************************\n * Validate SAVE MEAS\n ************************************/\nfunction validate_save_meas_params()\n{\n    return globalFuns.validate_fields(field_list, selectedMeas);\n}\n\nif (msg.topic == 'save') {\n    msgNotify.topic = \"Save Measurement\";\n    result = validate_save_meas_params();\n    if (result.status !== 0) {\n        msgNotify.payload = result.error;\n        return [ null, null, msgNotify ];\n    }\n\n    //selectedDevice.measList[selectedMeas.name] = selectedMeas;\n    selectedDevice.measList[selectedMeas.name] = {};\n    Object.assign(selectedDevice.measList[selectedMeas.name], selectedMeas);\n    msgNotify.payload = selectedMeas.name + \" saved OK\";\n}\nelse if (msg.topic == 'del') {\n    msgNotify.topic   = \"Delete Measurement\";\n    msgNotify.payload = selectedMeas.name + \" deleted\";\n\n    if (selectedDevice.measList[selectedMeas.name])\n        delete(selectedDevice.measList[selectedMeas.name]);\n    dataLoggerStatus = global.get(\"dataLoggerStatus\");\n    if ( dataLoggerStatus && dataLoggerStatus.monitor && dataLoggerStatus.monitor[selectedDevice.name] &&\n         dataLoggerStatus.monitor[selectedDevice.name].measList &&\n         dataLoggerStatus.monitor[selectedDevice.name].measList[selectedMeas.name] ) {\n        delete(dataLoggerStatus.monitor[selectedDevice.name].measList[selectedMeas.name]);\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    }\n    msgNotify.payload = selectedMeas.name + \" deleted\";\n}\nelse { /* No deberia entrar nunca por aqui */\n    msgNotify.topic   = \"Invalid action\";\n    msgNotify.payload = selectedMeas.name;\n    return [ null, null, msgNotify ];\n}\n\n//dataLogger.monitor.deviceList[selectedDevice.name] = selectedDevice;\ndataLogger.monitor.deviceList[selectedDevice.name] = {};\nObject.assign(dataLogger.monitor.deviceList[selectedDevice.name], selectedDevice)\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nmsgCtl = { topic : msg.topic };\nmsg.notify = { topic : msgNotify.topic, payload : msgNotify.payload };\nmsg.selectedDevice = selectedDevice;\n\nreturn [ msgCtl, msg, msgNotify ];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2500,
        "wires": [
            [
                "2a1f3bd0.a2cf14"
            ],
            [
                "befac04d.21067",
                "b44ae5c7.f170a8"
            ],
            [
                "691936a6.7c9d38"
            ]
        ]
    },
    {
        "id": "cc2dc19.f7eb74",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Meas EDIT",
        "group": "c52ab030.ec40a",
        "order": 21,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 180,
        "y": 2480,
        "wires": [
            [
                "da7c8213.45e9a"
            ]
        ]
    },
    {
        "id": "62bd5f68.a4171",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "DL: Meas ADD",
        "group": "c52ab030.ec40a",
        "order": 23,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 180,
        "y": 2440,
        "wires": [
            [
                "da7c8213.45e9a"
            ]
        ]
    },
    {
        "id": "2bb3d86.e094028",
        "type": "ui_switch",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "CSV Storage Enable",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enabled",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 720,
        "y": 300,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "5f4bef69.9ebb4",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "label": "Maximum File Size (KB)",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "max_file_size",
        "x": 730,
        "y": 340,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "2a7d4e46.053c62",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "label": "Maximum Number of Entries in File",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "max_file_lines",
        "x": 760,
        "y": 380,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "4744915c.d6804",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: Storage (IN)",
        "links": [
            "b8424f3b.34841"
        ],
        "x": 115,
        "y": 1260,
        "wires": [
            [
                "51e29026.0d2a5"
            ]
        ]
    },
    {
        "id": "e51caedb.5020a",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Storage CSV (FilePerMeas)",
        "func": "/******************************************************/\n/** Obtener la proxima hora de expiracion\n *  @return Proxima hora de expiracion en miliseconds Epoch\n */\nfunction get_next_expires(csvConf, ts) \n{\n    last_day_time = new Date(ts);\n    last_day_time.setUTCHours(23);\n    last_day_time.setUTCMinutes(59);\n    last_day_time.setUTCSeconds(59);\n\n    ms      = ts.getTime() + csvConf.period * 1000;\n    resto   = ms % (csvConf.period * 1000);\n    next_expires = ms - resto;\n    if (next_expires > last_day_time.getTime())\n        next_expires = last_day_time.getTime();\n\n    return next_expires;\n}\n\n/******************************************************/\n/** Consulta si el timestamp esta expirado\n *  @return true/false\n */\nfunction is_expired(csvStatus, ts) \n{\n    if ( (!csvStatus.expires) || (csvStatus.expires < ts.getTime()) )\n        return true;\n    return false;\n}\n\n/******************************************************/\n/** Obtener la hora en distintos formatos en funcion de\n *  la configuracion\n */\nfunction get_time(csvConf, ts) \n{\n    if (csvConf.date_format == \"iso\")\n        return ts.toISOString();\n    else if (csvConf.date_format == \"amd\") {\n        try {\n            return ts.getUTCFullYear() + \"-\" +\n                String(ts.getUTCMonth() + 1).padStart(2, \"0\") + \"-\" +\n                ts.getUTCDate().toString().padStart(2, \"0\") + \" \" +\n                ts.getUTCHours().toString().padStart(2, \"0\") + \":\" +\n                ts.getUTCMinutes().toString().padStart(2, \"0\") + \":\" +\n                ts.getUTCSeconds().toString().padStart(2, \"0\");\n        }\n        catch(e) { return 0; }\n    }\n    else if (csvConf.date_format == \"epoch\")\n        return ts.getTime() / 1000;\n    else\n        return \"Invalid format\";\n}\n\n/******************************************************/\n/** Obtener la hora que aparece en el 'filename'\n */\nfunction get_filename_time(csvConf, ts)\n{\n    // Obtenemos un timestamp redondeado al csvConf.period\n    ms      = ts.getTime()\n    resto   = ms % (csvConf.period * 1000);\n    roundts = new Date(ms - resto);\n    \n    return roundts.getUTCFullYear() +\n        String(roundts.getUTCMonth() + 1).padStart(2, \"0\") +\n        roundts.getUTCDate().toString().padStart(2, \"0\") +\n        roundts.getUTCHours().toString().padStart(2, \"0\") +\n        roundts.getUTCMinutes().toString().padStart(2, \"0\") +\n        roundts.getUTCSeconds().toString().padStart(2, \"0\");\n}\n\n/******************************************************/\n/** Obtener el dia en formato AAAAMMDD\n */\nfunction get_dirname(ts)\n{\n    return ts.getUTCFullYear() +\n        String(ts.getUTCMonth() + 1).padStart(2, \"0\") +\n        ts.getUTCDate().toString().padStart(2, \"0\");\n}\n\n/* Inicializacion de valores */\nglobalFuns = global.get(\"globalFuns\");\ndataLogger          = global.get(\"dataLogger\", \"config\");\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLoggerStatus    = global.get(\"dataLoggerStatus\");\nif ( (!dataLogger) || (!dataLoggerInternals) || (!dataLoggerStatus) ||\n     /*(!dataLogger.storage.enabled) ||*/\n     (!dataLogger.storage) || (!dataLogger.storage.csv) ||\n     (!dataLogger.storage.csv.enabled) )\n    return [ null, null ];\n\ncsv          = dataLogger.storage.csv;\ncsvStatus    = dataLoggerStatus.storage.csv || { partnum : 0 };\ncsvInternals = dataLoggerInternals.storage.csv;\nif (!csvInternals)\n    return [ null, null ];\nif (csv.file_strategy != \"measfile\")\n    return [ null, null ];\nif (!csvStatus.partnum)\n    csvStatus.partnum = 0;\n\ndevice = msg.item;\nmeas   = msg.meas;\nif ( (!device) || (!meas) )\n    return [ null, null ];\n\nif (!meas.csv_enabled)\n    return [ null, null ];\n\n/* Timestamp & value */\ntimestamp = msg.timestamp;\nvalue     = msg.payload;\n\n/* Store Changes Only */\nif (meas.store_changes_only) {\n    //node.warn(meas.name + \":\" + msg.changes_only_commit);\n    if (!msg.changes_only_commit) {\n        //node.warn(\"changes_only_commit = false\");\n        return [ null, null ];\n    }\n}\n\n/* Current File List */\ncurrentCSVList = csvStatus.currentFileList || {};\n\n/** Build CSV Data */\nmsg.payload = [\n    //now.toUTCString(),\n    get_time(csv, timestamp),\n    device.name,\n    //device.type,\n    device.model,\n    device.version,\n    device.serial,\n    meas.name,\n    meas.type,\n    meas.ID,\n    value,\n    meas.units\n];\n\nfilename_prefix = \"\";\nif (csv.filename_prefix)\n    filename_prefix =  csv.filename_prefix + \"-\";\nfilename_prefix += meas.ID + \"-\";\n\nexpired = is_expired(csvStatus, timestamp);\nglobalFuns.tlnt_log(6, \"DataLogger:CSV\", \"Meas:\" + meas.name + \n        \" prefix:\" + filename_prefix + \n        \" current_dirname:\" + csvStatus.current_dirname + \n        \" expired:\" + expired);\n\nsendFTP = false;\ncp = globalFuns.loadModule(\"child_process\");\nif (expired) {\n    /* Calculate new expiration time */\n    expires = get_next_expires(csv, timestamp);\n    csvStatus.expires_ts  = new Date(expires);\n    csvStatus.expires     = expires;\n    csvStatus.expires_str = csvStatus.expires_ts.toUTCString();\n    csvStatus.current_dirname   = get_dirname(csvStatus.expires_ts);\n    csvStatus.current_timestamp = timestamp.getTime();\n    csvStatus.current_filename  = get_filename_time(csv, timestamp);\n    cp.execSync(\"mkdir -p \" + csvInternals.path + \"/current/\" + csvStatus.current_dirname);\n    cp.execSync(\"mkdir -p \" + csvInternals.path + \"/pending/\" + csvStatus.current_dirname);\n    cp.execSync(\"mkdir -p \" + csvInternals.path + \"/history/\" + csvStatus.current_dirname);\n\n    globalFuns.tlnt_log(3, \"Datalogger\", \"Storage CSV: New Expiration Time:\" + csvStatus.expires_ts + \n                \" filename:\" + csvStatus.current_filename);\n}\nbasename = filename_prefix + csvStatus.current_filename + \"-\" + csvStatus.partnum + \".csv\";\nfullname = csvStatus.current_dirname + \"/\" + basename;\n\nif (!currentCSVList[meas.name]) {\n    currentCSVList[meas.name] = {\n        type       : csv.file_strategy,\n        devName    : device.name,\n        measName   : meas.name,\n        lines      : 0\n    };\n}\nif (currentCSVList[meas.name].fullname != fullname) {\n    /* Move file: current -> pending */\n    if (currentCSVList[meas.name].fullname) {\n        globalFuns.tlnt_log(3, \"DataLogger:CSV\", \"Moving Expired file \" + currentCSVList[meas.name].fullname)\n        try {\n            target_dir = csvInternals.path + \"/pending/\" + currentCSVList[meas.name].dirname + \"/\";\n            cp.execSync(\"mkdir -p \" + target_dir);\n            cp.execSync(\"mv \" + csvInternals.path + \"/current/\" + currentCSVList[meas.name].fullname + \" \" + \n                            target_dir);\n        }\n        catch (e) {\n            globalFuns.tlnt_log(1, \"DataLogger:CSV\", \"Error moving expired file \" + currentCSVList[meas.name].fullname)\n        }\n    }\n    else\n        globalFuns.tlnt_log(3, \"DataLogger:CSV\", \"Expired meas \" + meas.name)\n\n    currentCSVList[meas.name].lines    = 0;\n    currentCSVList[meas.name].fullname = fullname;\n    currentCSVList[meas.name].basename = basename;\n    currentCSVList[meas.name].dirname  = csvStatus.current_dirname;\n}\n\ncurrentCSVList[meas.name].lines++;\n\ncsvStatus.currentFileList = currentCSVList;\ndataLoggerStatus.storage.csv = csvStatus;\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nmsg.filename = csvInternals.path + \"/current/\" + fullname;\nmsg.devName  = device.name;\nmsg.measName = meas.name;\n\nglobalFuns.tlnt_log(5, \"DataLogger:CSV\", \"Processing file \" + fullname)\n\nif (sendFTP) {\n    msg.basename = old_basename;\n    return [ msg, msg ];\n}\nelse\n    return [ msg, null ];\n\nglobalFuns.tlnt_log(1, \"DataLogger:CSV\", \"We should never get here!!\");\n\nreturn null;\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1300,
        "wires": [
            [
                "8c9f6ac5.319698"
            ],
            [
                "5dd1d959.57ab28"
            ]
        ]
    },
    {
        "id": "8c9f6ac5.319698",
        "type": "csv",
        "z": "3022fd6.d249f02",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": false,
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "7ae20eaf.4c676",
                "9a28a2fb.ce349"
            ]
        ]
    },
    {
        "id": "5d3ed58c.c6656c",
        "type": "function",
        "z": "8d3fdd64.90dd2",
        "name": "API: Validate Key",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\nhttp_key = global.get('http_key');\n\nif ( (http_key === undefined) ||\n     (msg.payload.key != http_key.key) ) {\n    msg.statusCode = 400;\n    msg.payload = { \"error\" : \"Invalid Key\" };\n    return [ null, msg ];\n}\nelse if (http_key.expires < now) {\n    msg.statusCode = 401;\n    msg.payload = { \"error\" : \"Expired Key\" };\n    return [ null, msg ];\n}\n\nmsg.request    = msg.payload;\nmsg.payload    = {};\nmsg.statusCode = 200;\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "b8ed7b40.6251c8"
            ],
            [
                "a400c4b2.c3f7c8"
            ]
        ]
    },
    {
        "id": "45de3d0b.7f8974",
        "type": "http in",
        "z": "8d3fdd64.90dd2",
        "name": "",
        "url": "/datalogger/action",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "5d3ed58c.c6656c"
            ]
        ]
    },
    {
        "id": "b8ed7b40.6251c8",
        "type": "switch",
        "z": "8d3fdd64.90dd2",
        "name": "API: Check action",
        "property": "request.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "io-set",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "exec",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "apt",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "53ba5c6d.545ce4"
            ],
            [
                "f9d41ed7.07805"
            ],
            [
                "ac75942.47d6868"
            ],
            [
                "c1eea1ba.44318"
            ]
        ]
    },
    {
        "id": "a400c4b2.c3f7c8",
        "type": "link out",
        "z": "8d3fdd64.90dd2",
        "name": "API: HTTP Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "c1eea1ba.44318",
        "type": "change",
        "z": "8d3fdd64.90dd2",
        "name": "API: Invalid Action",
        "rules": [
            {
                "t": "set",
                "p": "payload.error",
                "pt": "msg",
                "to": "Invalid Action",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "403",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "8ad8c026.ff0a8"
            ]
        ]
    },
    {
        "id": "53ba5c6d.545ce4",
        "type": "function",
        "z": "8d3fdd64.90dd2",
        "name": "API: Action 'io-set'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif ( (msg.request.io === undefined) ||\n     (msg.request.value === undefined) ) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return0 [ null, msg ];\n}\n\nmsg.statusCode = 200;\nmsg.payload    = {};\n\nreturn [ msg, msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 80,
        "wires": [
            [
                "717d23b8.6e353c"
            ],
            [
                "717d23b8.6e353c"
            ]
        ]
    },
    {
        "id": "f9d41ed7.07805",
        "type": "function",
        "z": "8d3fdd64.90dd2",
        "name": "API: Action 'exec'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif ( (msg.request.cmd === undefined) ||\n     (msg.request.args === undefined) ) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return [ null, msg ];\n}\n\nmsg.payload = msg.request.cmd + \" \" + msg.request.args;\n\nreturn [ msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 160,
        "wires": [
            [],
            [
                "7b1cac91.cdbb14"
            ]
        ]
    },
    {
        "id": "ac75942.47d6868",
        "type": "function",
        "z": "8d3fdd64.90dd2",
        "name": "API: Action 'apt'",
        "func": "// Timestamp en segundos\nnow = Math.floor(new Date().getTime() / 1000);\n\n// Validacion de parametros\nif (msg.request.cmd === undefined) {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Missing arguments\" };\n    return [ null, msg ];\n}\n\nif ( ( (msg.request.cmd == 'install') ||\n       (msg.request.cmd == 'remove') ) &&\n     ( msg.request.packages !== undefined ) ) {\n    msg.payload = \"apt \" + msg.request.cmd + \" \" + msg.request.packages;\n}\nelse if ( (msg.request.cmd == 'list') &&\n          (msg.request.args !== undefined) ) {\n    msg.payload = \"apt \" + msg.request.cmd + \" \" + msg.request.args;\n}\nelse {\n    msg.statusCode = 402;\n    msg.payload = { \"error\" : \"Invalid arguments\" };\n    return [ null, msg ];\n}\n\n\nreturn [ msg, null ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 240,
        "wires": [
            [],
            [
                "f506fbd6.550c78"
            ]
        ]
    },
    {
        "id": "717d23b8.6e353c",
        "type": "link out",
        "z": "8d3fdd64.90dd2",
        "name": "DL: API Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1055,
        "y": 100,
        "wires": []
    },
    {
        "id": "499618f9.c46bc8",
        "type": "comment",
        "z": "8d3fdd64.90dd2",
        "name": "DL API: /datalogger/action",
        "info": "200: OK\n400: Invalid Key\n401: Expired Key\n402: Missing Arguments\n403: Invalid Action\n404: Invalid Arguments",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "7b1cac91.cdbb14",
        "type": "link out",
        "z": "8d3fdd64.90dd2",
        "name": "DL: API Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1055,
        "y": 180,
        "wires": []
    },
    {
        "id": "f506fbd6.550c78",
        "type": "link out",
        "z": "8d3fdd64.90dd2",
        "name": "DL: API Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1055,
        "y": 260,
        "wires": []
    },
    {
        "id": "8ad8c026.ff0a8",
        "type": "link out",
        "z": "8d3fdd64.90dd2",
        "name": "DL: API Answer (OUT)",
        "links": [
            "e8e1ad32.048f"
        ],
        "x": 1055,
        "y": 320,
        "wires": []
    },
    {
        "id": "25ce2e0c.7db212",
        "type": "http in",
        "z": "8d3fdd64.90dd2",
        "name": "",
        "url": "/datalogger/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "9a28a2fb.ce349",
        "type": "file",
        "z": "3022fd6.d249f02",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "ascii",
        "x": 830,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "fde88840.318c58",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "Startup",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "c532998b.9af2b8",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "Inject DL Startup INIT [0s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "b5f71a4a.2762d8"
            ]
        ]
    },
    {
        "id": "b5f71a4a.2762d8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Startup",
        "func": "fs = global.get(\"fs\");\n\n/* DataLogger Internals */\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\nif (!dataLoggerInternals) {\n    dataLoggerInternals = {\n        config : {\n            path: \"/root/.node-red/httpStatic/datalogger/conf\",\n        },\n        storage : {\n            csv : {\n                path : \"/datalogger/csv\",\n            }\n        }\n    }\n    global.set(\"dataLoggerInternals\", dataLoggerInternals, \"config\");\n}\n\n/* dataLogger Configuration */\nupdate_config = false;\ndataLogger = global.get(\"dataLogger\", \"config\") || { };\nif (!dataLogger.scheduler) {\n    dataLogger.scheduler = {\n        enabled : false,\n    };\n    update_config = true;\n}\nif (!dataLogger.storage) {\n    dataLogger.storage = {\n        enabled : false,\n        csv : {\n            /* Config */\n            enabled        : false,\n            max_file_size  : 100,\n            max_file_lines : 1000,\n            period         : 15 * 60,   // 900s\n            delete_older_than : 60,     // 60 days\n            file_strategy  : \"measfile\",\n            date_format    : \"amd\"\n        }\n    };\n    update_config = true;\n}\nif (!dataLogger.monitor) {\n    dataLogger.monitor = {\n        deviceList : { }\n    };\n    update_config = true;\n}\nif (!dataLogger.cloud) {\n    dataLogger.cloud = {\n        serverList : { }\n    };\n    update_config = true;\n}\nif (!dataLogger.graphs) {\n    dataLogger.graphs = {\n        graphList : []\n    }\n    update_config = true;\n}\n\nif (update_config)\n    global.set(\"dataLogger\", dataLogger, \"config\");\n\n\n/* DataLogger Status */\nupdate_status = false;\ndataLoggerStatus = global.get(\"dataLoggerStatus\") || { };\nif (!dataLoggerStatus.scheduler) {\n    dataLoggerStatus.scheduler = { }\n    update_status = true;\n}\nif (!dataLoggerStatus.storage) {\n    dataLoggerStatus.storage = {\n        csv : {\n            currentFileList : {},\n            /* Status */\n            expires          : 0,\n            current_filename : \"\",\n            partnum          : 0\n        }\n    };\n    update_status = true;\n}\nif (!dataLoggerStatus.monitor) {\n    dataLoggerStatus.monitor = {\n        deviceList : { }\n    };\n    update_status = true;\n}\nif (!dataLoggerStatus.cloud) {\n    dataLoggerStatus.cloud = {\n        serverList : { }\n    };\n    update_status = true;\n}\nif (!dataLoggerStatus.graphs) {\n    dataLoggerStatus.graphs = {\n        graphList : []\n    };\n    update_status = true;\n}\nif (update_status)\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n\ntry {\n    cp.execSync(\"mkdir -p \" + dataLoggerInternals.config.path);\n}\ncatch (e) {\n    node.warn(\"DL Startup: WARNING creating \" + dataLoggerInternals.config.path);\n}\n\ntry {\n    cp.execSync(\"ln -sf \" + dataLoggerInternals.storage.csv.path + \" /root/.node-red/httpStatic/datalogger/csv\");\n}\ncatch (e) {\n    node.warn(\"DL Startup: WARNING creating symlink /root/.node-red/httpStatic/datalogger/csv\");\n}\n\ntry {\n    fs.mkdirSync(dataLoggerInternals.storage.csv.path, { recursive : true });\n    fs.mkdirSync(dataLoggerInternals.storage.csv.path + \"/current\", { recursive : true });\n    fs.mkdirSync(dataLoggerInternals.storage.csv.path + \"/pending\", { recursive : true });\n    fs.mkdirSync(dataLoggerInternals.storage.csv.path + \"/history\", { recursive : true });\n}\ncatch (e) {\n    node.warn(\"DL Startup: WARNING creating CSV dirs: \" + e);\n}\n\ntry {\n    fs.symlinkSync(dataLoggerInternals.config.path, \"/datalogger/conf\");\n}\ncatch (e) {\n    node.warn(\"DL Startup: WARNING creating conf link\");\n}\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc15a4d.888be4",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "Period (seconds)",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "period",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "7ae20eaf.4c676",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Storage CSV",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 890,
        "y": 1220,
        "wires": []
    },
    {
        "id": "8bd4d847.5c79e8",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Read",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nif (!dataLogger)\n    return null;\n\nenable = true;\ncsv = dataLogger.storage.csv;\n\nmsgEnable    = { payload : csv.enabled || false, enabled : enable };\nmsgMaxSize   = { payload : csv.max_file_size || 0, enabled : enable };\nmsgMaxLines  = { payload : csv.max_file_lines || 0, enabled : enable };\nmsgPeriod    = { payload : csv.period || 15 * 60, enabled : enable };\nmsgDeleteOld = { payload : csv.delete_older_than || \"\", enabled : enable };\nmsgFileStrategy = { payload : csv.file_strategy || \"measfile\", enabled : enable };\nmsgFilePrefix   = { payload : csv.filename_prefix || \"\", enabled : enable };\nmsgDateFormat   = { payload : csv.date_format || \"amd\", enabled : enable };\nmsgFtpPolicy      = { payload : csv.ftp_policy || \"1\", enabled : enable };\nmsgFtpRetryPeriod = { payload : csv.ftp_retry_period || 5, enabled : enable };\n\nreturn [\n    msgEnable, \n    msgMaxSize, \n    msgMaxLines, \n    msgPeriod,\n    msgDeleteOld,\n    msgFileStrategy,\n    msgFilePrefix,\n    msgDateFormat,\n    msgFtpPolicy,\n    msgFtpRetryPeriod\n];\n",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 540,
        "wires": [
            [
                "2bb3d86.e094028"
            ],
            [
                "5f4bef69.9ebb4"
            ],
            [
                "2a7d4e46.053c62"
            ],
            [
                "4cc15a4d.888be4"
            ],
            [
                "c8965e89.5ef32"
            ],
            [
                "8db06b96.689218"
            ],
            [
                "d13f94b5.41d1a8"
            ],
            [
                "14cfa55c.896d8b"
            ],
            [
                "b1b4fb42.5f2818"
            ],
            [
                "52153c26.3d5c54"
            ]
        ]
    },
    {
        "id": "20714403.bec23c",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Set",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\nif (!dataLogger)\n    return null;\n\ndataLogger.storage.csv[msg.topic] = msg.payload;\n\nif (msg.topic == \"period\") {\n    try {\n        dataLoggerStatus = global.get(\"dataLoggerStatus\");\n        dataLoggerStatus.storage.csv.expires = 0;\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n    }\n    catch(e) {}\n}\n\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "a4aac7fb.a8cd78",
        "type": "inject",
        "z": "857c3f85.fb474",
        "name": "DL Storage inject INIT [2s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "8bd4d847.5c79e8"
            ]
        ]
    },
    {
        "id": "2d313fe8.4d9e5",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: CSV Status",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus || !dataLoggerStatus.storage || !dataLoggerStatus.storage.csv)\n    return null;\n\ncsv = dataLoggerStatus.storage.csv;\n\nmsgDir     = { payload : csv.current_dirname || \"\" }\nmsgFile    = { payload : csv.current_filename || \"\" };\nmsgExpires = { payload : csv.expires_str || \"\" };\nmsgListFiles = { options : Object.keys(csv.currentFileList) }\n\nreturn [\n    msgDir,\n    msgFile, \n    msgExpires,\n    msgListFiles\n];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 900,
        "wires": [
            [
                "b1cf0115.e5017"
            ],
            [
                "16492cbf.10edc3"
            ],
            [
                "f60a94f7.920bf8"
            ],
            [
                "163aa947.bbd877"
            ]
        ]
    },
    {
        "id": "1a1fdb41.1354f5",
        "type": "inject",
        "z": "857c3f85.fb474",
        "name": "DL Storage CSV Status Inject (60s) [3s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "2d313fe8.4d9e5"
            ]
        ]
    },
    {
        "id": "f60a94f7.920bf8",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Next Expiration Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 720,
        "y": 920,
        "wires": []
    },
    {
        "id": "16492cbf.10edc3",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current File Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 710,
        "y": 880,
        "wires": []
    },
    {
        "id": "7bf09025.82912",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "f0ae0529.e2f7a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "restore",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 170,
        "y": 840,
        "wires": [
            [
                "7f2070e6.76a26"
            ]
        ]
    },
    {
        "id": "7f2070e6.76a26",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Reset",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus)\n    return null;\n\n\ndataLoggerStatus.storage.csv.current_timestamp = new Date(0);\ndataLoggerStatus.storage.csv.current_filename  = \"\";\ndataLoggerStatus.storage.csv.partnum = 0;\ndataLoggerStatus.storage.csv.expires = 0;\n\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "2d313fe8.4d9e5"
            ]
        ]
    },
    {
        "id": "8ecca662.761038",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>History</B>: Number of Files",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 920,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1e394a66.def8c6",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "CSV Usage",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 850,
        "y": 1520,
        "wires": []
    },
    {
        "id": "2ba60c9b.0de364",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Disk Usage",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 850,
        "y": 1560,
        "wires": []
    },
    {
        "id": "c6f419c1.f3bca8",
        "type": "Drives",
        "z": "857c3f85.fb474",
        "name": "",
        "x": 310,
        "y": 1360,
        "wires": [
            [
                "5d543bc7.f33d04",
                "13d46bef.2f22d4"
            ]
        ]
    },
    {
        "id": "206e4405.5a34cc",
        "type": "inject",
        "z": "857c3f85.fb474",
        "name": "DL Storage Usage Inject (60s) [3s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "c6f419c1.f3bca8"
            ]
        ]
    },
    {
        "id": "13d46bef.2f22d4",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Usage",
        "func": "cp = global.get(\"child_process\")\n\n/*****************************************************/\n/*\n *****************************************************/\nfunction read_num_files(directory)\n{\n    result = cp.execSync(\"find \" + directory + \" | wc -l\", { encoding : \"ascii\" });\n    nfiles = result.trimRight(\"\\n\");\n    //node.warn(\"rad_num_files: \" + directory + \":\" + nfiles)\n    return nfiles;\n}\n\n/*****************************************************/\n/*\n *****************************************************/\nfunction get_dir_size(directory)\n{\n    result = cp.execSync(\"du -sh \" + directory, { encoding : \"ascii\" });\n    size = result.split(\"\\t\")[0];\n    //node.warn(\"get_dir_size: \" + directory + \":\" + size)\n    return size;\n}\n\n\n/*****************************************************/\n/*****************************************************/\nfs = global.get('fs');\n\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLoggerStatus    = global.get(\"dataLoggerStatus\");\nif (!dataLoggerInternals || !dataLoggerStatus)\n    return null;\n\ncsv = dataLoggerInternals.storage.csv;\n\ndisk_usage = \"<Unknown>\";\nfor (var idx in msg.payload) {\n    if (msg.payload[idx].mount == \"/\") {\n        disk_usage = Math.floor(100 * msg.payload[idx].used / msg.payload[idx].size);\n        disk_status_str = \n            Math.floor(msg.payload[idx].used / 1024) + \"MB / \" +\n            Math.floor(msg.payload[idx].size / 1024) + \"MB (\" +\n            disk_usage + \"%)\";\n        \n        break;\n    }\n}\n\nhistoryDirs = fs.readdirSync(csv.path + \"/history\");\npendingDirs = fs.readdirSync(csv.path + \"/pending\");\ncurrentDirs = fs.readdirSync(csv.path + \"/current\");\n\nmsgHistNumDirs  = { payload : historyDirs.length };\nmsgHistNumFiles = { payload : read_num_files(csv.path + \"/history\") - historyDirs.length - 1 };\nmsgHistSize     = { payload : get_dir_size(csv.path + \"/history\")};\n\nmsgPendNumDirs  = { payload : pendingDirs.length };\nmsgPendNumFiles = { payload : read_num_files(csv.path + \"/pending\") - pendingDirs.length - 1 };\nmsgPendSize     = { payload : get_dir_size(csv.path + \"/pending\")};\n\nmsgCurrNumDirs  = { payload : currentDirs.length };\nmsgCurrNumFiles = { payload : read_num_files(csv.path + \"/current\") - currentDirs.length - 1 };\nmsgCurrSize     = { payload : get_dir_size(csv.path + \"/current\")};\n\nmsgCSVUsage     = { payload : get_dir_size(csv.path) };\nmsgDiskUsageStr = { payload : disk_status_str };\nmsgDiskUsage    = { payload : disk_usage };\n    \nreturn [\n    msgHistNumDirs,\n    msgHistNumFiles,\n    msgHistSize,\n    msgPendNumDirs,\n    msgPendNumFiles,\n    msgPendSize,\n    msgCurrNumDirs,\n    msgCurrNumFiles,\n    msgCurrSize,\n    msgCSVUsage, \n    msgDiskUsageStr,\n    msgDiskUsage,\n    null\n];\n\n\ncsvSelect = flow.get(\"csvSelect\", \"memoryOnly\") || {};\n\nnewPayload = [];\nfor (idx in csvdir) {\n    var newLine = {\n        title : csvdir[idx],\n        description : \"\",\n        isChecked : csvSelect[csvdir[idx]] || false,\n    };\n    newPayload.push(newLine);\n}\nmsgCSVList   = { payload : newPayload };\n",
        "outputs": 13,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "ff435aee.5ad5c8"
            ],
            [
                "8ecca662.761038"
            ],
            [
                "5bf3ab02.42f6c4"
            ],
            [
                "37bf1264.7598ae"
            ],
            [
                "e6ff65d6.ead8a8"
            ],
            [
                "9f883c9d.f0bec"
            ],
            [
                "3920378e.09fb08"
            ],
            [
                "861c6460.ab74d8"
            ],
            [
                "df4d10c1.02ec6"
            ],
            [
                "1e394a66.def8c6"
            ],
            [
                "2ba60c9b.0de364"
            ],
            [
                "6cac829b.9d2a8c"
            ],
            []
        ]
    },
    {
        "id": "5d543bc7.f33d04",
        "type": "debug",
        "z": "857c3f85.fb474",
        "name": "DBG: DL Drives",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 440,
        "y": 1220,
        "wires": []
    },
    {
        "id": "c8965e89.5ef32",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "Delete files older than (days)",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "delete_older_than",
        "x": 740,
        "y": 460,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "345ac97b.fad926",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "group": "4b8f01ce.69f01",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Export",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 230,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "bd9420da.167d5",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "4b8f01ce.69f01",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Selected",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 220,
        "y": 1980,
        "wires": [
            [
                "2973111f.91670e"
            ]
        ]
    },
    {
        "id": "47def87e.c5c498",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "4b8f01ce.69f01",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete All",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete_forever",
        "payload": "Are you sure you want to delete all CSV files?",
        "payloadType": "str",
        "topic": "Delete all CSV Files",
        "x": 220,
        "y": 2020,
        "wires": [
            [
                "fca34b9e.346438"
            ]
        ]
    },
    {
        "id": "6cac829b.9d2a8c",
        "type": "ui_gauge",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "668b55e.b379cac",
        "order": 13,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Disk Usage",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "70",
        "seg2": "90",
        "x": 850,
        "y": 1600,
        "wires": []
    },
    {
        "id": "2973111f.91670e",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Delete File Actions",
        "func": "tlntSettings = global.get('tlntSettings');\ncp = tlntSettings.loadModule('child_process');\ncsvSelect = flow.get(\"csvSelect\", \"memoryOnly\");\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\nif (!dataLoggerInternals)\n    return null;\nfs = global.get('fs');\n\nif (msg.topic == \"del\") {\n    msg.topic   = \"Delete Selected File\";\n    if (!csvSelect) {\n        msg.payload = \"ERROR: A file must be selected first.\";\n        return msg;\n    }\n\n    try {\n        fs.unlinkSync(dataLoggerInternals.storage.csv.path + \"/\" + csvSelect);\n        flow.set(\"csvSelect\", null, \"memoryOnly\");\n        msg.payload = \"OK\";\n    }\n    catch (e) {\n        node.warn(e);\n        msg.payload = \"ERROR: File does not exist\";\n    }\n}\nelse if (msg.topic == \"Delete all CSV Files\") {\n    if (msg.payload == \"OK\") {\n        csv_path = dataLoggerInternals.storage.csv.path;\n        cp.execSync(\"rm -fR \" + csv_path + \"/*\");\n        cp.execSync(\"mkdir -p \" + csv_path + \"/pending\");\n        cp.execSync(\"mkdir -p \" + csv_path + \"/current\");\n        cp.execSync(\"mkdir -p \" + csv_path + \"/history\");\n        \n        dataLoggerStatus = global.get(\"dataLoggerStatus\");\n        dataLoggerStatus.storage.csv.currentFileList = {};\n        global.set(\"dataLoggerStatus\", dataLoggerStatus);\n        \n        //fs.unlinkSync(dataLoggerInternals.storage.csv.path + \"/*\");\n        msg.topic   = \"Delete All Files\";\n        msg.payload = \"OK\";\n        flow.set(\"csvSelect\", undefined, \"memoryOnly\");\n    }\n    else\n        return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 2000,
        "wires": [
            [
                "77c576f5.eef218",
                "9bb93621.eb5728",
                "d71666bd.046538"
            ]
        ]
    },
    {
        "id": "9707cfa6.6635",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "",
        "func": "//fs = global.get(\"fs\");\ndataLogger  = global.get(\"dataLogger\", \"config\") || {};\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\") || {};\n\nmsg.filename = \"/datalogger/conf/dataLogger.conf\";\nmsg.payload = {\n    action : \"override\",\n    data   : {\n        dataLogger  : dataLogger,\n        bbgtAgtCfg  : bbgtAgtCfg,\n    }\n};\n\n//fs.writeFileSync(, dataLogger, \"ascii\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "7432da18.6c7094",
                "7f7982b0.0a76ac"
            ]
        ]
    },
    {
        "id": "7432da18.6c7094",
        "type": "file",
        "z": "e045593e.092be8",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "7f7982b0.0a76ac",
                "529a3c4e.245304"
            ]
        ]
    },
    {
        "id": "7f7982b0.0a76ac",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Export",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 460,
        "wires": []
    },
    {
        "id": "d4b56f37.fcdfe",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Export (OUT)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 850,
        "y": 520,
        "wires": []
    },
    {
        "id": "590b42a0.1a441c",
        "type": "http in",
        "z": "f59fa069.9f99b",
        "name": "",
        "url": "/simple",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "4bcb74a3.2f6dac"
            ]
        ]
    },
    {
        "id": "4bcb74a3.2f6dac",
        "type": "template",
        "z": "f59fa069.9f99b",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Upload a file here:</h1>\n\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"myFile\" />\n    <input type=\"submit\" value=\"Submit\">\n</form>",
        "output": "str",
        "x": 670,
        "y": 160,
        "wires": [
            [
                "903e7906.6c4e18"
            ]
        ]
    },
    {
        "id": "903e7906.6c4e18",
        "type": "http response",
        "z": "f59fa069.9f99b",
        "name": "",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "3e0aebcc.c10c74",
        "type": "http response",
        "z": "f59fa069.9f99b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "7f6c23a3.3260cc",
        "type": "comment",
        "z": "f59fa069.9f99b",
        "name": "Simple",
        "info": "",
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "4041b003.0e6fd",
        "type": "template",
        "z": "f59fa069.9f99b",
        "name": "dropzone.js",
        "field": "dropzonejs",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "\n/*\n *\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\n *\n * Copyright (c) 2012, Matias Meno\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n(function() {\n  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,\n    __slice = [].slice,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  noop = function() {};\n\n  Emitter = (function() {\n    function Emitter() {}\n\n    Emitter.prototype.addEventListener = Emitter.prototype.on;\n\n    Emitter.prototype.on = function(event, fn) {\n      this._callbacks = this._callbacks || {};\n      if (!this._callbacks[event]) {\n        this._callbacks[event] = [];\n      }\n      this._callbacks[event].push(fn);\n      return this;\n    };\n\n    Emitter.prototype.emit = function() {\n      var args, callback, callbacks, event, _i, _len;\n      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      this._callbacks = this._callbacks || {};\n      callbacks = this._callbacks[event];\n      if (callbacks) {\n        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n          callback = callbacks[_i];\n          callback.apply(this, args);\n        }\n      }\n      return this;\n    };\n\n    Emitter.prototype.removeListener = Emitter.prototype.off;\n\n    Emitter.prototype.removeAllListeners = Emitter.prototype.off;\n\n    Emitter.prototype.removeEventListener = Emitter.prototype.off;\n\n    Emitter.prototype.off = function(event, fn) {\n      var callback, callbacks, i, _i, _len;\n      if (!this._callbacks || arguments.length === 0) {\n        this._callbacks = {};\n        return this;\n      }\n      callbacks = this._callbacks[event];\n      if (!callbacks) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        delete this._callbacks[event];\n        return this;\n      }\n      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {\n        callback = callbacks[i];\n        if (callback === fn) {\n          callbacks.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    };\n\n    return Emitter;\n\n  })();\n\n  Dropzone = (function(_super) {\n    var extend, resolveOption;\n\n    __extends(Dropzone, _super);\n\n    Dropzone.prototype.Emitter = Emitter;\n\n\n    /*\n    This is a list of all available events you can register on a dropzone object.\n    \n    You can register an event handler like this:\n    \n        dropzone.on(\"dragEnter\", function() { });\n     */\n\n    Dropzone.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\n\n    Dropzone.prototype.defaultOptions = {\n      url: null,\n      method: \"post\",\n      withCredentials: false,\n      parallelUploads: 2,\n      uploadMultiple: false,\n      maxFilesize: 256,\n      paramName: \"file\",\n      createImageThumbnails: true,\n      maxThumbnailFilesize: 10,\n      thumbnailWidth: 120,\n      thumbnailHeight: 120,\n      filesizeBase: 1000,\n      maxFiles: null,\n      params: {},\n      clickable: true,\n      ignoreHiddenFiles: true,\n      acceptedFiles: null,\n      acceptedMimeTypes: null,\n      autoProcessQueue: true,\n      autoQueue: true,\n      addRemoveLinks: false,\n      previewsContainer: null,\n      hiddenInputContainer: \"body\",\n      capture: null,\n      renameFilename: null,\n      dictDefaultMessage: \"Drop files here to upload\",\n      dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n      dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n      dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n      dictInvalidFileType: \"You can't upload files of this type.\",\n      dictResponseError: \"Server responded with {{statusCode}} code.\",\n      dictCancelUpload: \"Cancel upload\",\n      dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n      dictRemoveFile: \"Remove file\",\n      dictRemoveFileConfirmation: null,\n      dictMaxFilesExceeded: \"You can not upload any more files.\",\n      accept: function(file, done) {\n        return done();\n      },\n      init: function() {\n        return noop;\n      },\n      forceFallback: false,\n      fallback: function() {\n        var child, messageElement, span, _i, _len, _ref;\n        this.element.className = \"\" + this.element.className + \" dz-browser-not-supported\";\n        _ref = this.element.getElementsByTagName(\"div\");\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          child = _ref[_i];\n          if (/(^| )dz-message($| )/.test(child.className)) {\n            messageElement = child;\n            child.className = \"dz-message\";\n            continue;\n          }\n        }\n        if (!messageElement) {\n          messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\n          this.element.appendChild(messageElement);\n        }\n        span = messageElement.getElementsByTagName(\"span\")[0];\n        if (span) {\n          if (span.textContent != null) {\n            span.textContent = this.options.dictFallbackMessage;\n          } else if (span.innerText != null) {\n            span.innerText = this.options.dictFallbackMessage;\n          }\n        }\n        return this.element.appendChild(this.getFallbackForm());\n      },\n      resize: function(file) {\n        var info, srcRatio, trgRatio;\n        info = {\n          srcX: 0,\n          srcY: 0,\n          srcWidth: file.width,\n          srcHeight: file.height\n        };\n        srcRatio = file.width / file.height;\n        info.optWidth = this.options.thumbnailWidth;\n        info.optHeight = this.options.thumbnailHeight;\n        if ((info.optWidth == null) && (info.optHeight == null)) {\n          info.optWidth = info.srcWidth;\n          info.optHeight = info.srcHeight;\n        } else if (info.optWidth == null) {\n          info.optWidth = srcRatio * info.optHeight;\n        } else if (info.optHeight == null) {\n          info.optHeight = (1 / srcRatio) * info.optWidth;\n        }\n        trgRatio = info.optWidth / info.optHeight;\n        if (file.height < info.optHeight || file.width < info.optWidth) {\n          info.trgHeight = info.srcHeight;\n          info.trgWidth = info.srcWidth;\n        } else {\n          if (srcRatio > trgRatio) {\n            info.srcHeight = file.height;\n            info.srcWidth = info.srcHeight * trgRatio;\n          } else {\n            info.srcWidth = file.width;\n            info.srcHeight = info.srcWidth / trgRatio;\n          }\n        }\n        info.srcX = (file.width - info.srcWidth) / 2;\n        info.srcY = (file.height - info.srcHeight) / 2;\n        return info;\n      },\n\n      /*\n      Those functions register themselves to the events on init and handle all\n      the user interface specific stuff. Overwriting them won't break the upload\n      but can break the way it's displayed.\n      You can overwrite them if you don't like the default behavior. If you just\n      want to add an additional event handler, register it on the dropzone object\n      and don't overwrite those options.\n       */\n      drop: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragstart: noop,\n      dragend: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragenter: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragover: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragleave: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      paste: noop,\n      reset: function() {\n        return this.element.classList.remove(\"dz-started\");\n      },\n      addedfile: function(file) {\n        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n        if (this.element === this.previewsContainer) {\n          this.element.classList.add(\"dz-started\");\n        }\n        if (this.previewsContainer) {\n          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\n          file.previewTemplate = file.previewElement;\n          this.previewsContainer.appendChild(file.previewElement);\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-name]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            node.textContent = this._renameFilename(file.name);\n          }\n          _ref1 = file.previewElement.querySelectorAll(\"[data-dz-size]\");\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            node = _ref1[_j];\n            node.innerHTML = this.filesize(file.size);\n          }\n          if (this.options.addRemoveLinks) {\n            file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\n            file.previewElement.appendChild(file._removeLink);\n          }\n          removeFileEvent = (function(_this) {\n            return function(e) {\n              e.preventDefault();\n              e.stopPropagation();\n              if (file.status === Dropzone.UPLOADING) {\n                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {\n                  return _this.removeFile(file);\n                });\n              } else {\n                if (_this.options.dictRemoveFileConfirmation) {\n                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {\n                    return _this.removeFile(file);\n                  });\n                } else {\n                  return _this.removeFile(file);\n                }\n              }\n            };\n          })(this);\n          _ref2 = file.previewElement.querySelectorAll(\"[data-dz-remove]\");\n          _results = [];\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            removeLink = _ref2[_k];\n            _results.push(removeLink.addEventListener(\"click\", removeFileEvent));\n          }\n          return _results;\n        }\n      },\n      removedfile: function(file) {\n        var _ref;\n        if (file.previewElement) {\n          if ((_ref = file.previewElement) != null) {\n            _ref.parentNode.removeChild(file.previewElement);\n          }\n        }\n        return this._updateMaxFilesReachedClass();\n      },\n      thumbnail: function(file, dataUrl) {\n        var thumbnailElement, _i, _len, _ref;\n        if (file.previewElement) {\n          file.previewElement.classList.remove(\"dz-file-preview\");\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            thumbnailElement = _ref[_i];\n            thumbnailElement.alt = file.name;\n            thumbnailElement.src = dataUrl;\n          }\n          return setTimeout(((function(_this) {\n            return function() {\n              return file.previewElement.classList.add(\"dz-image-preview\");\n            };\n          })(this)), 1);\n        }\n      },\n      error: function(file, message) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-error\");\n          if (typeof message !== \"String\" && message.error) {\n            message = message.error;\n          }\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            _results.push(node.textContent = message);\n          }\n          return _results;\n        }\n      },\n      errormultiple: noop,\n      processing: function(file) {\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-processing\");\n          if (file._removeLink) {\n            return file._removeLink.textContent = this.options.dictCancelUpload;\n          }\n        }\n      },\n      processingmultiple: noop,\n      uploadprogress: function(file, progress, bytesSent) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            if (node.nodeName === 'PROGRESS') {\n              _results.push(node.value = progress);\n            } else {\n              _results.push(node.style.width = \"\" + progress + \"%\");\n            }\n          }\n          return _results;\n        }\n      },\n      totaluploadprogress: noop,\n      sending: noop,\n      sendingmultiple: noop,\n      success: function(file) {\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-success\");\n        }\n      },\n      successmultiple: noop,\n      canceled: function(file) {\n        return this.emit(\"error\", file, \"Upload canceled.\");\n      },\n      canceledmultiple: noop,\n      complete: function(file) {\n        if (file._removeLink) {\n          file._removeLink.textContent = this.options.dictRemoveFile;\n        }\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-complete\");\n        }\n      },\n      completemultiple: noop,\n      maxfilesexceeded: noop,\n      maxfilesreached: noop,\n      queuecomplete: noop,\n      addedfiles: noop,\n      previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\"\n    };\n\n    extend = function() {\n      var key, object, objects, target, val, _i, _len;\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        for (key in object) {\n          val = object[key];\n          target[key] = val;\n        }\n      }\n      return target;\n    };\n\n    function Dropzone(element, options) {\n      var elementOptions, fallback, _ref;\n      this.element = element;\n      this.version = Dropzone.version;\n      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\n      this.clickableElements = [];\n      this.listeners = [];\n      this.files = [];\n      if (typeof this.element === \"string\") {\n        this.element = document.querySelector(this.element);\n      }\n      if (!(this.element && (this.element.nodeType != null))) {\n        throw new Error(\"Invalid dropzone element.\");\n      }\n      if (this.element.dropzone) {\n        throw new Error(\"Dropzone already attached.\");\n      }\n      Dropzone.instances.push(this);\n      this.element.dropzone = this;\n      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};\n      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});\n      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {\n        return this.options.fallback.call(this);\n      }\n      if (this.options.url == null) {\n        this.options.url = this.element.getAttribute(\"action\");\n      }\n      if (!this.options.url) {\n        throw new Error(\"No URL provided.\");\n      }\n      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {\n        throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n      }\n      if (this.options.acceptedMimeTypes) {\n        this.options.acceptedFiles = this.options.acceptedMimeTypes;\n        delete this.options.acceptedMimeTypes;\n      }\n      this.options.method = this.options.method.toUpperCase();\n      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {\n        fallback.parentNode.removeChild(fallback);\n      }\n      if (this.options.previewsContainer !== false) {\n        if (this.options.previewsContainer) {\n          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, \"previewsContainer\");\n        } else {\n          this.previewsContainer = this.element;\n        }\n      }\n      if (this.options.clickable) {\n        if (this.options.clickable === true) {\n          this.clickableElements = [this.element];\n        } else {\n          this.clickableElements = Dropzone.getElements(this.options.clickable, \"clickable\");\n        }\n      }\n      this.init();\n    }\n\n    Dropzone.prototype.getAcceptedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getRejectedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (!file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getFilesWithStatus = function(status) {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === status) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getQueuedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.QUEUED);\n    };\n\n    Dropzone.prototype.getUploadingFiles = function() {\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\n    };\n\n    Dropzone.prototype.getAddedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.ADDED);\n    };\n\n    Dropzone.prototype.getActiveFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.init = function() {\n      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;\n      if (this.element.tagName === \"form\") {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n      }\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\n      }\n      if (this.clickableElements.length) {\n        setupHiddenFileInput = (function(_this) {\n          return function() {\n            if (_this.hiddenFileInput) {\n              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);\n            }\n            _this.hiddenFileInput = document.createElement(\"input\");\n            _this.hiddenFileInput.setAttribute(\"type\", \"file\");\n            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {\n              _this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n            }\n            _this.hiddenFileInput.className = \"dz-hidden-input\";\n            if (_this.options.acceptedFiles != null) {\n              _this.hiddenFileInput.setAttribute(\"accept\", _this.options.acceptedFiles);\n            }\n            if (_this.options.capture != null) {\n              _this.hiddenFileInput.setAttribute(\"capture\", _this.options.capture);\n            }\n            _this.hiddenFileInput.style.visibility = \"hidden\";\n            _this.hiddenFileInput.style.position = \"absolute\";\n            _this.hiddenFileInput.style.top = \"0\";\n            _this.hiddenFileInput.style.left = \"0\";\n            _this.hiddenFileInput.style.height = \"0\";\n            _this.hiddenFileInput.style.width = \"0\";\n            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);\n            return _this.hiddenFileInput.addEventListener(\"change\", function() {\n              var file, files, _i, _len;\n              files = _this.hiddenFileInput.files;\n              if (files.length) {\n                for (_i = 0, _len = files.length; _i < _len; _i++) {\n                  file = files[_i];\n                  _this.addFile(file);\n                }\n              }\n              _this.emit(\"addedfiles\", files);\n              return setupHiddenFileInput();\n            });\n          };\n        })(this);\n        setupHiddenFileInput();\n      }\n      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;\n      _ref1 = this.events;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        eventName = _ref1[_i];\n        this.on(eventName, this.options[eventName]);\n      }\n      this.on(\"uploadprogress\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"removedfile\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"canceled\", (function(_this) {\n        return function(file) {\n          return _this.emit(\"complete\", file);\n        };\n      })(this));\n      this.on(\"complete\", (function(_this) {\n        return function(file) {\n          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {\n            return setTimeout((function() {\n              return _this.emit(\"queuecomplete\");\n            }), 0);\n          }\n        };\n      })(this));\n      noPropagation = function(e) {\n        e.stopPropagation();\n        if (e.preventDefault) {\n          return e.preventDefault();\n        } else {\n          return e.returnValue = false;\n        }\n      };\n      this.listeners = [\n        {\n          element: this.element,\n          events: {\n            \"dragstart\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragstart\", e);\n              };\n            })(this),\n            \"dragenter\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.emit(\"dragenter\", e);\n              };\n            })(this),\n            \"dragover\": (function(_this) {\n              return function(e) {\n                var efct;\n                try {\n                  efct = e.dataTransfer.effectAllowed;\n                } catch (_error) {}\n                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\n                noPropagation(e);\n                return _this.emit(\"dragover\", e);\n              };\n            })(this),\n            \"dragleave\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragleave\", e);\n              };\n            })(this),\n            \"drop\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.drop(e);\n              };\n            })(this),\n            \"dragend\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragend\", e);\n              };\n            })(this)\n          }\n        }\n      ];\n      this.clickableElements.forEach((function(_this) {\n        return function(clickableElement) {\n          return _this.listeners.push({\n            element: clickableElement,\n            events: {\n              \"click\": function(evt) {\n                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(\".dz-message\")))) {\n                  _this.hiddenFileInput.click();\n                }\n                return true;\n              }\n            }\n          });\n        };\n      })(this));\n      this.enable();\n      return this.options.init.call(this);\n    };\n\n    Dropzone.prototype.destroy = function() {\n      var _ref;\n      this.disable();\n      this.removeAllFiles(true);\n      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n        this.hiddenFileInput = null;\n      }\n      delete this.element.dropzone;\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\n    };\n\n    Dropzone.prototype.updateTotalUploadProgress = function() {\n      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;\n      totalBytesSent = 0;\n      totalBytes = 0;\n      activeFiles = this.getActiveFiles();\n      if (activeFiles.length) {\n        _ref = this.getActiveFiles();\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          totalBytesSent += file.upload.bytesSent;\n          totalBytes += file.upload.total;\n        }\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\n      } else {\n        totalUploadProgress = 100;\n      }\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    };\n\n    Dropzone.prototype._getParamName = function(n) {\n      if (typeof this.options.paramName === \"function\") {\n        return this.options.paramName(n);\n      } else {\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\n      }\n    };\n\n    Dropzone.prototype._renameFilename = function(name) {\n      if (typeof this.options.renameFilename !== \"function\") {\n        return name;\n      }\n      return this.options.renameFilename(name);\n    };\n\n    Dropzone.prototype.getFallbackForm = function() {\n      var existingFallback, fields, fieldsString, form;\n      if (existingFallback = this.getExistingFallback()) {\n        return existingFallback;\n      }\n      fieldsString = \"<div class=\\\"dz-fallback\\\">\";\n      if (this.options.dictFallbackText) {\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\n      }\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + (this._getParamName(0)) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : void 0) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\n      fields = Dropzone.createElement(fieldsString);\n      if (this.element.tagName !== \"FORM\") {\n        form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\n        form.appendChild(fields);\n      } else {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        this.element.setAttribute(\"method\", this.options.method);\n      }\n      return form != null ? form : fields;\n    };\n\n    Dropzone.prototype.getExistingFallback = function() {\n      var fallback, getFallback, tagName, _i, _len, _ref;\n      getFallback = function(elements) {\n        var el, _i, _len;\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )fallback($| )/.test(el.className)) {\n            return el;\n          }\n        }\n      };\n      _ref = [\"div\", \"form\"];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        tagName = _ref[_i];\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\n          return fallback;\n        }\n      }\n    };\n\n    Dropzone.prototype.setupEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.addEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.removeEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.removeEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.disable = function() {\n      var file, _i, _len, _ref, _results;\n      this.clickableElements.forEach(function(element) {\n        return element.classList.remove(\"dz-clickable\");\n      });\n      this.removeEventListeners();\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        _results.push(this.cancelUpload(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.enable = function() {\n      this.clickableElements.forEach(function(element) {\n        return element.classList.add(\"dz-clickable\");\n      });\n      return this.setupEventListeners();\n    };\n\n    Dropzone.prototype.filesize = function(size) {\n      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;\n      selectedSize = 0;\n      selectedUnit = \"b\";\n      if (size > 0) {\n        units = ['TB', 'GB', 'MB', 'KB', 'b'];\n        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {\n          unit = units[i];\n          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n          if (size >= cutoff) {\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n            selectedUnit = unit;\n            break;\n          }\n        }\n        selectedSize = Math.round(10 * selectedSize) / 10;\n      }\n      return \"<strong>\" + selectedSize + \"</strong> \" + selectedUnit;\n    };\n\n    Dropzone.prototype._updateMaxFilesReachedClass = function() {\n      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\n          this.emit('maxfilesreached', this.files);\n        }\n        return this.element.classList.add(\"dz-max-files-reached\");\n      } else {\n        return this.element.classList.remove(\"dz-max-files-reached\");\n      }\n    };\n\n    Dropzone.prototype.drop = function(e) {\n      var files, items;\n      if (!e.dataTransfer) {\n        return;\n      }\n      this.emit(\"drop\", e);\n      files = e.dataTransfer.files;\n      this.emit(\"addedfiles\", files);\n      if (files.length) {\n        items = e.dataTransfer.items;\n        if (items && items.length && (items[0].webkitGetAsEntry != null)) {\n          this._addFilesFromItems(items);\n        } else {\n          this.handleFiles(files);\n        }\n      }\n    };\n\n    Dropzone.prototype.paste = function(e) {\n      var items, _ref;\n      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {\n        return;\n      }\n      this.emit(\"paste\", e);\n      items = e.clipboardData.items;\n      if (items.length) {\n        return this._addFilesFromItems(items);\n      }\n    };\n\n    Dropzone.prototype.handleFiles = function(files) {\n      var file, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        _results.push(this.addFile(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromItems = function(items) {\n      var entry, item, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = items.length; _i < _len; _i++) {\n        item = items[_i];\n        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\n          if (entry.isFile) {\n            _results.push(this.addFile(item.getAsFile()));\n          } else if (entry.isDirectory) {\n            _results.push(this._addFilesFromDirectory(entry, entry.name));\n          } else {\n            _results.push(void 0);\n          }\n        } else if (item.getAsFile != null) {\n          if ((item.kind == null) || item.kind === \"file\") {\n            _results.push(this.addFile(item.getAsFile()));\n          } else {\n            _results.push(void 0);\n          }\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {\n      var dirReader, errorHandler, readEntries;\n      dirReader = directory.createReader();\n      errorHandler = function(error) {\n        return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\n      };\n      readEntries = (function(_this) {\n        return function() {\n          return dirReader.readEntries(function(entries) {\n            var entry, _i, _len;\n            if (entries.length > 0) {\n              for (_i = 0, _len = entries.length; _i < _len; _i++) {\n                entry = entries[_i];\n                if (entry.isFile) {\n                  entry.file(function(file) {\n                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                      return;\n                    }\n                    file.fullPath = \"\" + path + \"/\" + file.name;\n                    return _this.addFile(file);\n                  });\n                } else if (entry.isDirectory) {\n                  _this._addFilesFromDirectory(entry, \"\" + path + \"/\" + entry.name);\n                }\n              }\n              readEntries();\n            }\n            return null;\n          }, errorHandler);\n        };\n      })(this);\n      return readEntries();\n    };\n\n    Dropzone.prototype.accept = function(file, done) {\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\n        return done(this.options.dictInvalidFileType);\n      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n        return this.emit(\"maxfilesexceeded\", file);\n      } else {\n        return this.options.accept.call(this, file, done);\n      }\n    };\n\n    Dropzone.prototype.addFile = function(file) {\n      file.upload = {\n        progress: 0,\n        total: file.size,\n        bytesSent: 0\n      };\n      this.files.push(file);\n      file.status = Dropzone.ADDED;\n      this.emit(\"addedfile\", file);\n      this._enqueueThumbnail(file);\n      return this.accept(file, (function(_this) {\n        return function(error) {\n          if (error) {\n            file.accepted = false;\n            _this._errorProcessing([file], error);\n          } else {\n            file.accepted = true;\n            if (_this.options.autoQueue) {\n              _this.enqueueFile(file);\n            }\n          }\n          return _this._updateMaxFilesReachedClass();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.enqueueFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        this.enqueueFile(file);\n      }\n      return null;\n    };\n\n    Dropzone.prototype.enqueueFile = function(file) {\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\n        file.status = Dropzone.QUEUED;\n        if (this.options.autoProcessQueue) {\n          return setTimeout(((function(_this) {\n            return function() {\n              return _this.processQueue();\n            };\n          })(this)), 0);\n        }\n      } else {\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n      }\n    };\n\n    Dropzone.prototype._thumbnailQueue = [];\n\n    Dropzone.prototype._processingThumbnail = false;\n\n    Dropzone.prototype._enqueueThumbnail = function(file) {\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\n        this._thumbnailQueue.push(file);\n        return setTimeout(((function(_this) {\n          return function() {\n            return _this._processThumbnailQueue();\n          };\n        })(this)), 0);\n      }\n    };\n\n    Dropzone.prototype._processThumbnailQueue = function() {\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\n        return;\n      }\n      this._processingThumbnail = true;\n      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {\n        return function() {\n          _this._processingThumbnail = false;\n          return _this._processThumbnailQueue();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.removeFile = function(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        this.cancelUpload(file);\n      }\n      this.files = without(this.files, file);\n      this.emit(\"removedfile\", file);\n      if (this.files.length === 0) {\n        return this.emit(\"reset\");\n      }\n    };\n\n    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {\n      var file, _i, _len, _ref;\n      if (cancelIfNecessary == null) {\n        cancelIfNecessary = false;\n      }\n      _ref = this.files.slice();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\n          this.removeFile(file);\n        }\n      }\n      return null;\n    };\n\n    Dropzone.prototype.createThumbnail = function(file, callback) {\n      var fileReader;\n      fileReader = new FileReader;\n      fileReader.onload = (function(_this) {\n        return function() {\n          if (file.type === \"image/svg+xml\") {\n            _this.emit(\"thumbnail\", file, fileReader.result);\n            if (callback != null) {\n              callback();\n            }\n            return;\n          }\n          return _this.createThumbnailFromUrl(file, fileReader.result, callback);\n        };\n      })(this);\n      return fileReader.readAsDataURL(file);\n    };\n\n    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {\n      var img;\n      img = document.createElement(\"img\");\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n      img.onload = (function(_this) {\n        return function() {\n          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;\n          file.width = img.width;\n          file.height = img.height;\n          resizeInfo = _this.options.resize.call(_this, file);\n          if (resizeInfo.trgWidth == null) {\n            resizeInfo.trgWidth = resizeInfo.optWidth;\n          }\n          if (resizeInfo.trgHeight == null) {\n            resizeInfo.trgHeight = resizeInfo.optHeight;\n          }\n          canvas = document.createElement(\"canvas\");\n          ctx = canvas.getContext(\"2d\");\n          canvas.width = resizeInfo.trgWidth;\n          canvas.height = resizeInfo.trgHeight;\n          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n          thumbnail = canvas.toDataURL(\"image/png\");\n          _this.emit(\"thumbnail\", file, thumbnail);\n          if (callback != null) {\n            return callback();\n          }\n        };\n      })(this);\n      if (callback != null) {\n        img.onerror = callback;\n      }\n      return img.src = imageUrl;\n    };\n\n    Dropzone.prototype.processQueue = function() {\n      var i, parallelUploads, processingLength, queuedFiles;\n      parallelUploads = this.options.parallelUploads;\n      processingLength = this.getUploadingFiles().length;\n      i = processingLength;\n      if (processingLength >= parallelUploads) {\n        return;\n      }\n      queuedFiles = this.getQueuedFiles();\n      if (!(queuedFiles.length > 0)) {\n        return;\n      }\n      if (this.options.uploadMultiple) {\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n      } else {\n        while (i < parallelUploads) {\n          if (!queuedFiles.length) {\n            return;\n          }\n          this.processFile(queuedFiles.shift());\n          i++;\n        }\n      }\n    };\n\n    Dropzone.prototype.processFile = function(file) {\n      return this.processFiles([file]);\n    };\n\n    Dropzone.prototype.processFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.processing = true;\n        file.status = Dropzone.UPLOADING;\n        this.emit(\"processing\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"processingmultiple\", files);\n      }\n      return this.uploadFiles(files);\n    };\n\n    Dropzone.prototype._getFilesWithXhr = function(xhr) {\n      var file, files;\n      return files = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.files;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          if (file.xhr === xhr) {\n            _results.push(file);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Dropzone.prototype.cancelUpload = function(file) {\n      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;\n      if (file.status === Dropzone.UPLOADING) {\n        groupedFiles = this._getFilesWithXhr(file.xhr);\n        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {\n          groupedFile = groupedFiles[_i];\n          groupedFile.status = Dropzone.CANCELED;\n        }\n        file.xhr.abort();\n        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {\n          groupedFile = groupedFiles[_j];\n          this.emit(\"canceled\", groupedFile);\n        }\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", groupedFiles);\n        }\n      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {\n        file.status = Dropzone.CANCELED;\n        this.emit(\"canceled\", file);\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", [file]);\n        }\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    resolveOption = function() {\n      var args, option;\n      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if (typeof option === 'function') {\n        return option.apply(this, args);\n      }\n      return option;\n    };\n\n    Dropzone.prototype.uploadFile = function(file) {\n      return this.uploadFiles([file]);\n    };\n\n    Dropzone.prototype.uploadFiles = function(files) {\n      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\n      xhr = new XMLHttpRequest();\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.xhr = xhr;\n      }\n      method = resolveOption(this.options.method, files);\n      url = resolveOption(this.options.url, files);\n      xhr.open(method, url, true);\n      xhr.withCredentials = !!this.options.withCredentials;\n      response = null;\n      handleError = (function(_this) {\n        return function() {\n          var _j, _len1, _results;\n          _results = [];\n          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n            file = files[_j];\n            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr));\n          }\n          return _results;\n        };\n      })(this);\n      updateProgress = (function(_this) {\n        return function(e) {\n          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;\n          if (e != null) {\n            progress = 100 * e.loaded / e.total;\n            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n              file = files[_j];\n              file.upload = {\n                progress: progress,\n                total: e.total,\n                bytesSent: e.loaded\n              };\n            }\n          } else {\n            allFilesFinished = true;\n            progress = 100;\n            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {\n              file = files[_k];\n              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {\n                allFilesFinished = false;\n              }\n              file.upload.progress = progress;\n              file.upload.bytesSent = file.upload.total;\n            }\n            if (allFilesFinished) {\n              return;\n            }\n          }\n          _results = [];\n          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {\n            file = files[_l];\n            _results.push(_this.emit(\"uploadprogress\", file, progress, file.upload.bytesSent));\n          }\n          return _results;\n        };\n      })(this);\n      xhr.onload = (function(_this) {\n        return function(e) {\n          var _ref;\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          if (xhr.readyState !== 4) {\n            return;\n          }\n          response = xhr.responseText;\n          if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\n            try {\n              response = JSON.parse(response);\n            } catch (_error) {\n              e = _error;\n              response = \"Invalid JSON response from server.\";\n            }\n          }\n          updateProgress();\n          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {\n            return handleError();\n          } else {\n            return _this._finished(files, response, e);\n          }\n        };\n      })(this);\n      xhr.onerror = (function(_this) {\n        return function() {\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          return handleError();\n        };\n      })(this);\n      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;\n      progressObj.onprogress = updateProgress;\n      headers = {\n        \"Accept\": \"application/json\",\n        \"Cache-Control\": \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n      if (this.options.headers) {\n        extend(headers, this.options.headers);\n      }\n      for (headerName in headers) {\n        headerValue = headers[headerName];\n        if (headerValue) {\n          xhr.setRequestHeader(headerName, headerValue);\n        }\n      }\n      formData = new FormData();\n      if (this.options.params) {\n        _ref1 = this.options.params;\n        for (key in _ref1) {\n          value = _ref1[key];\n          formData.append(key, value);\n        }\n      }\n      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n        file = files[_j];\n        this.emit(\"sending\", file, xhr, formData);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"sendingmultiple\", files, xhr, formData);\n      }\n      if (this.element.tagName === \"FORM\") {\n        _ref2 = this.element.querySelectorAll(\"input, textarea, select, button\");\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          input = _ref2[_k];\n          inputName = input.getAttribute(\"name\");\n          inputType = input.getAttribute(\"type\");\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n            _ref3 = input.options;\n            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n              option = _ref3[_l];\n              if (option.selected) {\n                formData.append(inputName, option.value);\n              }\n            }\n          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== \"checkbox\" && _ref4 !== \"radio\") || input.checked) {\n            formData.append(inputName, input.value);\n          }\n        }\n      }\n      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {\n        formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));\n      }\n      return this.submitRequest(xhr, formData, files);\n    };\n\n    Dropzone.prototype.submitRequest = function(xhr, formData, files) {\n      return xhr.send(formData);\n    };\n\n    Dropzone.prototype._finished = function(files, responseText, e) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.SUCCESS;\n        this.emit(\"success\", file, responseText, e);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"successmultiple\", files, responseText, e);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    Dropzone.prototype._errorProcessing = function(files, message, xhr) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.ERROR;\n        this.emit(\"error\", file, message, xhr);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"errormultiple\", files, message, xhr);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    return Dropzone;\n\n  })(Emitter);\n\n  Dropzone.version = \"4.3.0\";\n\n  Dropzone.options = {};\n\n  Dropzone.optionsForElement = function(element) {\n    if (element.getAttribute(\"id\")) {\n      return Dropzone.options[camelize(element.getAttribute(\"id\"))];\n    } else {\n      return void 0;\n    }\n  };\n\n  Dropzone.instances = [];\n\n  Dropzone.forElement = function(element) {\n    if (typeof element === \"string\") {\n      element = document.querySelector(element);\n    }\n    if ((element != null ? element.dropzone : void 0) == null) {\n      throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n    }\n    return element.dropzone;\n  };\n\n  Dropzone.autoDiscover = true;\n\n  Dropzone.discover = function() {\n    var checkElements, dropzone, dropzones, _i, _len, _results;\n    if (document.querySelectorAll) {\n      dropzones = document.querySelectorAll(\".dropzone\");\n    } else {\n      dropzones = [];\n      checkElements = function(elements) {\n        var el, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )dropzone($| )/.test(el.className)) {\n            _results.push(dropzones.push(el));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      };\n      checkElements(document.getElementsByTagName(\"div\"));\n      checkElements(document.getElementsByTagName(\"form\"));\n    }\n    _results = [];\n    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {\n      dropzone = dropzones[_i];\n      if (Dropzone.optionsForElement(dropzone) !== false) {\n        _results.push(new Dropzone(dropzone));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\\/12/i];\n\n  Dropzone.isBrowserSupported = function() {\n    var capableBrowser, regex, _i, _len, _ref;\n    capableBrowser = true;\n    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n      if (!(\"classList\" in document.createElement(\"a\"))) {\n        capableBrowser = false;\n      } else {\n        _ref = Dropzone.blacklistedBrowsers;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          regex = _ref[_i];\n          if (regex.test(navigator.userAgent)) {\n            capableBrowser = false;\n            continue;\n          }\n        }\n      }\n    } else {\n      capableBrowser = false;\n    }\n    return capableBrowser;\n  };\n\n  without = function(list, rejectedItem) {\n    var item, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = list.length; _i < _len; _i++) {\n      item = list[_i];\n      if (item !== rejectedItem) {\n        _results.push(item);\n      }\n    }\n    return _results;\n  };\n\n  camelize = function(str) {\n    return str.replace(/[\\-_](\\w)/g, function(match) {\n      return match.charAt(1).toUpperCase();\n    });\n  };\n\n  Dropzone.createElement = function(string) {\n    var div;\n    div = document.createElement(\"div\");\n    div.innerHTML = string;\n    return div.childNodes[0];\n  };\n\n  Dropzone.elementInside = function(element, container) {\n    if (element === container) {\n      return true;\n    }\n    while (element = element.parentNode) {\n      if (element === container) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  Dropzone.getElement = function(el, name) {\n    var element;\n    if (typeof el === \"string\") {\n      element = document.querySelector(el);\n    } else if (el.nodeType != null) {\n      element = el;\n    }\n    if (element == null) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\n    }\n    return element;\n  };\n\n  Dropzone.getElements = function(els, name) {\n    var e, el, elements, _i, _j, _len, _len1, _ref;\n    if (els instanceof Array) {\n      elements = [];\n      try {\n        for (_i = 0, _len = els.length; _i < _len; _i++) {\n          el = els[_i];\n          elements.push(this.getElement(el, name));\n        }\n      } catch (_error) {\n        e = _error;\n        elements = null;\n      }\n    } else if (typeof els === \"string\") {\n      elements = [];\n      _ref = document.querySelectorAll(els);\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n        el = _ref[_j];\n        elements.push(el);\n      }\n    } else if (els.nodeType != null) {\n      elements = [els];\n    }\n    if (!((elements != null) && elements.length)) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\n    }\n    return elements;\n  };\n\n  Dropzone.confirm = function(question, accepted, rejected) {\n    if (window.confirm(question)) {\n      return accepted();\n    } else if (rejected != null) {\n      return rejected();\n    }\n  };\n\n  Dropzone.isValidFile = function(file, acceptedFiles) {\n    var baseMimeType, mimeType, validType, _i, _len;\n    if (!acceptedFiles) {\n      return true;\n    }\n    acceptedFiles = acceptedFiles.split(\",\");\n    mimeType = file.type;\n    baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {\n      validType = acceptedFiles[_i];\n      validType = validType.trim();\n      if (validType.charAt(0) === \".\") {\n        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\n          return true;\n        }\n      } else if (/\\/\\*$/.test(validType)) {\n        if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\n          return true;\n        }\n      } else {\n        if (mimeType === validType) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  if (typeof jQuery !== \"undefined\" && jQuery !== null) {\n    jQuery.fn.dropzone = function(options) {\n      return this.each(function() {\n        return new Dropzone(this, options);\n      });\n    };\n  }\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = Dropzone;\n  } else {\n    window.Dropzone = Dropzone;\n  }\n\n  Dropzone.ADDED = \"added\";\n\n  Dropzone.QUEUED = \"queued\";\n\n  Dropzone.ACCEPTED = Dropzone.QUEUED;\n\n  Dropzone.UPLOADING = \"uploading\";\n\n  Dropzone.PROCESSING = Dropzone.UPLOADING;\n\n  Dropzone.CANCELED = \"canceled\";\n\n  Dropzone.ERROR = \"error\";\n\n  Dropzone.SUCCESS = \"success\";\n\n\n  /*\n  \n  Bugfix for iOS 6 and 7\n  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n  based on the work of https://github.com/stomita/ios-imagefile-megapixel\n   */\n\n  detectVerticalSquash = function(img) {\n    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;\n    iw = img.naturalWidth;\n    ih = img.naturalHeight;\n    canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = ih;\n    ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    data = ctx.getImageData(0, 0, 1, ih).data;\n    sy = 0;\n    ey = ih;\n    py = ih;\n    while (py > sy) {\n      alpha = data[(py - 1) * 4 + 3];\n      if (alpha === 0) {\n        ey = py;\n      } else {\n        sy = py;\n      }\n      py = (ey + sy) >> 1;\n    }\n    ratio = py / ih;\n    if (ratio === 0) {\n      return 1;\n    } else {\n      return ratio;\n    }\n  };\n\n  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var vertSquashRatio;\n    vertSquashRatio = detectVerticalSquash(img);\n    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n  };\n\n\n  /*\n   * contentloaded.js\n   *\n   * Author: Diego Perini (diego.perini at gmail.com)\n   * Summary: cross-browser wrapper for DOMContentLoaded\n   * Updated: 20101020\n   * License: MIT\n   * Version: 1.2\n   *\n   * URL:\n   * http://javascript.nwbox.com/ContentLoaded/\n   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\n   */\n\n  contentLoaded = function(win, fn) {\n    var add, doc, done, init, poll, pre, rem, root, top;\n    done = false;\n    top = true;\n    doc = win.document;\n    root = doc.documentElement;\n    add = (doc.addEventListener ? \"addEventListener\" : \"attachEvent\");\n    rem = (doc.addEventListener ? \"removeEventListener\" : \"detachEvent\");\n    pre = (doc.addEventListener ? \"\" : \"on\");\n    init = function(e) {\n      if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\n        return;\n      }\n      (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n      if (!done && (done = true)) {\n        return fn.call(win, e.type || e);\n      }\n    };\n    poll = function() {\n      var e;\n      try {\n        root.doScroll(\"left\");\n      } catch (_error) {\n        e = _error;\n        setTimeout(poll, 50);\n        return;\n      }\n      return init(\"poll\");\n    };\n    if (doc.readyState !== \"complete\") {\n      if (doc.createEventObject && root.doScroll) {\n        try {\n          top = !win.frameElement;\n        } catch (_error) {}\n        if (top) {\n          poll();\n        }\n      }\n      doc[add](pre + \"DOMContentLoaded\", init, false);\n      doc[add](pre + \"readystatechange\", init, false);\n      return win[add](pre + \"load\", init, false);\n    }\n  };\n\n  Dropzone._autoDiscoverFunction = function() {\n    if (Dropzone.autoDiscover) {\n      return Dropzone.discover();\n    }\n  };\n\n  contentLoaded(window, Dropzone._autoDiscoverFunction);\n\n}).call(this);",
        "output": "str",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "4b754a63.6fc8a4"
            ]
        ]
    },
    {
        "id": "b6430d13.26bf5",
        "type": "http in",
        "z": "f59fa069.9f99b",
        "name": "",
        "url": "/complex",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 460,
        "wires": [
            [
                "4041b003.0e6fd"
            ]
        ]
    },
    {
        "id": "4cbf7176.2eaf2",
        "type": "template",
        "z": "f59fa069.9f99b",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\n    {{{dropzonejs}}}\n</script>\n<style>\n    {{{css}}}\n</style>\n\n<script>\n    // \"myAwesomeDropzone\" is the camelized version of the HTML element's ID\n    Dropzone.options.myDropzone = {\n      paramName: \"myFile\", // The name that will be used to transfer the file\n      maxFilesize: 2, // MB\n      accept: function(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        }\n        else { done(); }\n      }\n    };\n</script>\n\n<h1>Upload a file here:</h1>\n\n<form action=\"/uploadpretty\" class=\"dropzone\" method=\"post\" enctype=\"multipart/form-data\" id=\"my-dropzone\">\n  <div class=\"fallback\">\n    <input name=\"myFile\" type=\"file\" />\n    <input type=\"submit\" value=\"Submit\">\n  </div>\n</form>",
        "output": "str",
        "x": 890,
        "y": 460,
        "wires": [
            [
                "73e1bfc.7cf7c4"
            ]
        ]
    },
    {
        "id": "73e1bfc.7cf7c4",
        "type": "http response",
        "z": "f59fa069.9f99b",
        "name": "",
        "x": 1050,
        "y": 460,
        "wires": []
    },
    {
        "id": "7d16f26d.b2634c",
        "type": "http response",
        "z": "f59fa069.9f99b",
        "name": "",
        "x": 810,
        "y": 220,
        "wires": []
    },
    {
        "id": "4b754a63.6fc8a4",
        "type": "template",
        "z": "f59fa069.9f99b",
        "name": "css",
        "field": "css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "/*\n * The MIT License\n * Copyright (c) 2012 Matias Meno <m@tias.me>\n */\n@-webkit-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-moz-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-webkit-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-moz-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-webkit-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@-moz-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n.dropzone, .dropzone * {\n  box-sizing: border-box; }\n\n.dropzone {\n  min-height: 150px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  background: white;\n  padding: 20px 20px; }\n  .dropzone.dz-clickable {\n    cursor: pointer; }\n    .dropzone.dz-clickable * {\n      cursor: default; }\n    .dropzone.dz-clickable .dz-message, .dropzone.dz-clickable .dz-message * {\n      cursor: pointer; }\n  .dropzone.dz-started .dz-message {\n    display: none; }\n  .dropzone.dz-drag-hover {\n    border-style: solid; }\n    .dropzone.dz-drag-hover .dz-message {\n      opacity: 0.5; }\n  .dropzone .dz-message {\n    text-align: center;\n    margin: 2em 0; }\n  .dropzone .dz-preview {\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin: 16px;\n    min-height: 100px; }\n    .dropzone .dz-preview:hover {\n      z-index: 1000; }\n      .dropzone .dz-preview:hover .dz-details {\n        opacity: 1; }\n    .dropzone .dz-preview.dz-file-preview .dz-image {\n      border-radius: 20px;\n      background: #999;\n      background: linear-gradient(to bottom, #eee, #ddd); }\n    .dropzone .dz-preview.dz-file-preview .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview.dz-image-preview {\n      background: white; }\n      .dropzone .dz-preview.dz-image-preview .dz-details {\n        -webkit-transition: opacity 0.2s linear;\n        -moz-transition: opacity 0.2s linear;\n        -ms-transition: opacity 0.2s linear;\n        -o-transition: opacity 0.2s linear;\n        transition: opacity 0.2s linear; }\n    .dropzone .dz-preview .dz-remove {\n      font-size: 14px;\n      text-align: center;\n      display: block;\n      cursor: pointer;\n      border: none; }\n      .dropzone .dz-preview .dz-remove:hover {\n        text-decoration: underline; }\n    .dropzone .dz-preview:hover .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview .dz-details {\n      z-index: 20;\n      position: absolute;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      font-size: 13px;\n      min-width: 100%;\n      max-width: 100%;\n      padding: 2em 1em;\n      text-align: center;\n      color: rgba(0, 0, 0, 0.9);\n      line-height: 150%; }\n      .dropzone .dz-preview .dz-details .dz-size {\n        margin-bottom: 1em;\n        font-size: 16px; }\n      .dropzone .dz-preview .dz-details .dz-filename {\n        white-space: nowrap; }\n        .dropzone .dz-preview .dz-details .dz-filename:hover span {\n          border: 1px solid rgba(200, 200, 200, 0.8);\n          background-color: rgba(255, 255, 255, 0.8); }\n        .dropzone .dz-preview .dz-details .dz-filename:not(:hover) {\n          overflow: hidden;\n          text-overflow: ellipsis; }\n          .dropzone .dz-preview .dz-details .dz-filename:not(:hover) span {\n            border: 1px solid transparent; }\n      .dropzone .dz-preview .dz-details .dz-filename span, .dropzone .dz-preview .dz-details .dz-size span {\n        background-color: rgba(255, 255, 255, 0.4);\n        padding: 0 0.4em;\n        border-radius: 3px; }\n    .dropzone .dz-preview:hover .dz-image img {\n      -webkit-transform: scale(1.05, 1.05);\n      -moz-transform: scale(1.05, 1.05);\n      -ms-transform: scale(1.05, 1.05);\n      -o-transform: scale(1.05, 1.05);\n      transform: scale(1.05, 1.05);\n      -webkit-filter: blur(8px);\n      filter: blur(8px); }\n    .dropzone .dz-preview .dz-image {\n      border-radius: 20px;\n      overflow: hidden;\n      width: 120px;\n      height: 120px;\n      position: relative;\n      display: block;\n      z-index: 10; }\n      .dropzone .dz-preview .dz-image img {\n        display: block; }\n    .dropzone .dz-preview.dz-success .dz-success-mark {\n      -webkit-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview.dz-error .dz-error-mark {\n      opacity: 1;\n      -webkit-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview .dz-success-mark, .dropzone .dz-preview .dz-error-mark {\n      pointer-events: none;\n      opacity: 0;\n      z-index: 500;\n      position: absolute;\n      display: block;\n      top: 50%;\n      left: 50%;\n      margin-left: -27px;\n      margin-top: -27px; }\n      .dropzone .dz-preview .dz-success-mark svg, .dropzone .dz-preview .dz-error-mark svg {\n        display: block;\n        width: 54px;\n        height: 54px; }\n    .dropzone .dz-preview.dz-processing .dz-progress {\n      opacity: 1;\n      -webkit-transition: all 0.2s linear;\n      -moz-transition: all 0.2s linear;\n      -ms-transition: all 0.2s linear;\n      -o-transition: all 0.2s linear;\n      transition: all 0.2s linear; }\n    .dropzone .dz-preview.dz-complete .dz-progress {\n      opacity: 0;\n      -webkit-transition: opacity 0.4s ease-in;\n      -moz-transition: opacity 0.4s ease-in;\n      -ms-transition: opacity 0.4s ease-in;\n      -o-transition: opacity 0.4s ease-in;\n      transition: opacity 0.4s ease-in; }\n    .dropzone .dz-preview:not(.dz-processing) .dz-progress {\n      -webkit-animation: pulse 6s ease infinite;\n      -moz-animation: pulse 6s ease infinite;\n      -ms-animation: pulse 6s ease infinite;\n      -o-animation: pulse 6s ease infinite;\n      animation: pulse 6s ease infinite; }\n    .dropzone .dz-preview .dz-progress {\n      opacity: 1;\n      z-index: 1000;\n      pointer-events: none;\n      position: absolute;\n      height: 16px;\n      left: 50%;\n      top: 50%;\n      margin-top: -8px;\n      width: 80px;\n      margin-left: -40px;\n      background: rgba(255, 255, 255, 0.9);\n      -webkit-transform: scale(1);\n      border-radius: 8px;\n      overflow: hidden; }\n      .dropzone .dz-preview .dz-progress .dz-upload {\n        background: #333;\n        background: linear-gradient(to bottom, #666, #444);\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        width: 0;\n        -webkit-transition: width 300ms ease-in-out;\n        -moz-transition: width 300ms ease-in-out;\n        -ms-transition: width 300ms ease-in-out;\n        -o-transition: width 300ms ease-in-out;\n        transition: width 300ms ease-in-out; }\n    .dropzone .dz-preview.dz-error .dz-error-message {\n      display: block; }\n    .dropzone .dz-preview.dz-error:hover .dz-error-message {\n      opacity: 1;\n      pointer-events: auto; }\n    .dropzone .dz-preview .dz-error-message {\n      pointer-events: none;\n      z-index: 1000;\n      position: absolute;\n      display: block;\n      display: none;\n      opacity: 0;\n      -webkit-transition: opacity 0.3s ease;\n      -moz-transition: opacity 0.3s ease;\n      -ms-transition: opacity 0.3s ease;\n      -o-transition: opacity 0.3s ease;\n      transition: opacity 0.3s ease;\n      border-radius: 8px;\n      font-size: 13px;\n      top: 130px;\n      left: -10px;\n      width: 140px;\n      background: #be2626;\n      background: linear-gradient(to bottom, #be2626, #a92222);\n      padding: 0.5em 1.2em;\n      color: white; }\n      .dropzone .dz-preview .dz-error-message:after {\n        content: '';\n        position: absolute;\n        top: -6px;\n        left: 64px;\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #be2626; }",
        "output": "str",
        "x": 750,
        "y": 460,
        "wires": [
            [
                "4cbf7176.2eaf2"
            ]
        ]
    },
    {
        "id": "7bd7e29b.ecab7c",
        "type": "http in",
        "z": "f59fa069.9f99b",
        "name": "",
        "url": "/uploadpretty",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 350,
        "y": 520,
        "wires": [
            [
                "3e0aebcc.c10c74",
                "6384231.f9556dc"
            ]
        ]
    },
    {
        "id": "298f7e33.320d82",
        "type": "http in",
        "z": "f59fa069.9f99b",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "c88e09de.de1768"
            ]
        ]
    },
    {
        "id": "e5236b9.06b4298",
        "type": "template",
        "z": "f59fa069.9f99b",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p></p>File {{name}} uploaded !</p>\n\n<h2>Contents:</h2>\n\n<pre>\n{{{payload}}}\n</pre>",
        "output": "str",
        "x": 670,
        "y": 220,
        "wires": [
            [
                "7d16f26d.b2634c"
            ]
        ]
    },
    {
        "id": "c88e09de.de1768",
        "type": "function",
        "z": "f59fa069.9f99b",
        "name": "toBase64",
        "func": "msg.name = msg.req.files[0].originalname;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 220,
        "wires": [
            [
                "e5236b9.06b4298"
            ]
        ]
    },
    {
        "id": "d6c98220.54f2b",
        "type": "comment",
        "z": "f59fa069.9f99b",
        "name": "Complex",
        "info": "",
        "x": 320,
        "y": 420,
        "wires": []
    },
    {
        "id": "6384231.f9556dc",
        "type": "debug",
        "z": "f59fa069.9f99b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.files",
        "x": 578,
        "y": 577,
        "wires": []
    },
    {
        "id": "49fb8841.1b9ba8",
        "type": "file in",
        "z": "3193a4bc.9c021c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "2cf02150.61043e"
            ]
        ]
    },
    {
        "id": "2cf02150.61043e",
        "type": "csv",
        "z": "3193a4bc.9c021c",
        "name": "",
        "sep": ";",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "x": 290,
        "y": 440,
        "wires": [
            [
                "ccf3d3a0.2d97f"
            ]
        ]
    },
    {
        "id": "45dd0e42.674e7",
        "type": "change",
        "z": "3193a4bc.9c021c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files['csv'][0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.path",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "originalname",
                "pt": "msg",
                "to": "payload.originalname",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "49fb8841.1b9ba8"
            ]
        ]
    },
    {
        "id": "fe521e64.c9319",
        "type": "http response",
        "z": "3193a4bc.9c021c",
        "name": "",
        "x": 1056,
        "y": 471,
        "wires": []
    },
    {
        "id": "cb03ad79.af7ac",
        "type": "template",
        "z": "3193a4bc.9c021c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Upload de {{originalname}} feito com sucesso!\n\n{{output}}",
        "x": 936,
        "y": 471,
        "wires": [
            [
                "fe521e64.c9319"
            ]
        ]
    },
    {
        "id": "a5674320.c86e",
        "type": "join",
        "z": "3193a4bc.9c021c",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "timeout": "",
        "count": "",
        "x": 696,
        "y": 471,
        "wires": [
            [
                "5fb0571d.79e198"
            ]
        ]
    },
    {
        "id": "74bbb436.4a1f2c",
        "type": "split",
        "z": "3193a4bc.9c021c",
        "name": "",
        "splt": "",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "a5674320.c86e",
                "69b5a7f7.dec7c8"
            ]
        ]
    },
    {
        "id": "5fb0571d.79e198",
        "type": "function",
        "z": "3193a4bc.9c021c",
        "name": "",
        "func": "msg.output = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 816,
        "y": 471,
        "wires": [
            [
                "cb03ad79.af7ac"
            ]
        ]
    },
    {
        "id": "af85f709.6c7d68",
        "type": "comment",
        "z": "3193a4bc.9c021c",
        "name": "Processamento do CSV",
        "info": "",
        "x": 754,
        "y": 433,
        "wires": []
    },
    {
        "id": "afdc26c0.242108",
        "type": "function",
        "z": "3193a4bc.9c021c",
        "name": "Criado_em e Valido_ate",
        "func": "var arrProd = [];\n\nmsg.produtos.forEach(function(p){\n    \n    var validade = new Date();\n    \n    var qdadeDias = p.valido_ate;\n    validade.setDate(validade.getDate() + qdadeDias);\n    \n    validade.setHours(23);\n    validade.setMinutes(59);\n    validade.setSeconds(59);\n    \n    p.valido_ate = validade;\n});\n\nmsg.payload.forEach(function(prod){\n\n    prod.produtos = msg.produtos;\n    prod.criado_em = new Date();\n\n    arrProd.push(prod);\n    \n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "74bbb436.4a1f2c"
            ]
        ]
    },
    {
        "id": "1df2863c.38bc8a",
        "type": "http in",
        "z": "3193a4bc.9c021c",
        "name": "",
        "url": "/uploadRegras",
        "method": "get",
        "swaggerDoc": "",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "ff2af201.7cefb",
                "bb30c679.2a7f78"
            ]
        ]
    },
    {
        "id": "3b0e564.3888faa",
        "type": "template",
        "z": "3193a4bc.9c021c",
        "name": "TELA",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<head>\n    <title>Sinapse - Porto Seguro</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"vendor/bootstrap/css/bootstrap.min.css\">\n    \n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/json2html/1.0.0/json2html.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.json2html/1.0.0/jquery.json2html.js\"></script>\n    <script type=\"text/javascript\">\n        $(function () {\n            var data = {{#payload}}{{{.}}}{{/payload}};\n            var transform = {\n                tag: 'tr',\n                children: [\n                    { 'tag': 'td', 'html': \"\", children: [\n                        {  'tag':'input','type': 'checkbox', 'value': '${id_produto}/${nome}', 'name': 'id_prod', 'class': 'check' }\n                    ]},\n                    { 'tag': 'td', 'html': \"${id_produto}\" },\n                    { 'tag': 'td', 'html': \"${nome}\" },\n                    { 'tag': 'td', 'html': \"\", children: [\n                        {  'tag':'input','type': 'number', 'name': '${id_produto}' }\n                    ]}\n                ]\n            };\n            $('#produtos > tbody').json2html(data, transform);\n        });\n        \n        function checar() {\n            var checado=false;\n            $(\".check\").each(function(){\n                if($(this).prop(\"checked\"))\n                    checado=true;\n            });\n            if(!checado){\n                $(\"#alert\").modal();\n                return false;\n            }\n        }\n  </script>\n</head>\n<body class=\"container\">\n    <form action=\"/uploadRegras\" method=\"post\" enctype=\"multipart/form-data\">\n    <section class=\"row\">\n        <div class=\"table-responsive\">\n        <h1>Produtos</h1>\n        <table id=\"produtos\" class=\"table table-striped table-bordered\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>id_produto</th>\n                    <th>Nome</th>\n                    <th>Validade (dias)</th>\n                </tr>\n            </thead>\n            <tbody></tbody>\n        </table>\n        \n        <h1>Upload do CSV</h1>\n        <table id=\"csv\" class=\"table table-striped table-bordered\">\n            <thead>\n                <tr>\n                    <th><input type=\"file\" name=\"csv\" required /></th>\n                </tr>\n            </thead>\n            <tbody></tbody>\n        </table>\n        </div>\n    </section>\n    \n    <section class=\"row\" style=\"text-align: center;\" >\n        <input type=\"submit\" class=\"btn btn-secondary\" value=\"ENVIAR\" onclick=\"return checar()\"/>\n        <a href=\"localhost:1880/produtos\" > <input type=\"button\" class=\"btn btn-secondary\" value=\"Cadastro de Produtos\" /> </a>\n    </section>\n    </form>   \n    \n    <!-- Modal -->\n  <div class=\"modal fade\" id=\"alert\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n    \n      <!-- Modal content-->\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n          <h4 class=\"modal-title\">ATENÇÃO</h4>\n        </div>\n        <div class=\"modal-body\">\n          <p>Todas as cargas devem estar associadas a ao menos 1 produto. Por favor, selecione na listagem ou acione o botão 'Cadastro de Produtos' para inserir um novo Produto.</p>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">OK</button>\n        </div>\n      </div>\n      \n    </div>\n  </div>\n  \n</body>\n</html>",
        "x": 654,
        "y": 213,
        "wires": [
            [
                "fc2465c4.cfef08"
            ]
        ]
    },
    {
        "id": "fc2465c4.cfef08",
        "type": "http response",
        "z": "3193a4bc.9c021c",
        "name": "",
        "x": 794,
        "y": 213,
        "wires": []
    },
    {
        "id": "ff2af201.7cefb",
        "type": "change",
        "z": "3193a4bc.9c021c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "projection",
                "pt": "msg",
                "to": "{ \"_id\": 0 }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 334,
        "y": 213,
        "wires": [
            [
                "c4f40abd.ffa9d8"
            ]
        ]
    },
    {
        "id": "ccf3d3a0.2d97f",
        "type": "function",
        "z": "3193a4bc.9c021c",
        "name": "msg.produtos",
        "func": "var arr = [];\n\nvar id_produtos = msg.req.body.id_prod;\n\nif(typeof(id_produtos) === \"string\"){\n    \n    var split = id_produtos.split(\"/\");\n    var temp = {};\n    \n    temp[\"id_produto\"] = split[0];\n    temp[\"nome\"] = split[1];\n    \n    Object.keys(msg.req.body).forEach(function(id){\n        \n        if(id === temp[\"id_produto\"]){\n            temp[\"valido_ate\"] = Number (msg.req.body[id]);\n        }\n    });\n\n    arr.push(temp);\n\n}else{\n    \n    id_produtos.forEach(function(item){\n    \n    var split = item.split(\"/\");\n    var temp = {};\n    \n    temp[\"id_produto\"] = split[0];\n    temp[\"nome\"] = split[1];\n    \n    Object.keys(msg.req.body).forEach(function(id){\n        \n        if(id === temp[\"id_produto\"]){\n            temp[\"valido_ate\"] = Number (msg.req.body[id]);\n        }\n    });\n\n    arr.push(temp);\n    \n});\n    \n}\n\nmsg.produtos = arr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 480,
        "wires": [
            [
                "afdc26c0.242108"
            ]
        ]
    },
    {
        "id": "56e5dacb.22df34",
        "type": "comment",
        "z": "3193a4bc.9c021c",
        "name": "URL de teste da tela : http://52.55.240.135:3002/uploadRegras",
        "info": "",
        "x": 461,
        "y": 119,
        "wires": []
    },
    {
        "id": "c4f40abd.ffa9d8",
        "type": "template",
        "z": "3193a4bc.9c021c",
        "name": "Mock info",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "[{\"id_produto\":\"93\",\"nome\":\"AUTO_SEGURO_NOVO\"},{\"id_produto\":\"67\",\"nome\":\"PORTATEIS\"},{\"id_produto\":\"31\",\"nome\":\"VIDA INDIVIDUAL\"},{\"id_produto\":\"10\",\"nome\":\"GRAOS\"},{\"id_produto\":\"11\",\"nome\":\"SAUDE\"},{\"id_produto\":\"12\",\"nome\":\"FINANCIAMENTO\"},{\"id_produto\":\"33\",\"nome\":\"HORTA E POMAR\"},{\"id_produto\":\"55\",\"nome\":\"PATRIMONIAL\"},{\"id_produto\":\"56\",\"nome\":\"CONSÓRCIO\"},{\"id_produto\":\"66\",\"nome\":\"INVESTIMENTO\"},{\"id_produto\":\"88\",\"nome\":\"PET\"}]",
        "output": "str",
        "x": 524,
        "y": 213,
        "wires": [
            [
                "3b0e564.3888faa"
            ]
        ]
    },
    {
        "id": "69b5a7f7.dec7c8",
        "type": "debug",
        "z": "3193a4bc.9c021c",
        "name": "Database record ...",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 724,
        "y": 573,
        "wires": []
    },
    {
        "id": "bb30c679.2a7f78",
        "type": "debug",
        "z": "3193a4bc.9c021c",
        "name": "Database record ...",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "529a3c4e.245304",
        "type": "ui_template",
        "z": "e045593e.092be8",
        "d": true,
        "group": "9b849102.5b534",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<script>\n//alert(\"EXPORT 000\");\n</script>\n\n<script>\nreload = true;\n//alert(\"EXPORT 111\");\n\n(function(scope) {\n    //alert(\"EXPORT 222\");\n    if (typeof global_msg === 'undefined')\n        global_msg = \"kk\";\n    if (typeof reload === 'undefined')\n        reload = \"kk\";\n    //alert(\"EXPORT 333: global_msg: \" + String(global_msg) + \" reload: \" + String(reload));\n    global_msg = true;\n    current_socketid = 0;\n    scope.$watch('msg', function(msg) {\n        current_socketid = msg.socketid;\n        //alert(\"EXPORT 444: global_msg: \" + String(global_msg) + \" reload: \" + String(reload));\n        if ( (global_msg) || (reload) ) {\n            global_msg = false;\n            reload     = false;\n        }\n        else if (current_socketid != msg.socketid) {\n            //alert(\"EXPORT 555: current_socketid: \" + String(current_socketid) + \" socketid: \" + String(msg.sockeetid));\n        }\n        else if ( (msg) && (msg.topic) && (msg.topic == \"export\") ) {\n            //alert(\"global_msg: \" + String(global_msg || \"kk\") + \" reload: \" + String(reload || \"kk\"));\n            //alert(JSON.stringify(msg));\n            //alert(\"ACCEPT: \" + String(this.socketid));\n            filename = msg.filename\n            url = window.location.origin + filename;\n            basename = filename.split(/[\\\\/]/).pop();\n            //alert(url);\n            \n            var element = document.createElement('a');\n            element.setAttribute('href', url);\n            element.setAttribute('download', basename);\n            element.style.display = 'none';\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 640,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c97e7a7f.a8c038",
        "type": "ui_template",
        "z": "e045593e.092be8",
        "d": true,
        "group": "9b849102.5b534",
        "name": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 9999; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n  \n  /* Modal Content/Box */\n.modal-content {\n    background-color: #fefefe;\n    margin: 15% auto; /* 15% from the top and centered */\n    padding: 20px;\n    border: 1px solid #888;\n    width: 20%; /* Could be more or less, depending on screen size */\n  }\n\n/* The Close Button */\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n<!-- Modal content -->\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <span class=\"close\">&times;</span>\n        <h2>Upload configuration file</h2>\n        <p></p>\n    </div>\n    <div class=\"modal-body\">\n        <form action=\"/datalogger/uploadConf\" method=\"POST\" enctype=\"multipart/form-data\">\n            <input type=\"file\" name=\"myFile\" />\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </div>\n    <div class=\"modal-footer\">\n        <h3></h3>\n    </div>\n</div> \n</div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 540,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "731c2525.b1d17c",
        "type": "ui_template",
        "z": "e045593e.092be8",
        "d": true,
        "group": "9b849102.5b534",
        "name": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<script>\nreload_import = true;\n//alert(\"IMPORT 000\");\n</script>\n\n<script>\n//alert(\"IMPORT 111\");\n(function(scope) {\n    //alert(\"IMPORT 222\");\n    if (typeof global_import === 'undefined')\n        global_import = \"kk\";\n    if (typeof reload_import === 'undefined')\n        reload_import = \"kk\";\n    //alert(\"IMPORT 333: global_import: \" + String(global_import) + \" reload_import: \" + String(reload_import));\n    current_socketid = 0;\n    global_import = true;\n    scope.$watch('msg', function(msg) {\n        //alert(\"IMPORT 444: global_import: \" + String(global_import) + \" reload_import: \" + String(reload_import));\n        if ( (global_import) || (reload_import) ) {\n            global_import = false;\n            reload_import = false;\n        }\n        else if ( (msg) && (msg.topic) && (msg.topic == \"import\") ) {\n            // Get the modal\n            var modal = document.getElementById(\"myModal\");\n            //alert(\"333: modal:\" /*+ JSON.stringify(modal)*/);\n\n            // Get the <span> element that closes the modal\n            var span = document.getElementsByClassName(\"close\")[0];\n        \n            //alert(\"444: span:\" + JSON.stringify(span));\n            modal.style.display = \"block\";\n        \n            // When the user clicks on <span> (x), close the modal\n            span.onclick = function() {\n                //alert(\"span\");\n                modal.style.display = \"none\";\n            }\n            \n            // When the user clicks anywhere outside of the modal, close it\n            window.onclick = function(event) {\n                //alert (\"window\");\n                if (event.target == modal) {\n                    modal.style.display = \"none\";\n                }\n            }\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 540,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "1df9598b.cb1306",
        "type": "http response",
        "z": "e045593e.092be8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 680,
        "wires": []
    },
    {
        "id": "f0d13f5a.473c5",
        "type": "http in",
        "z": "e045593e.092be8",
        "name": "",
        "url": "/datalogger/uploadConf",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 320,
        "y": 700,
        "wires": [
            [
                "2f8e5932.529ab6"
            ]
        ]
    },
    {
        "id": "2f8e5932.529ab6",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "toBase64",
        "func": "msg.name = msg.req.files[0].originalname;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "a2bc2374.e68ad",
                "c8033f9.6cd59c"
            ]
        ]
    },
    {
        "id": "a2bc2374.e68ad",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Upload Conf",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 760,
        "wires": []
    },
    {
        "id": "c8033f9.6cd59c",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Config PARSE",
        "func": "fs = global.get('fs');\n\nfs.writeFileSync(\"/tmp/upload.conf\", msg.payload, \"ascii\");\n\nupload_conf = JSON.parse(msg.payload);\nif (!upload_conf.data) {\n    msg.payload = \"Invalid Configuration Data\"\n    return [ msg, null ];\n}\n\nif (!upload_conf.action || upload_conf.action == \"override\") {\n    if (upload_conf.data.dataLogger)\n        global.set(\"dataLogger\", upload_conf.data.dataLogger, \"config\");\n    if (upload_conf.data.bbgtAgtCfg)\n        global.set(\"bbgtAgtCfg\", upload_conf.data.bbgtAgtCfg, \"config\");\n    if (upload_conf.data.eventConfig)\n        global.set(\"eventConfig\", upload_conf.data.eventConfig, \"config\");\n}\nelse if(upload_conf.action == \"merge\") {\n    if (upload_conf.data.dataLogger) {\n        dataLogger = global.get(\"dataLogger\", \"config\");\n        Object.assign(dataLogger, upload_conf.data.dataLogger);\n        global.set(\"dataLogger\", dataLogger, \"config\");\n    }\n    if (upload_conf.data.bbgtAgtCfg) {\n        bbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\n        Object.assign(bbgtAgtCfg, upload_conf.data.bbgtAgtCfg);\n        global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n    }\n    if (upload_conf.data.eventConfig) {\n        eventConfig = global.get(\"eventConfig\", \"config\");\n        Object.assign(eventConfig, upload_conf.data.eventConfig);\n        global.set(\"eventConfig\", eventConfig, \"config\");\n    }\n}\nelse {\n    msg.payload = \"Invalid Action '\" + upload_conf.action + \"'\";\n    return msg;\n}\n\nmsg.payload = \"File \" + msg.name + \" processed OK\";\n\nmsgMqtt = {\n    topic   : \"config/apply\",\n    payload : \"\"\n};\n\nreturn [ msg, msgMqtt ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 700,
        "wires": [
            [
                "688f077c.a173a8",
                "778e7cc1.2cfd14"
            ],
            [
                "7f47f47b.223c6c"
            ]
        ]
    },
    {
        "id": "688f077c.a173a8",
        "type": "template",
        "z": "e045593e.092be8",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\nwindow.history.go(-1);\n</script>\n<p></p>{{payload}}</p>\n",
        "output": "str",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "1df9598b.cb1306"
            ]
        ]
    },
    {
        "id": "b498e102.d1338",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MODBUS Get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 470,
        "y": 340,
        "wires": []
    },
    {
        "id": "8db06b96.689218",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "File Strategy",
        "tooltip": "",
        "place": "Select option",
        "group": "a9b35bd0.ff0498",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "One File per Meas",
                "value": "measfile",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "file_strategy",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "d13f94b5.41d1a8",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "File Prefix",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "filename_prefix",
        "x": 680,
        "y": 540,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "14cfa55c.896d8b",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "Date Format",
        "tooltip": "",
        "place": "Select option",
        "group": "a9b35bd0.ff0498",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Epoch",
                "value": "epoch",
                "type": "str"
            },
            {
                "label": "ISO String",
                "value": "iso",
                "type": "str"
            },
            {
                "label": "YYYY-MM-DD hh:mm:ss",
                "value": "amd",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "date_format",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "48e98bb7.0e0404",
        "type": "ui_form",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "Variables",
        "group": "95ff1e34.2dc79",
        "order": 7,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "FTP Retry Policy",
                "value": "ftp_retry_policy",
                "type": "switch",
                "required": true,
                "rows": null
            },
            {
                "label": "Period",
                "value": "period",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ftp_retry_policy": false,
            "period": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "variables",
        "x": 680,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "b1b4fb42.5f2818",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "label": "FTP Policy",
        "tooltip": "",
        "place": "Select option",
        "group": "a9b35bd0.ff0498",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": true,
        "options": [
            {
                "label": "All Meas in same file",
                "value": "onefile",
                "type": "str"
            },
            {
                "label": "One File per Meas",
                "value": "measfile",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "ftp_policy",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "52153c26.3d5c54",
        "type": "ui_text_input",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "label": "FTP Retry Period (minutes)",
        "tooltip": "",
        "group": "a9b35bd0.ff0498",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "ftp_retry_period",
        "x": 740,
        "y": 660,
        "wires": [
            [
                "20714403.bec23c"
            ]
        ]
    },
    {
        "id": "3c89b34d.494adc",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Storage CSV (SingleFile)",
        "func": "/******************************************************/\n/** Obtener la hora en distintos formatos en funcion de\n *  la configuracion\n */\nfunction get_time(csvConf, timestamp) \n{\n    if (csvConf.date_format == \"iso\")\n        return timestamp.toISOString();\n    else if (csvConf.date_format == \"amd\") {\n        return timestamp.getUTCFullYear() + \"-\" +\n            String(timestamp.getUTCMonth() + 1).padStart(2, \"0\") + \"-\" +\n            timestamp.getUTCDate().toString().padStart(2, \"0\") + \" \" +\n            timestamp.getUTCHours().toString().padStart(2, \"0\") + \":\" +\n            timestamp.getUTCMinutes().toString().padStart(2, \"0\") + \":\" +\n            timestamp.getUTCSeconds().toString().padStart(2, \"0\");\n    }\n    else if (csvConf.date_format == \"epoch\")\n        return timestamp.getTime() / 1000;\n    else\n        return \"Invalid format\";\n}\n\n/******************************************************/\n/** Obtener la hora que aparece en el 'filename'\n */\nfunction get_filename_time(timestamp)\n{\n    return timestamp.getUTCFullYear() +\n        String(timestamp.getUTCMonth() + 1).padStart(2, \"0\") +\n        timestamp.getUTCDate().toString().padStart(2, \"0\") +\n        timestamp.getUTCHours().toString().padStart(2, \"0\") +\n        timestamp.getUTCMinutes().toString().padStart(2, \"0\") +\n        timestamp.getUTCSeconds().toString().padStart(2, \"0\");\n}\n\n/* Inicializacion de valores */\ndataLogger = global.get(\"dataLogger\");\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\nif ( (!dataLogger) || (!dataLoggerStatus) ||\n     (!dataLogger.storage.enabled) ||\n     (!dataLogger.storage.csv.enabled) )\n    return [ null, null ];\n\ncsv = dataLogger.storage.csv;\ndevice = msg.item;\nmeas   = msg.meas;\nif ( (!device) || (!meas) )\n    return [ null, null ];\n\n/* Current File List */\ncurrentCSVList = dataLoggerStatus.storage.csv.currentFileList;\n\n/** Build Data */\ntimestamp = msg.timestamp;\ndata      = msg.payload;\nmsg.payload = [\n    //now.toUTCString(),\n    get_time(csv, timestamp),\n    device.name,\n    //device.type,\n    device.model,\n    device.version,\n    device.serial,\n    meas.name,\n    meas.type,\n    meas.ID,\n    data,\n    meas.units\n];\n\n/** File Name Prefix */\nfilename_prefix = \"\";\nif (csv.file_strategy == \"onefile\") {\n    if (csv.filename_prefix)\n        filename_prefix =  csv.filename_prefix + \"-\";\n}\nelse if (csv.file_strategy == \"measfile\") {\n    if (csv.filename_prefix)\n        filename_prefix =  csv.filename_prefix + \"-\";\n    filename_prefix += meas.ID + \"-\";\n}\n\nif (!currentCSVList[meas.name]) {\n    currentCSVList[meas.name] = {\n        type       : csv.file_strategy,\n        devName    : device.name,\n        measName   : meas.name,\n        lines      : 1,\n        complete   : false,\n        sent       : false,\n        ftp_errors : 0,\n        expires    : csv.expires\n    };\n}\n\nsendFTP = false;\nif (currentCSVList[meas.name].expires < timestamp.getTime()) {\n    /* Mark expired file as complete */\n    fn = filename_prefix + csv.current_filename + \"-\" + csv.partnum + \".csv\"\n    if (currentCSVList[meas.name]) {\n        currentCSVList[meas.name].complete = true;\n        dataLoggerCSVPending = global.get(\"dataLoggerCSVPending\") || {};\n        dataLoggerCSVPending[fn] = currentCSVList[meas.name];\n        global.set(\"dataLoggerCSVPending\", dataLoggerCSVPending);\n    }\n\n    datestr = get_filename_time(timestamp);\n    dataLogger.storage.csv.current_filename = datestr;\n    dataLogger.storage.csv.expires = timestamp.getTime() + csv.period * 1000;\n    dataLogger.storage.csv.current_timestamp = timestamp.getTime();\n    global.set(\"dataLogger\", dataLogger);\n    sendFTP = true;\n}\n\nbasename = filename_prefix +\n    dataLogger.storage.csv.current_filename + \n    \"-\" + dataLogger.storage.csv.partnum +\n    \".csv\";\n\nif (currentCSVList[basename]) {\n    currentCSVList[basename].lines++;\n}\nelse {\n}\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nmsg.basename = basename;\nmsg.filename = csv.path + \"/\" + basename;\n\nif (sendFTP)\n    return [ msg, msg ];\nelse\n    return [ msg, null ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 1340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3f06aa59.8c8456",
        "type": "delay",
        "z": "3022fd6.d249f02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "aa8f7e84.86c91"
            ]
        ]
    },
    {
        "id": "c72eeb6b.e66138",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Local Storage (CSV)",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "csv_enabled",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1040,
        "y": 2440,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "678defd9.0bd6f",
        "type": "ui_table",
        "z": "857c3f85.fb474",
        "group": "4b8f01ce.69f01",
        "name": "File List",
        "order": 5,
        "width": 9,
        "height": 6,
        "columns": [
            {
                "field": "basename",
                "title": "File Name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "size",
                "title": "Size",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1120,
        "y": 1820,
        "wires": [
            [
                "a50f87bf.31ad18"
            ]
        ]
    },
    {
        "id": "ffa05174.4f05",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: CSV File Type Select",
        "func": "dataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\nif (!dataLoggerInternals)\n    return null;\n\ncsvType = undefined;\nif (msg.topic == \"refresh\") {\n    csvType = flow.get(\"csvFileTypeSelect\", \"memoryOnly\") || \"current\";\n}\nif (msg.topic == \"select\") {\n    flow.set(\"csvFileTypeSelect\", msg.payload, \"memoryOnly\");\n    csvType = msg.payload;\n}\nif (csvType) {\n    fs = global.get(\"fs\");\n    try {\n        basedir = dataLoggerInternals.storage.csv.path + \"/\" + csvType;\n        dirs = fs.readdirSync(basedir);\n    }\n    catch (e) { dirs = [] }\n    //node.warn(dirs);\n    msg.payload = [];\n    for (var idx in dirs) {\n        dir = dirs[idx];\n        files = fs.readdirSync(basedir + \"/\" + dir);\n        entry = {\n            dirname : dir,\n            size    : 0,\n            nfiles  : files.length\n        };\n        msg.payload.push(entry);\n    }\n}\nelse {\n    msg.payload = [ \n        {title:\"Name\", field:\"name\", editor:\"input\"}, \n        {title:\"Task Progress\", field:\"progress\", align:\"left\", formatter:\"progress\", editor:true}, \n        {title:\"Gender\", field:\"gender\", width:95, editor:\"select\", editorParams:{values:[\"male\", \"female\"]}}, \n        {title:\"Rating\", field:\"rating\", formatter:\"star\", align:\"center\", width:100, editor:true}, \n        {title:\"Color\", field:\"col\", width:130, editor:\"input\"}, \n        {title:\"Date Of Birth\", field:\"dob\", width:130, sorter:\"date\", align:\"center\"}, \n        {title:\"Driver\", field:\"car\", width:90, align:\"center\", formatter:\"tickCross\", sorter:\"boolean\", editor:true} ];    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1820,
        "wires": [
            [
                "d5933dbc.dac09",
                "c902d689.83bcc8"
            ]
        ]
    },
    {
        "id": "258fac5.fdb1154",
        "type": "inject",
        "z": "857c3f85.fb474",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select",
        "payload": "current",
        "payloadType": "str",
        "x": 210,
        "y": 1860,
        "wires": [
            [
                "ffa05174.4f05"
            ]
        ]
    },
    {
        "id": "f8d159d1.ba5ee8",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "name": "File Types Select",
        "label": "File Types",
        "tooltip": "",
        "place": "Select option",
        "group": "4b8f01ce.69f01",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Current files",
                "value": "current",
                "type": "str"
            },
            {
                "label": "Pending Files",
                "value": "pending",
                "type": "str"
            },
            {
                "label": "History Files",
                "value": "history",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "select",
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "ffa05174.4f05"
            ]
        ]
    },
    {
        "id": "9a3ff444.7f8318",
        "type": "ui_dropdown",
        "z": "3022fd6.d249f02",
        "name": "",
        "label": "Device",
        "tooltip": "",
        "place": "Select option",
        "group": "9a132943.aaa4f8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "select",
        "x": 610,
        "y": 1960,
        "wires": [
            [
                "75d9da66.6f3b54"
            ]
        ]
    },
    {
        "id": "5d80dcf1.d780e4",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "Graphs Tick (15s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "refresh",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1960,
        "wires": [
            [
                "f148e892.d94248",
                "75d9da66.6f3b54"
            ]
        ]
    },
    {
        "id": "c608d896.b8abe8",
        "type": "ui_dropdown",
        "z": "3022fd6.d249f02",
        "name": "",
        "label": "Measurement",
        "tooltip": "",
        "place": "Select option",
        "group": "9a132943.aaa4f8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "select",
        "x": 640,
        "y": 2020,
        "wires": [
            [
                "fa2dd50f.db26f8"
            ]
        ]
    },
    {
        "id": "8393913c.f3e47",
        "type": "ui_chart",
        "z": "3022fd6.d249f02",
        "name": "Chart 1",
        "group": "910d5a55.e2cb88",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 460,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "8622497d.081ee8",
        "type": "ui_gauge",
        "z": "3022fd6.d249f02",
        "name": "Gauge 1",
        "group": "910d5a55.e2cb88",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.title}}",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 460,
        "y": 2480,
        "wires": []
    },
    {
        "id": "dea8d9e7.94abd8",
        "type": "ui_table",
        "z": "3022fd6.d249f02",
        "group": "910d5a55.e2cb88",
        "name": "Table 1",
        "order": 4,
        "width": "6",
        "height": "6",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "60%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 460,
        "y": 2520,
        "wires": []
    },
    {
        "id": "f148e892.d94248",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph Select Dev",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\ndataLoggerGraphs = dataLogger.graphs;\nif (!dataLoggerGraphs) {\n    dataLoggerGraphs = {\n        graphList : []\n    };\n    cnt = 0;\n    while(cnt < 4) {\n        dataLoggerGraphs.graphList.push({\n            devName    : \"\",\n            measName   : \"\",\n            count      : 0,\n            table_full : 0,\n            min        : null,\n            max        : null\n        })\n        cnt++;\n    }\n    global.set(\"dataLogger\", dataLogger, \"config\");\n}\n\ngraphSelect = global.get(\"graphSelect\", \"memoryOnly\");\nif (!graphSelect) {\n    graphSelect = {\n        devName  : \"\",\n        measName : \"\"\n    };\n    global.set(\"graphSelect\", graphSelect, \"memoryOnly\");\n}\n\nif (msg.topic == \"init\") {\n    graphSelect.devName  = \"\";\n    global.set(\"graphSelect\", graphSelect, \"memoryOnly\");\n}\n\nmonitorList = dataLogger.monitor.deviceList;\nmsg.options = [];\nfor (var devName in monitorList) {\n    msg.options.push(devName);\n}\n\nmsg.payload = graphSelect.devName;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1960,
        "wires": [
            [
                "9a3ff444.7f8318",
                "3974fe9f.ba9c02"
            ]
        ]
    },
    {
        "id": "75d9da66.6f3b54",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph Select Meas",
        "func": "msg.options = [];\ngraphSelect = global.get(\"graphSelect\", \"memoryOnly\") || { };\ndataLogger  = global.get(\"dataLogger\", \"config\");\ndataLoggerGraphs = dataLogger.graphs;\nif (!dataLoggerGraphs)\n    return null;\n\nif (msg.topic == \"init\") {\n    graphSelect.measName = \"\";\n    global.set(\"graphSelect\", graphSelect, \"memoryOnly\");\n    return msg;\n}\nelse if (msg.topic == \"select\") {\n    if (!msg.payload)\n        return null;\n\n    graphSelect.devName = msg.payload;\n    global.set(\"graphSelect\", graphSelect, \"memoryOnly\");\n}\nelse if (msg.topic == \"refresh\") {\n    \n}\nelse\n    return null;\n\ndevName = graphSelect.devName;\nmonitorList = dataLogger.monitor.deviceList;\nif ( (!monitorList) || (!devName) )\n    return null;\n\nif (!monitorList[devName]) {\n    node.warn(msg.topic + \":\" + devName + \":\" + msg.payload);\n    return null;\n}\nmeasList = monitorList[devName].measList;\nif (!measList)\n    return null;\n\nfor (var measName in measList) {\n    msg.options.push(measName);\n}\n\nif (graphSelect.measName)\n    msg.payload = graphSelect.measName;\nelse\n    msg.payload = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2020,
        "wires": [
            [
                "c608d896.b8abe8",
                "47b3bc58.c0d5e4"
            ]
        ]
    },
    {
        "id": "d4b0b8ed.aaea68",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: Graphs (IN)",
        "links": [
            "b8424f3b.34841"
        ],
        "x": 135,
        "y": 2280,
        "wires": [
            [
                "f689daea.941d98"
            ]
        ]
    },
    {
        "id": "c2164df2.60ec7",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph 1",
        "func": "INDEX=1\nTABLE_MAX_LINES=500\n\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\nif (!dataLogger || !dataLoggerStatus || !dataLogger.graphs || !dataLoggerStatus.graphs || !dataLogger.monitor)\n    return [ null, null, null ];\n\nmonitorList = dataLogger.monitor.deviceList;\ndataLoggerGraphs       = dataLogger.graphs;\ndataLoggerStatusGraphs = dataLoggerStatus.graphs;\n\nif (!dataLoggerGraphs.graphList[INDEX - 1]) {\n    dataLoggerGraphs.graphList[INDEX - 1] = { devName : \"\", measName : \"\" };\n    dataLogger.graphs = dataLoggerGraphs;\n    global.set(\"dataLogger\", dataLogger, \"config\");\n}\ngraph = dataLoggerGraphs.graphList[INDEX - 1];\ngraphDevName  = graph.devName;\ngraphMeasName = graph.measName;\n\nmsgTemplate = { payload : [] };\nmsgData = { payload : msg.payload };\nmsgTable = { payload : [] };\naddHeader = false;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"config/apply\") ) {\n    msgData     = { payload : [] };\n    msgTable    = { payload : [] };\n    addHeader = true;\n    msgData   = null;\n    msgTable  = null;\n    if (!dataLoggerStatusGraphs.graphList[INDEX - 1])\n        dataLoggerStatusGraphs.graphList[INDEX - 1] = {};\n    dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n    dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n}\nelse if (msg.topic == \"add\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if (msg.topic == \"del\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if ( (msg.item.name == graphDevName) &&\n          (msg.meas.name == graphMeasName) ) {\n    /* DATOS */\n    msgTemplate = null;\n\n    /* MIN / MAX */\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].min === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min > msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].min = msg.payload;\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].max === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max < msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].max = msg.payload;\n\n    msgData = {\n        payload : msg.payload,\n        topic   : msg.meas.type || \"\",\n        label   : msg.meas.units || \"\",\n        title   : msg.meas.description || \"\",\n        ui_control : {\n            min : dataLoggerStatusGraphs.graphList[INDEX - 1].min,\n            max : dataLoggerStatusGraphs.graphList[INDEX - 1].max,\n            units : msg.meas.units || \"\", // \"kkita\",\n            title : msg.meas.description || \"\", // \"kkota\"\n        }\n    };\n    \n    /* Counter / Table_full */\n    if (++dataLoggerStatusGraphs.graphList[INDEX - 1].count > TABLE_MAX_LINES)\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = true\n    if (dataLoggerStatusGraphs.graphList[INDEX - 1].table_full) {\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n        dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n        msgTable2 = RED.util.cloneMessage(msgTable);\n        msgTable2.payload = [];\n        /*msgTable2.payload = {\n            command: \"deleteRow\",\n            arguments: [ 1 ], //[ TABLE_MAX_LINES ],\n            //returnPromise: true\n        };*/\n        node.send([ null, null, msgTable2 ]);\n        //return [ null, null, msgTable2 ];\n    }\n    msgTable.payload = {\n        command: \"addRow\",\n        arguments: [\n            {\n                \"timestamp\" : msg.timestamp.toLocaleString(),\n                \"value\"     : msg.payload\n            },\n            true\n        ],\n        //returnPromise: true\n    };\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus)\n}\nelse {\n    return [ null,  null, null ]\n}\n\nif (addHeader) {\n    device = {};\n    meas   = {};\n    if ( (monitorList) &&\n         (graphDevName) && (graphMeasName) ) {\n        device = monitorList[graphDevName] || {};\n        meas = device.measList[graphMeasName] || {};\n    }\n    msgTemplate.payload = [\n        { title : \"Device Name\", value : device.name || \"\"},\n        { title : \"Device Model\", value : device.model || \"\" },\n        { title : \"Device Serial\", value : device.serial || \"\" },\n        { title : \"Measurement Name\", value : meas.name || \"\" },\n        { title : \"Measurement Type\", value : meas.type || \"\" },\n        { title : \"Measurement ID\", value : meas.ID || \"\" },\n        { title : \"Enabled\", value : device ? (device.enabled && meas.enabled) : \"\" },\n    ];\n}\nnode.done();\nreturn [ msgTemplate, msgData, msgTable ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 2380,
        "wires": [
            [
                "45921c64.d912e4",
                "72f5bc3c.2b2d34"
            ],
            [
                "8393913c.f3e47",
                "8622497d.081ee8",
                "2d3fc3a0.806c7c"
            ],
            [
                "dea8d9e7.94abd8",
                "668ef130.dc9a"
            ]
        ]
    },
    {
        "id": "72f5bc3c.2b2d34",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Graphs IN Template",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 210,
        "y": 2460,
        "wires": []
    },
    {
        "id": "999bc29d.e9d03",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "Graphs",
        "info": "",
        "x": 150,
        "y": 1900,
        "wires": []
    },
    {
        "id": "3eaed529.b333ca",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "Graphs INIT (5s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2120,
        "wires": [
            [
                "f148e892.d94248",
                "7d74760f.d04b98",
                "75d9da66.6f3b54"
            ]
        ]
    },
    {
        "id": "b573ec50.b2055",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "add1",
        "group": "9a132943.aaa4f8",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add_circle",
        "payload": "1",
        "payloadType": "num",
        "topic": "add",
        "x": 1030,
        "y": 1900,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "b362b4f6.b785d8",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "add2",
        "group": "9a132943.aaa4f8",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add_circle",
        "payload": "2",
        "payloadType": "num",
        "topic": "add",
        "x": 1030,
        "y": 1940,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "8f356389.043bc",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "add3",
        "group": "9a132943.aaa4f8",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "3",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add_circle",
        "payload": "3",
        "payloadType": "num",
        "topic": "add",
        "x": 1030,
        "y": 1980,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "5a8fce18.099b9",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "add4",
        "group": "9a132943.aaa4f8",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "4",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add_circle",
        "payload": "4",
        "payloadType": "num",
        "topic": "add",
        "x": 1030,
        "y": 2020,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "3ed25151.3eda4e",
        "type": "ui_chart",
        "z": "3022fd6.d249f02",
        "name": "Chart 2",
        "group": "69d2e48d.5fb83c",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 820,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "c1af2966.2c27c8",
        "type": "ui_gauge",
        "z": "3022fd6.d249f02",
        "name": "Gauge 2",
        "group": "69d2e48d.5fb83c",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.title}}",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 820,
        "y": 2480,
        "wires": []
    },
    {
        "id": "fa2dd50f.db26f8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph Select",
        "func": "graphSelect = global.get(\"graphSelect\", \"memoryOnly\");\nif (!graphSelect)\n    return null;\n\nif (!msg.payload)\n    return null;\n\ngraphSelect.measName = msg.payload;\nglobal.set(\"graphSelect\", graphSelect, \"memoryOnly\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "842a64e1.892ee8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph Action",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger  = global.get(\"dataLogger\", \"config\");\ngraphSelect = global.get(\"graphSelect\", \"memoryOnly\");\nif (!graphSelect || !dataLogger || !dataLogger.graphs)\n    return null;\n\ndataLoggerStatusGraphs = dataLoggerStatus.graphs || { };\ndataLoggerGraphs = dataLogger.graphs || { };\nif (!dataLoggerGraphs.graphList)\n    dataLoggerGraphs.graphList = [];\n\nindex = msg.payload - 1;\nif (msg.topic == \"add\") {\n    if ( (!graphSelect.devName) || (!graphSelect.measName) )\n        return null;\n    if ( (dataLoggerGraphs.graphList[index]) &&\n         (dataLoggerGraphs.graphList[index].devName == graphSelect.devName) &&\n         (dataLoggerGraphs.graphList[index].measName == graphSelect.measName) )\n        return null;\n    dataLoggerStatusGraphs.graphList[index] = {\n        count      : 0,\n        table_full : false,\n        min        : null,\n        max        : null\n    }\n    dataLoggerGraphs.graphList[index] = {\n        devName    : graphSelect.devName,\n        measName   : graphSelect.measName,\n    }\n}\nelse if (msg.topic == \"del\") {\n    dataLoggerGraphs.graphList[index].devName  = \"\";\n    dataLoggerGraphs.graphList[index].measName = \"\";\n}\nelse if (msg.topic == \"init\") {\n    return msg;\n}\n\ndataLogger.graphs       = dataLoggerGraphs;\ndataLoggerStatus.graphs = dataLoggerStatusGraphs;\nglobal.set(\"dataLogger\", dataLogger, \"config\");\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 2040,
        "wires": [
            [
                "7d74760f.d04b98"
            ]
        ]
    },
    {
        "id": "a93e68d0.22b288",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "del1",
        "group": "9a132943.aaa4f8",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "remove_circle",
        "payload": "1",
        "payloadType": "num",
        "topic": "del",
        "x": 1030,
        "y": 2060,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "2976a7ce.779c08",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "del2",
        "group": "9a132943.aaa4f8",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "remove_circle",
        "payload": "2",
        "payloadType": "num",
        "topic": "del",
        "x": 1030,
        "y": 2100,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "749a21ea.30c36",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "del3",
        "group": "9a132943.aaa4f8",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "3",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "remove_circle",
        "payload": "3",
        "payloadType": "num",
        "topic": "del",
        "x": 1030,
        "y": 2140,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "53df8b2.9d62f74",
        "type": "ui_button",
        "z": "3022fd6.d249f02",
        "name": "del4",
        "group": "9a132943.aaa4f8",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "4",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "remove_circle",
        "payload": "4",
        "payloadType": "num",
        "topic": "del",
        "x": 1030,
        "y": 2180,
        "wires": [
            [
                "842a64e1.892ee8"
            ]
        ]
    },
    {
        "id": "45921c64.d912e4",
        "type": "ui_template",
        "z": "3022fd6.d249f02",
        "group": "910d5a55.e2cb88",
        "name": "Template 1",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<table border=\"0\">\n    <tr style=\"font-size:14px\" ng-repeat=\"row in msg.payload\">\n        <td><b>{{row.title}}</b></td>\n        <td>{{row.value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 470,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "7d74760f.d04b98",
        "type": "delay",
        "z": "3022fd6.d249f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 710,
        "y": 2280,
        "wires": [
            [
                "c2164df2.60ec7",
                "d76c6ce.a246b9",
                "473ccd3a.82ea44",
                "d9934129.e74a3"
            ]
        ]
    },
    {
        "id": "47b3bc58.c0d5e4",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Graphs Select Meas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2080,
        "wires": []
    },
    {
        "id": "668ef130.dc9a",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Graphs Table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 190,
        "y": 2540,
        "wires": []
    },
    {
        "id": "2d3fc3a0.806c7c",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Graphs IN Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 190,
        "y": 2500,
        "wires": []
    },
    {
        "id": "3974fe9f.ba9c02",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Graphs Select Dev",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1900,
        "wires": []
    },
    {
        "id": "7ba23548.02ab9c",
        "type": "ui_table",
        "z": "3022fd6.d249f02",
        "group": "69d2e48d.5fb83c",
        "name": "Table 2",
        "order": 4,
        "width": "6",
        "height": "6",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "60%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2520,
        "wires": []
    },
    {
        "id": "8574bdb4.3d42e",
        "type": "ui_template",
        "z": "3022fd6.d249f02",
        "group": "69d2e48d.5fb83c",
        "name": "Template 2",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<table border=\"0\">\n    <tr style=\"font-size:14px\" ng-repeat=\"row in msg.payload\">\n        <td><b>{{row.title}}</b></td>\n        <td>{{row.value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 830,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "d76c6ce.a246b9",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph 2",
        "func": "INDEX=2\nTABLE_MAX_LINES=500\n\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\nif (!dataLogger || !dataLoggerStatus || !dataLogger.graphs || !dataLoggerStatus.graphs || !dataLogger.monitor)\n    return [ null, null, null ];\n\nmonitorList = dataLogger.monitor.deviceList;\ndataLoggerGraphs       = dataLogger.graphs;\ndataLoggerStatusGraphs = dataLoggerStatus.graphs;\n\nif (!dataLoggerGraphs.graphList[INDEX - 1]) {\n    dataLoggerGraphs.graphList[INDEX - 1] = { devName : \"\", measName : \"\" };\n    dataLogger.graphs = dataLoggerGraphs;\n    global.set(\"dataLogger\", dataLogger, \"config\");\n}\ngraph = dataLoggerGraphs.graphList[INDEX - 1];\ngraphDevName  = graph.devName;\ngraphMeasName = graph.measName;\n\nmsgTemplate = { payload : [] };\nmsgData = { payload : msg.payload };\nmsgTable = { payload : [] };\naddHeader = false;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"config/apply\") ) {\n    msgData     = { payload : [] };\n    msgTable    = { payload : [] };\n    addHeader = true;\n    msgData   = null;\n    msgTable  = null;\n    if (!dataLoggerStatusGraphs.graphList[INDEX - 1])\n        dataLoggerStatusGraphs.graphList[INDEX - 1] = {};\n    dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n    dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n}\nelse if (msg.topic == \"add\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if (msg.topic == \"del\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if ( (msg.item.name == graphDevName) &&\n          (msg.meas.name == graphMeasName) ) {\n    /* DATOS */\n    msgTemplate = null;\n\n    /* MIN / MAX */\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].min === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min > msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].min = msg.payload;\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].max === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max < msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].max = msg.payload;\n\n    msgData = {\n        payload : msg.payload,\n        topic   : msg.meas.type || \"\",\n        label   : msg.meas.units || \"\",\n        title   : msg.meas.description || \"\",\n        ui_control : {\n            min : dataLoggerStatusGraphs.graphList[INDEX - 1].min,\n            max : dataLoggerStatusGraphs.graphList[INDEX - 1].max,\n            units : msg.meas.units || \"\", // \"kkita\",\n            title : msg.meas.description || \"\", // \"kkota\"\n        }\n    };\n    \n    /* Counter / Table_full */\n    if (++dataLoggerStatusGraphs.graphList[INDEX - 1].count > TABLE_MAX_LINES)\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = true\n    if (dataLoggerStatusGraphs.graphList[INDEX - 1].table_full) {\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n        dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n        msgTable2 = RED.util.cloneMessage(msgTable);\n        msgTable2.payload = [];\n        /*msgTable2.payload = {\n            command: \"deleteRow\",\n            arguments: [ 1 ], //[ TABLE_MAX_LINES ],\n            //returnPromise: true\n        };*/\n        node.send([ null, null, msgTable2 ]);\n        //return [ null, null, msgTable2 ];\n    }\n    msgTable.payload = {\n        command: \"addRow\",\n        arguments: [\n            {\n                \"timestamp\" : msg.timestamp.toLocaleString(),\n                \"value\"     : msg.payload\n            },\n            true\n        ],\n        //returnPromise: true\n    };\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus)\n}\nelse {\n    return [ null,  null, null ]\n}\n\nif (addHeader) {\n    device = {};\n    meas   = {};\n    if ( (monitorList) &&\n         (graphDevName) && (graphMeasName) ) {\n        device = monitorList[graphDevName] || {};\n        meas = device.measList[graphMeasName] || {};\n    }\n    msgTemplate.payload = [\n        { title : \"Device Name\", value : device.name || \"\"},\n        { title : \"Device Model\", value : device.model || \"\" },\n        { title : \"Device Serial\", value : device.serial || \"\" },\n        { title : \"Measurement Name\", value : meas.name || \"\" },\n        { title : \"Measurement Type\", value : meas.type || \"\" },\n        { title : \"Measurement ID\", value : meas.ID || \"\" },\n        { title : \"Enabled\", value : device ? (device.enabled && meas.enabled) : \"\" },\n    ];\n}\nnode.done();\nreturn [ msgTemplate, msgData, msgTable ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 2380,
        "wires": [
            [
                "8574bdb4.3d42e"
            ],
            [
                "3ed25151.3eda4e",
                "c1af2966.2c27c8"
            ],
            [
                "7ba23548.02ab9c"
            ]
        ]
    },
    {
        "id": "178c8c92.902023",
        "type": "ui_chart",
        "z": "3022fd6.d249f02",
        "name": "Chart 3",
        "group": "4486389f.2e9958",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1200,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "686b80d8.ceb06",
        "type": "ui_gauge",
        "z": "3022fd6.d249f02",
        "name": "Gauge 3",
        "group": "4486389f.2e9958",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.title}}",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1200,
        "y": 2480,
        "wires": []
    },
    {
        "id": "77e1b010.9525b",
        "type": "ui_table",
        "z": "3022fd6.d249f02",
        "group": "4486389f.2e9958",
        "name": "Table 3",
        "order": 4,
        "width": "6",
        "height": "6",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "60%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1200,
        "y": 2520,
        "wires": []
    },
    {
        "id": "ac380367.b840e",
        "type": "ui_template",
        "z": "3022fd6.d249f02",
        "group": "4486389f.2e9958",
        "name": "Template 3",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<table border=\"0\">\n    <tr style=\"font-size:14px\" ng-repeat=\"row in msg.payload\">\n        <td><b>{{row.title}}</b></td>\n        <td>{{row.value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1210,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "473ccd3a.82ea44",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph 3",
        "func": "INDEX=3\nTABLE_MAX_LINES=500\n\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\nif (!dataLogger || !dataLoggerStatus || !dataLogger.graphs || !dataLoggerStatus.graphs || !dataLogger.monitor)\n    return [ null, null, null ];\n\nmonitorList = dataLogger.monitor.deviceList;\ndataLoggerGraphs       = dataLogger.graphs;\ndataLoggerStatusGraphs = dataLoggerStatus.graphs;\n\nif (!dataLoggerGraphs.graphList[INDEX - 1]) {\n    dataLoggerGraphs.graphList[INDEX - 1] = { devName : \"\", measName : \"\" };\n    dataLogger.graphs = dataLoggerGraphs;\n    global.set(\"dataLogger\", dataLogger, \"config\");\n}\ngraph = dataLoggerGraphs.graphList[INDEX - 1];\ngraphDevName  = graph.devName;\ngraphMeasName = graph.measName;\n\nmsgTemplate = { payload : [] };\nmsgData = { payload : msg.payload };\nmsgTable = { payload : [] };\naddHeader = false;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"config/apply\") ) {\n    msgData     = { payload : [] };\n    msgTable    = { payload : [] };\n    addHeader = true;\n    msgData   = null;\n    msgTable  = null;\n    if (!dataLoggerStatusGraphs.graphList[INDEX - 1])\n        dataLoggerStatusGraphs.graphList[INDEX - 1] = {};\n    dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n    dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n}\nelse if (msg.topic == \"add\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if (msg.topic == \"del\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if ( (msg.item.name == graphDevName) &&\n          (msg.meas.name == graphMeasName) ) {\n    /* DATOS */\n    msgTemplate = null;\n\n    /* MIN / MAX */\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].min === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min > msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].min = msg.payload;\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].max === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max < msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].max = msg.payload;\n\n    msgData = {\n        payload : msg.payload,\n        topic   : msg.meas.type || \"\",\n        label   : msg.meas.units || \"\",\n        title   : msg.meas.description || \"\",\n        ui_control : {\n            min : dataLoggerStatusGraphs.graphList[INDEX - 1].min,\n            max : dataLoggerStatusGraphs.graphList[INDEX - 1].max,\n            units : msg.meas.units || \"\", // \"kkita\",\n            title : msg.meas.description || \"\", // \"kkota\"\n        }\n    };\n    \n    /* Counter / Table_full */\n    if (++dataLoggerStatusGraphs.graphList[INDEX - 1].count > TABLE_MAX_LINES)\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = true\n    if (dataLoggerStatusGraphs.graphList[INDEX - 1].table_full) {\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n        dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n        msgTable2 = RED.util.cloneMessage(msgTable);\n        msgTable2.payload = [];\n        /*msgTable2.payload = {\n            command: \"deleteRow\",\n            arguments: [ 1 ], //[ TABLE_MAX_LINES ],\n            //returnPromise: true\n        };*/\n        node.send([ null, null, msgTable2 ]);\n        //return [ null, null, msgTable2 ];\n    }\n    msgTable.payload = {\n        command: \"addRow\",\n        arguments: [\n            {\n                \"timestamp\" : msg.timestamp.toLocaleString(),\n                \"value\"     : msg.payload\n            },\n            true\n        ],\n        //returnPromise: true\n    };\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus)\n}\nelse {\n    return [ null,  null, null ]\n}\n\nif (addHeader) {\n    device = {};\n    meas   = {};\n    if ( (monitorList) &&\n         (graphDevName) && (graphMeasName) ) {\n        device = monitorList[graphDevName] || {};\n        meas = device.measList[graphMeasName] || {};\n    }\n    msgTemplate.payload = [\n        { title : \"Device Name\", value : device.name || \"\"},\n        { title : \"Device Model\", value : device.model || \"\" },\n        { title : \"Device Serial\", value : device.serial || \"\" },\n        { title : \"Measurement Name\", value : meas.name || \"\" },\n        { title : \"Measurement Type\", value : meas.type || \"\" },\n        { title : \"Measurement ID\", value : meas.ID || \"\" },\n        { title : \"Enabled\", value : device ? (device.enabled && meas.enabled) : \"\" },\n    ];\n}\nnode.done();\nreturn [ msgTemplate, msgData, msgTable ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 2380,
        "wires": [
            [
                "ac380367.b840e"
            ],
            [
                "178c8c92.902023",
                "686b80d8.ceb06"
            ],
            [
                "77e1b010.9525b"
            ]
        ]
    },
    {
        "id": "705bdc1b.44ec04",
        "type": "ui_chart",
        "z": "3022fd6.d249f02",
        "name": "Chart 4",
        "group": "739177af.0accb8",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1580,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "232f5cdc.9b0904",
        "type": "ui_gauge",
        "z": "3022fd6.d249f02",
        "name": "Gauge 4",
        "group": "739177af.0accb8",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.title}}",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b4e9e1cf.85a79",
        "type": "ui_table",
        "z": "3022fd6.d249f02",
        "group": "739177af.0accb8",
        "name": "Table 4",
        "order": 4,
        "width": "6",
        "height": "6",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "60%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1580,
        "y": 2520,
        "wires": []
    },
    {
        "id": "f99ae8dc.bea118",
        "type": "ui_template",
        "z": "3022fd6.d249f02",
        "group": "739177af.0accb8",
        "name": "Template 4",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<table border=\"0\">\n    <tr style=\"font-size:14px\" ng-repeat=\"row in msg.payload\">\n        <td><b>{{row.title}}</b></td>\n        <td>{{row.value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1590,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "d9934129.e74a3",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Graph 4",
        "func": "INDEX=4\nTABLE_MAX_LINES=500\n\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndataLogger       = global.get(\"dataLogger\", \"config\");\nif (!dataLogger || !dataLoggerStatus || !dataLogger.graphs || !dataLoggerStatus.graphs || !dataLogger.monitor)\n    return [ null, null, null ];\n\nmonitorList = dataLogger.monitor.deviceList;\ndataLoggerGraphs       = dataLogger.graphs;\ndataLoggerStatusGraphs = dataLoggerStatus.graphs;\n\nif (!dataLoggerGraphs.graphList[INDEX - 1]) {\n    dataLoggerGraphs.graphList[INDEX - 1] = { devName : \"\", measName : \"\" };\n    dataLogger.graphs = dataLoggerGraphs;\n    global.set(\"dataLogger\", dataLogger, \"config\");\n}\ngraph = dataLoggerGraphs.graphList[INDEX - 1];\ngraphDevName  = graph.devName;\ngraphMeasName = graph.measName;\n\nmsgTemplate = { payload : [] };\nmsgData = { payload : msg.payload };\nmsgTable = { payload : [] };\naddHeader = false;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"config/apply\") ) {\n    msgData     = { payload : [] };\n    msgTable    = { payload : [] };\n    addHeader = true;\n    msgData   = null;\n    msgTable  = null;\n    if (!dataLoggerStatusGraphs.graphList[INDEX - 1])\n        dataLoggerStatusGraphs.graphList[INDEX - 1] = {};\n    dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n    dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus);\n}\nelse if (msg.topic == \"add\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if (msg.topic == \"del\") {\n    if (msg.payload == INDEX) {\n        addHeader = true;\n        msgData   = { payload : [] };\n    }\n    else\n        return [ null, null, null ];\n}\nelse if ( (msg.item.name == graphDevName) &&\n          (msg.meas.name == graphMeasName) ) {\n    /* DATOS */\n    msgTemplate = null;\n\n    /* MIN / MAX */\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].min === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].min > msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].min = msg.payload;\n    if ( (dataLoggerStatusGraphs.graphList[INDEX - 1].max === null) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max === undefined) ||\n         (dataLoggerStatusGraphs.graphList[INDEX - 1].max < msg.payload) )\n        dataLoggerStatusGraphs.graphList[INDEX - 1].max = msg.payload;\n\n    msgData = {\n        payload : msg.payload,\n        topic   : msg.meas.type || \"\",\n        label   : msg.meas.units || \"\",\n        title   : msg.meas.description || \"\",\n        ui_control : {\n            min : dataLoggerStatusGraphs.graphList[INDEX - 1].min,\n            max : dataLoggerStatusGraphs.graphList[INDEX - 1].max,\n            units : msg.meas.units || \"\", // \"kkita\",\n            title : msg.meas.description || \"\", // \"kkota\"\n        }\n    };\n    \n    /* Counter / Table_full */\n    if (++dataLoggerStatusGraphs.graphList[INDEX - 1].count > TABLE_MAX_LINES)\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = true\n    if (dataLoggerStatusGraphs.graphList[INDEX - 1].table_full) {\n        dataLoggerStatusGraphs.graphList[INDEX - 1].table_full = false;\n        dataLoggerStatusGraphs.graphList[INDEX - 1].count = 0;\n        msgTable2 = RED.util.cloneMessage(msgTable);\n        msgTable2.payload = [];\n        /*msgTable2.payload = {\n            command: \"deleteRow\",\n            arguments: [ 1 ], //[ TABLE_MAX_LINES ],\n            //returnPromise: true\n        };*/\n        node.send([ null, null, msgTable2 ]);\n        //return [ null, null, msgTable2 ];\n    }\n    msgTable.payload = {\n        command: \"addRow\",\n        arguments: [\n            {\n                \"timestamp\" : msg.timestamp.toLocaleString(),\n                \"value\"     : msg.payload\n            },\n            true\n        ],\n        //returnPromise: true\n    };\n    dataLoggerStatus.graphs = dataLoggerStatusGraphs;\n    global.set(\"dataLoggerStatus\", dataLoggerStatus)\n}\nelse {\n    return [ null,  null, null ]\n}\n\nif (addHeader) {\n    device = {};\n    meas   = {};\n    if ( (monitorList) &&\n         (graphDevName) && (graphMeasName) ) {\n        device = monitorList[graphDevName] || {};\n        meas = device.measList[graphMeasName] || {};\n    }\n    msgTemplate.payload = [\n        { title : \"Device Name\", value : device.name || \"\"},\n        { title : \"Device Model\", value : device.model || \"\" },\n        { title : \"Device Serial\", value : device.serial || \"\" },\n        { title : \"Measurement Name\", value : meas.name || \"\" },\n        { title : \"Measurement Type\", value : meas.type || \"\" },\n        { title : \"Measurement ID\", value : meas.ID || \"\" },\n        { title : \"Enabled\", value : device ? (device.enabled && meas.enabled) : \"\" },\n    ];\n}\nnode.done();\nreturn [ msgTemplate, msgData, msgTable ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 2380,
        "wires": [
            [
                "f99ae8dc.bea118"
            ],
            [
                "705bdc1b.44ec04",
                "232f5cdc.9b0904"
            ],
            [
                "b4e9e1cf.85a79"
            ]
        ]
    },
    {
        "id": "9404c07f.8bab7",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Time Configuration",
        "info": "",
        "x": 190,
        "y": 1180,
        "wires": []
    },
    {
        "id": "b798e3f4.ed06e",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Time",
        "tooltip": "HH:MM:SS",
        "group": "9ff99fde.f574e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "time",
        "x": 670,
        "y": 1360,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "9efe4b9c.60bda8",
        "type": "ui_date_picker",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Date",
        "group": "9ff99fde.f574e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "date",
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "9e612664.4b0768",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT:TimeCfg Build",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\") || {};\n\nglobalFuns.tlnt_log(6, \"SystemMgmt\", \"TimeConfig\");\n\ntimeConfiguration = bbgtAgtCfg.time;\nif (!timeConfiguration) {\n    timeConfiguration = {\n        mode       : \"ntp\",\n        ntp_server : \"es.pool.ntp.org\",\n        timezone   : \"Europe/Madrid\"\n    }\n    bbgtAgtCfg.time = timeConfiguration;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n}\n\nenabled       = true;\nenabledManual = (timeConfiguration.mode == \"manual\");\nenabledNTP    = (timeConfiguration.mode == \"ntp\");\n\nenv = global.get(\"env\");\nenv.TZ = timeConfiguration.timezone;\n\nts = new Date(msg.payload);\ndate_str = globalFuns.local_date_string(ts);\ntime_str = globalFuns.local_time_string(ts);\n\nmsgNow  = { payload : date_str + \" \" + time_str };\nmsgDate = { payload : ts.getTime(), enabled : enabled && enabledManual };\nmsgTime = { payload : time_str, enabled : enabled && enabledManual };\n\ntzlist = undefined;\nif (msg.topic == \"init\") {\n    cp = global.get(\"child_process\");\n    try {\n        tzresult = cp.execSync(\"timedatectl list-timezones\", { encoding : \"ascii\"} );\n        tzlist = tzresult.split(\"\\n\");\n    }\n    catch(e) {\n        tzlist = [ \"Europe/Madrid\", \"UTC\" ]\n    }\n}\n\nif ( (msg.topic == \"init\") || (msg.topic == \"refresh\") ) {\n    msgTZ   = { payload : timeConfiguration.timezone , enabled : enabled };\n    if (tzlist)\n        msgTZ.options = tzlist;\n    msgMode = { payload : timeConfiguration.mode , enabled : enabled };\n    msgNTPServer = { payload : timeConfiguration.ntp_server , enabled : enabled && enabledNTP};\n}\nelse {\n    msgTZ        = null;\n    msgMode      = null;\n    msgNTPServer = null;\n}\n\nif ( (msg.topic == \"tick\") && (enabledManual) ) {\n    msgDate = null;\n    msgTime = null;\n}\n\nreturn [ msgNow, msgTZ, msgMode, msgDate, msgTime, msgNTPServer ];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1280,
        "wires": [
            [
                "adbd870d.95c968"
            ],
            [
                "fcdb28da.ff73c8"
            ],
            [
                "28d5d1e7.27016e"
            ],
            [
                "9efe4b9c.60bda8"
            ],
            [
                "b798e3f4.ed06e"
            ],
            [
                "c818a34.6e5326"
            ]
        ]
    },
    {
        "id": "c818a34.6e5326",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Time Server",
        "tooltip": "",
        "group": "9ff99fde.f574e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "ntp_server",
        "x": 690,
        "y": 1400,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "28d5d1e7.27016e",
        "type": "ui_dropdown",
        "z": "31c39280.4de9fe",
        "name": "Time Config Mode",
        "label": "Time Config Mode",
        "tooltip": "",
        "place": "Select option",
        "group": "9ff99fde.f574e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Manual configuration",
                "value": "manual",
                "type": "str"
            },
            {
                "label": "NTP",
                "value": "ntp",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "mode",
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "d6976b68.bb17c8",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: TimeCfg Action",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\ntimeConfiguration = bbgtAgtCfg.time;\nif (!timeConfiguration)\n    return null;\nglobalFuns  = global.get(\"globalFuns\");\n\ntmpTimeConfiguration = flow.get(\"tmpTimeConfiguration\", \"memoryOnly\");\nif (!tmpTimeConfiguration) {\n    tmpTimeConfiguration = RED.util.cloneMessage(timeConfiguration);\n}\n\nglobalFuns.tlnt_log(3, \"SystemMgmt\", \"TimeConfig: \" + msg.topic);\n\nif ( (msg.topic == \"save\") || (msg.topic == \"config/apply\") ) {\n    if (msg.topic == \"save\") {\n        timeConfiguration = RED.util.cloneMessage(tmpTimeConfiguration);\n        bbgtAgtCfg.time = timeConfiguration;\n        global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n    }\n    else\n        timeConfiguration = bbgtAgtCfg.time;\n\n    cp = global.get(\"child_process\");\n\n    if (timeConfiguration.mode == \"ntp\") {\n        fs = global.get(\"fs\");\n        data =\n            \"# File auto-generated by Nod-Red BabelGate Agent\\n\" +\n            \"[Time]\\n\" +\n            \"NTP=\" + timeConfiguration.ntp_server + \"\\n\";\n        fs.writeFileSync(\"/etc/systemd/timesyncd.conf\", data, \"ascii\");\n        cp.execSync(\"systemctl restart systemd-timesyncd.service\")\n    }\n    \n    cp.execSync(\"timedatectl set-timezone \" + timeConfiguration.timezone);\n    enable_ntp = (timeConfiguration.mode == \"ntp\") ? \"on\" : \"off\";\n    cp.execSync(\"timedatectl set-ntp \" + enable_ntp);\n    if ( (timeConfiguration.mode == \"manual\") && (timeConfiguration.date) ) {\n        date = new Date(timeConfiguration.date)\n        date_str = globalFuns.local_date_string(date);\n        time_str = timeConfiguration.time;\n        cmd = `hwclock -u --set --date \"${date_str} ${time_str}\"`;\n        cp.execSync(cmd);\n        cp.execSync(\"hwclock -u --hctosys\");\n    }\n\n    msgNotif = {\n        topic   : \"Time Configuration\",\n        payload : \"Configuration saved OK\"\n    };\n    msg.topic = \"refresh\";\n    msg.payload = (new Date()).getTime();\n\n    globalFuns.tlnt_log(3, \"SystemMgmt\", \"TimeConfig: \" + JSON.stringify(timeConfiguration));\n}\nelse if (msg.topic == \"cancel\") {\n    tmpTimeConfiguration = RED.util.cloneMessage(timeConfiguration);\n    flow.set(\"tmpTimeConfiguration\", tmpTimeConfiguration, \"memoryOnly\");\n\n    msg.topic = \"refresh\";\n    msg.payload = (new Date()).getTime();\n\n    msgNotif = null;\n}\nelse {\n    /*if (msg.topic == \"date\") {\n        ts = new Date(msg.payload);\n        msg.payload = globalFuns.local_date_string(ts);\n    }*/\n    \n    tmpTimeConfiguration[msg.topic] = msg.payload;\n    flow.set(\"tmpTimeConfiguration\", tmpTimeConfiguration, \"memoryOnly\");\n    msgNotif = null;\n    msg      = null;\n}\n\nreturn [ msgNotif, msg ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1360,
        "wires": [
            [
                "5e51a0c3.f2bfe"
            ],
            [
                "764a2ada.ea7884"
            ]
        ]
    },
    {
        "id": "58edb797.09b578",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "TimeCfg Tick (1s) [3s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "tick",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "9e612664.4b0768"
            ]
        ]
    },
    {
        "id": "adbd870d.95c968",
        "type": "ui_text",
        "z": "31c39280.4de9fe",
        "group": "9ff99fde.f574e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Now",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 670,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2f9022c.022a1de",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "TimeCfg INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "9e612664.4b0768"
            ]
        ]
    },
    {
        "id": "684042a.88f24bc",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "9ff99fde.f574e",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 670,
        "y": 1440,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "d70a1087.27682",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "9ff99fde.f574e",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Cancel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "cancel",
        "payload": "",
        "payloadType": "str",
        "topic": "cancel",
        "x": 670,
        "y": 1480,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "f5157386.89741",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1020,
        "y": 1300,
        "wires": [
            [
                "d6976b68.bb17c8",
                "6c61f596.56a6ac"
            ]
        ]
    },
    {
        "id": "6c61f596.56a6ac",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: TimeConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1300,
        "wires": []
    },
    {
        "id": "4c16e8ce.3ca0c8",
        "type": "ui_template",
        "z": "857c3f85.fb474",
        "group": "4b8f01ce.69f01",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<script>\n//this.scope.action = function(url) { window.open(url, \"_blank\"); }\nthis.scope.action = function() {\n    var url = document.getElementById(\"csvFileName\").textContent;\n    console.log(\"action:\" + url);\n    //window.open(\"admin\", \"_blank\");\n    window.open(url, \"_blank\"); \n}\n</script>\n<div id=\"csvFileName\" style=\"display: none;\">{{msg.payload.fullname}}</div>\n<B>File:</B>{{msg.payload.basename}}\n<md-button mat-icon-button ng-click=\"action()\" target=\"_blank\">\n    <i class=\"material-icons\">ballot</i>   View CSV File\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1120,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "df15bc57.b95d",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "Startup: INIT",
        "func": "env = global.get(\"env\");\nLOGLEVEL_DEF = 4;\nloglevel_default = env.TLNT_LOGLEVEL || LOGLEVEL_DEF;\n\nloglevel_list_defs = {\n    startup : 0,\n    error   : 1,\n    warning : 2,\n    info    : 3,\n    debug   : 5,\n};\n\nloglevel_list_defs_str = [ \"START\", \"ERROR\", \"WARN\", \"INFO\", \"4\", \"DEBUG\" ];\n\n/****************************************/\n/**\n * \n/****************************************/\nfunction loglevel_set(lvl)\n{\n    global.set(\"tlnt_loglevel\", lvl);\n}\n\n/****************************************/\n/**\n * \n/****************************************/\nfunction loglevel_get()\n{\n    return global.get(\"tlnt_loglevel\") || loglevel_default;\n}\n\n/****************************************/\n/**\n * \n/****************************************/\nfunction _tlnt_log(lvl, module, text)\n{\n    lvl_str = loglevel_list_defs_str[lvl] || \"UNK\";\n    txt = module + \" [\" + lvl_str + \"]: \" + text;\n    node.warn(txt);\n}\n\n/****************************************/\n/**\n * \n/****************************************/\nfunction tlnt_log(lvl, module, text)\n{\n    loglevel = loglevel_get();\n    if (lvl <= loglevel)\n        _tlnt_log(lvl, module, text)\n}\n\n/****************************************/\n/** @brief date_string\n * @param timestamp: Date object\n * @return Fecha en formato AAAA-MM-DD\n/****************************************/\nfunction date_string(timestamp)\n{\n    try { return timestamp.toISOString().split('T')[0]; }\n    catch(e) { return \"\"; }\n}\n\n/****************************************/\n/** @brief local_date_string\n * @param timestamp: Date object\n * @return Fecha en formato AAAA-MM-DD\n/****************************************/\nfunction local_date_string(timestamp)\n{\n    try {\n        return timestamp.getFullYear() + \"-\" + \n            String(timestamp.getMonth() + 1).padStart(2, \"0\") + \"-\" +\n            String(timestamp.getDate()).padStart(2, \"0\");\n    }\n    catch(e) { return \"\"; }\n}\n\n/****************************************/\n/** @brief time_string\n * @param timestamp: Date object\n * @return Fecha en formato HH:MM:SS\n/****************************************/\nfunction time_string(timestamp)\n{\n    try { return timestamp.toISOString().split('T')[1].split('.')[0]; }\n    catch(e) { return \"\"; }\n}\n\n/****************************************/\n/** @brief local_time_string\n * @param timestamp: Date object\n * @return Fecha en formato HH:MM:SS\n/****************************************/\nfunction local_time_string(timestamp)\n{\n    try { return timestamp.toLocaleString(\"es-ES\", {hour12:false}).split(' ')[1]; }\n    catch(e) { return \"\"; }\n}\n\n/****************************************/\n/** @brief simple_date_time_string\n * @param timestamp: Date object\n * @return Fecha-Hora en formato \"AAAA-MM-DD HH-MM-SS (UTC)\"\n/****************************************/\nfunction simple_date_time_string(date)\n{\n    try {\n        fields = date.toISOString().split('T');\n        hour = fields[1].split('.')[0];\n        return fields[0] + \" \" + hour + \" (UTC)\";\n    }\n    catch(e) { return \"\"; }\n}\n\n/****************************************/\n/** @brief loadModule\n * @param module\n * @return Module object\n/****************************************/\nfunction loadModule(module)\n{\n    tlntSettings = global.get(\"tlntSettings\");\n    return tlntSettings.loadModule(module);\n}\n\n/****************************************/\n/** @brief readFile\n * @param filename\n * @return File data if exists\n *         \"\" if file cannot be read\n/****************************************/\nfunction readFile(filename)\n{\n    fs = loadModule(\"fs\");\n    try {\n        data = fs.readFileSync(filename, \"ascii\");\n        return data;\n    }\n    catch (e) {\n        return \"\"\n    }\n}\n\n/****************************************/\n/** @brief readFile\n * @param filename\n * @return Object with data if exists\n *         undefined if file cannot be read or JSON not valid\n/****************************************/\nfunction readFileJSON(filename)\n{\n    data = readFile(filename);\n    if (data) {\n        try {\n            json = JSON.parse(data);\n            return json;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    else {\n        return undefined;\n    }\n}\n\n/****************************************/\n/** @brief execCmd\n * @param cmd\n * @return Object: {\n *                 }\n/****************************************/\nfunction execCmd(cmd)\n{\n    cp = loadModule(\"child_process\");\n    try {\n        result = cp.execSync(cmd, { encoding : \"ascii\" });\n        return {\n            status : 0,\n            stdout : result\n        }\n    }\n    catch (e) {\n        return {\n            status : e.status,\n            e      : e,\n            stdout : e.stdout,\n            stderr : e.stderr\n        }\n    }\n}\n\n/****************************************/\n/** @brief get_mac_address\n * @param ifname\n * @return mac (string)\n/****************************************/\nfunction get_mac_address(ifname)\n{\n    fs = global.get(\"fs\");\n    mac = fs.readFileSync(\"/sys/class/net/\" + ifname + \"/address\", \"ascii\").trimRight();\n    return mac\n}\n\n/****************************************/\n/** @brief update_bbgtAgtInfo_mac_address\n * @param ifname\n/****************************************/\nfunction update_bbgtAgtInfo_mac_address(ifname, mac)\n{\n    bbgtAgtInfo = global.get('bbgtAgtInfo', \"config\") || {};\n    if (!bbgtAgtInfo.macAddressList)\n        bbgtAgtInfo.macAddressList = {};\n    bbgtAgtInfo.macAddressList[ifname] = mac;\n    global.set('bbgtAgtInfo', bbgtAgtInfo, \"config\");\n}\n\n/****************************************/\n/** @brief validate_field\n * @param field\n * @param name\n * @param item\n * @return result\n/****************************************/\nfunction validate_field(field, name, item)\n{\n    result = { status : 0 };\n\n    if (!item || (item[name] === undefined)) {\n        result.status = -1;\n        result.error  = \"Invalid \" + field.name;\n        return result;\n    }\n    if ( (field.type == \"number\") && \n         ( !Number.isInteger(item[name]) || (item[name] < field.min) || (item[name] > field.max) ) ) {\n        result.status = -2;\n        result.error  = \"Invalid \" + field.name;\n        return result;\n    }\n    if ( (field.type == \"boolean\") && (typeof(item[name]) != \"boolean\") ) {\n        result.status = -3;\n        result.error  = \"Invalid \" + field.name;\n        return result;\n    }\n    if (field.type == \"ioname\") {\n        bbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\n        if (!bbgtAgtInfo || !bbgtAgtInfo.translate_io ||\n            !Object.keys(bbgtAgtInfo.translate_io).includes(item[name]) ) {\n            result.status = -4;\n            result.error  = \"Invalid \" + field.name;\n            return result;\n        }\n    }\n    if ( (field.type == \"string\") && (field.regex) ) {\n        try {\n            jsRegex = new RegExp(field.regex).test(item[name]);\n            if (!jsRegex) {\n                result.status = -5;\n                result.error  = \"Invalid \" + field.name;\n                return result;\n            }\n        }\n        catch(e) {\n            node.warn(e);\n            result.status = -6;\n            result.error  = \"Invalid \" + field.name + \" (\" + e + \")\";\n            return result;\n        }\n    }\n\n    return result;\n}\n\n/****************************************/\n/** @brief validate_field\n * @param field_list\n * @param item\n * @return result\n/****************************************/\nfunction validate_fields(field_list, item)\n{\n    result = { status : 0 };\n\n    if (!item)\n        return { status : -1, error : \"Invalid Data\" };\n\n    for (var name in field_list) {\n        result = validate_field(field_list[name], name, item);\n        if (result.status !== 0)\n            return result;\n    }\n    return result;\n}\n\n/****************************************/\n/** @brief gpio_set\n * @param gpio      GPIO Object\n * @param value\n * @param saveFlag  true=Store in context\n *                  false=Do not store in context\n/****************************************/\nfunction gpio_set(gpio, value, saveFlag = true)\n{\n    fs = global.get('fs');\n    try {\n        iopin    = gpio.pin;\n        filename = `/sys/class/gpio/gpio${iopin}/value`;\n        fs.writeFileSync(filename, String(value), \"ascii\");\n \n        if (saveFlag) {\n            bbgtAgtStatus = global.get(\"bbgtAgtStatus\");\n            if (!bbgtAgtStatus.gpio[gpio.name])\n                bbgtAgtStatus.gpio[gpio.name] = { counter : 0 };\n            bbgtAgtStatus.gpio[gpio.name].value = value;\n            bbgtAgtStatus.gpio[gpio.name].ts    = new Date();\n            bbgtAgtStatus.gpio[gpio.name].counter++;\n            global.set(\"bbgtAgtStatus\", bbgtAgtStatus);\n        }\n    }\n    catch(e) {\n    }\n}\n\n/****************************************/\n/** @brief gpio_get\n * @param gpio      GPIO Object\n * @return PIN      Value (0, 1)\n/****************************************/\nfunction gpio_get(gpio)\n{\n    fs = global.get('fs');\n    try {\n        iopin    = gpio.pin;\n        filename = `/sys/class/gpio/gpio${iopin}/value`;\n        data     = fs.readFileSync(filename, \"ascii\");\n        value    = parseInt(data);\n    }\n    catch(e) {\n        value = 0;\n    }\n    \n    return value;\n}\n\n/****************************************\n * CODIGO                               *\n ****************************************/\n/* globalFuns */\nglobalFuns = {\n    date_string             : date_string,\n    time_string             : time_string,\n    local_date_string       : local_date_string,\n    local_time_string       : local_time_string,\n    simple_date_time_string : simple_date_time_string,\n    tlnt_log                : tlnt_log,\n    loglevel_set            : loglevel_set,\n    loglevel_get            : loglevel_get,\n    loglevel_list_defs      : loglevel_list_defs,\n    loadModule              : loadModule,\n    readFile                : readFile,\n    readFileJSON            : readFileJSON,\n    execCmd                 : execCmd,\n    get_mac_address         : get_mac_address,\n    validate_field          : validate_field,\n    validate_fields         : validate_fields,\n    update_bbgtAgtInfo_mac_address : update_bbgtAgtInfo_mac_address,\n    gpio_get                : gpio_get,\n    gpio_set                : gpio_set\n};\n\nglobal.set(\"globalFuns\", globalFuns);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "cf07e933.2b1f88",
                "340f759a.eac7ea",
                "b52f0be1.1715c8",
                "9031cd60.f302"
            ]
        ]
    },
    {
        "id": "7b7e0691.a82de8",
        "type": "inject",
        "z": "1c8a3583.7e682a",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "df15bc57.b95d"
            ]
        ]
    },
    {
        "id": "cf07e933.2b1f88",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "BabelGateAgentCfg",
        "func": "FILE_CFG_DEFAULT = \"/etc/config/tlnt/bbgtAgtCfgDefault\";\n\nglobalFuns    = global.get(\"globalFuns\");\nbbgtAgtCfg    = global.get(\"bbgtAgtCfg\", \"config\");\nbbgtAgtStatus = global.get(\"bbgtAgtStatus\");\n\nglobalFuns.tlnt_log(0, \"Startup\", \"BabelGateAgentCfg\");\n\n/* bbgtAgtCfg */\nif ( (!bbgtAgtCfg) || (global.get(\"ResetConfigFlag\") ) ) {\n    globalFuns.tlnt_log(0, \"Startup\", \"Setting default values to bbgtAgtCfg\");\n    bbgtAgtCfg = globalFuns.readFileJSON(FILE_CFG_DEFAULT);\n    if (!bbgtAgtCfg) {\n        bbgtAgtCfg = {\n            //babelgate : { },\n            //time      : { },\n            //users     : { },\n            //modem     : { },\n            //network   : { }\n        };\n    }\n    global.set(\"ResetConfigFlag\", false)\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n}\n\n/* bbgtAgtStatus */\nif (!bbgtAgtStatus) {\n    globalFuns.tlnt_log(0, \"Startup\", \"Setting default values to bbgtAgtStatus\");\n    bbgtAgtStatus = {\n        gpio : {\n        }\n    };\n    global.set(\"bbgtAgtStatus\", bbgtAgtStatus);\n}\n\nmsg.payload = bbgtAgtCfg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "6ac19179.1895b"
            ]
        ]
    },
    {
        "id": "340f759a.eac7ea",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "BabelGateAgentInfo",
        "func": "/***************************************/\n/***************************************/\nfunction translate_io_fun(data)\n{\n    translate_io = {\n        list      : [],\n        list_in   : [],\n        list_out  : [],\n        list_leds : [],\n    };\n\n    lines = data.split(\"\\n\");\n    \n    for (var idx in lines) {\n        /* Skip not GPIO_ lines */\n        if (lines[idx].slice(0, 5) != \"GPIO_\")\n            continue;\n\n        fields = lines[idx].split(\"=\");\n        if (fields.length != 2)\n            continue;\n    \n        words = fields[0].split(\"_\");\n        ioname = words[2];\n        for (var i = 3; i < words.length; i++) {\n            ioname = ioname.concat(\"_\" + words[i]);\n        }\n\n        if (words[1] == \"LIST\") {\n            if (words[2] == \"LEDS\") {\n                try {\n                    lista = eval(fields[1]);\n                    translate_io.list_leds = lista.split(\" \");\n                }\n                catch(e) { }\n            }\n            else if (words[2] == \"IN\") {\n                try {\n                    lista = eval(fields[1]);\n                    translate_io.list_in = lista.split(\" \");\n                }\n                catch(e) { }\n            }\n            else if (words[2] == \"OUT\") {\n                try {\n                    lista = eval(fields[1]);\n                    translate_io.list_out = lista.split(\" \");\n                }\n                catch(e) { }\n            }\n        }\n        else if (words[1] == \"PIN\") {\n            translate_io[ioname] = {\n                name:   ioname,\n                pin:    fields[1]\n            }\n            translate_io.list.push(ioname);\n        }\n        else if (words[1] == \"DIR\") {\n            if (translate_io[ioname] === undefined) {\n                node.warn(\"Invalid IO DIR: \" + ioname);\n                continue;\n            }\n            io = translate_io[ioname];\n            io[\"direction\"] = fields[1];\n        }\n        else if (words[1] == \"DEFVAL\") {\n            if (translate_io[ioname] === undefined) {\n                node.warn(\"Invalid IO DEFVAL: \" + ioname);\n                continue;\n            }\n            io = translate_io[ioname];\n            io[\"defval\"] = fields[1];\n        }\n    }\n    \n    return translate_io;\n}\n\n/************************************\n *             CODIGO               *\n ************************************/\n\nFILE_INFO = \"/etc/config/tlnt/bbgtAgInfo;\"\n\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\n\nglobalFuns.tlnt_log(0, \"Startup\", \"BabelGateAgentInfo\");\n\n/* bbgtAgtInfo */\nif ( (!bbgtAgtInfo) || (global.get(\"ResetInfoFlag\") ) ) {\n    globalFuns.tlnt_log(0, \"Startup\", \"Setting default values to bbgtAgtInfo\");\n    bbgtAgtInfo = globalFuns.readFileJSON(FILE_INFO);\n    if (!bbgtAgtInfo)\n        bbgtAgtInfo = {};\n\n    /* Translate IO */\n    if (!bbgtAgtInfo.translate_io) {\n        result = globalFuns.execCmd(\"/usr/local/bin/tlnt/tlnt-gpio.sh list\")\n        if (result.status === 0)\n            bbgtAgtInfo.translate_io = translate_io_fun(result.stdout);\n    }\n\n    /* Product Info */\n    if (!bbgtAgtInfo.productInfo) {\n        productInfo = globalFuns.readFileJSON(\"/var/tlnt-product.json\");\n        if (!productInfo) {\n            productInfo = {\n                product        : \"<unknown>\",\n                product_id     : \"<unknown>\",\n                model          : \"<unknown>\",\n                version        : \"00\",\n                babelgate_code : \"4700\",\n            }\n        }\n        bbgtAgtInfo.productInfo = productInfo;\n    }\n\n    /* Interface List */\n    if ( (!bbgtAgtInfo.etherList) ||\n         (Array.isArray(bbgtAgtInfo.etherList)) ) {\n        bbgtAgtInfo.etherList = {\n            \"ETH1\" : \"enp2s0\", \n            \"ETH2\" : \"enp3s0\"\n        };\n    }\n\n    global.set(\"ResetInfoFlag\", false);\n    global.set(\"bbgtAgtInfo\", bbgtAgtInfo, \"config\");\n}\n\nmsg.payload = bbgtAgtInfo;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "b29722c3.77b19"
            ]
        ]
    },
    {
        "id": "6ac19179.1895b",
        "type": "debug",
        "z": "1c8a3583.7e682a",
        "name": "STARTUP: BabelGateAgentCfg",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "b29722c3.77b19",
        "type": "debug",
        "z": "1c8a3583.7e682a",
        "name": "STARTUP: BabelGateAgentInfo",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "764a2ada.ea7884",
        "type": "link out",
        "z": "31c39280.4de9fe",
        "name": "MGMT: TimeCfg (OUT)",
        "links": [
            "adacbddb.39732"
        ],
        "x": 1395,
        "y": 1380,
        "wires": []
    },
    {
        "id": "adacbddb.39732",
        "type": "link in",
        "z": "31c39280.4de9fe",
        "name": "MGMT: TimeCfg (IN)",
        "links": [
            "764a2ada.ea7884"
        ],
        "x": 235,
        "y": 1360,
        "wires": [
            [
                "9e612664.4b0768"
            ]
        ]
    },
    {
        "id": "29ab16cd.5ae7fa",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "NOTA: Funcionalidades Missing!!!",
        "info": "Falta crear los usuarios en node-red (en settings.conf).",
        "x": 1020,
        "y": 180,
        "wires": []
    },
    {
        "id": "b05067b.7a26298",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Import Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "attach_file",
        "payload": "",
        "payloadType": "str",
        "topic": "import",
        "x": 200,
        "y": 920,
        "wires": [
            [
                "d065b7f6.014388"
            ]
        ]
    },
    {
        "id": "6183f483.f4493c",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Export Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "export",
        "x": 200,
        "y": 860,
        "wires": [
            [
                "f79aa8b7.98aa28"
            ]
        ]
    },
    {
        "id": "c7a738b3.193b78",
        "type": "ui_form",
        "z": "6d0c29a1.c03ff8",
        "name": "BabelGateCfgForm",
        "label": "",
        "group": "1aefa463.d7220c",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Server",
                "value": "server",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Domain",
                "value": "domain",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Project",
                "value": "project",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Address/Name",
                "value": "name",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "User",
                "value": "user",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "server": "",
            "domain": "",
            "project": "",
            "name": "",
            "user": "",
            "password": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "",
        "x": 750,
        "y": 2360,
        "wires": [
            [
                "7082306.6e599d"
            ]
        ]
    },
    {
        "id": "d47e0afe.4447c8",
        "type": "comment",
        "z": "1c8a3583.7e682a",
        "name": "Load initial configuration into Environment",
        "info": "Load initial configuration\nConfigure Function",
        "x": 220,
        "y": 440,
        "wires": []
    },
    {
        "id": "e0248cda.9507b",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "Catch All Debug",
        "func": "globalFuns = global.get(\"globalFuns\");\nglobalFuns.tlnt_log(1, \"CatchAll\", \"Exception: \" + JSON.stringify(msg));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "da078261.7bd59",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "DIGITAL Interrupt",
        "info": "",
        "x": 180,
        "y": 660,
        "wires": []
    },
    {
        "id": "40318c3b.d189c4",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: DIGITAL-Int Request (IN)",
        "links": [],
        "x": 115,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "652e6334.6bd27c",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "PWM",
        "info": "",
        "x": 150,
        "y": 740,
        "wires": []
    },
    {
        "id": "805d36b7.7ebbe8",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: PWM Request (IN)",
        "links": [
            "1ce98527.d2f9ab"
        ],
        "x": 115,
        "y": 780,
        "wires": [
            [
                "44363d10.7601b4"
            ]
        ]
    },
    {
        "id": "a0bec0b5.a67dd",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d0c9036e.89481"
            ]
        ]
    },
    {
        "id": "d0c9036e.89481",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "DL: Emul Data Build",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\n\ndataLogger.monitor.deviceList = {\n    sensor1 : {\n        name    : \"sensor1\",\n        type    : \"modbus-rtu\",\n        model   : \"carlo.em112\",\n        version : \"1\",\n        serial  : \"YR-2017-005027A\",\n        description : 'Carlo Gavazzi-112',\n        enabled : true,\n        modbus  : {\n            fc       : 3,\n            unitid   : 1,\n            register : 0,\n            quantity : 20,\n        },\n        index :   1,\n        expires : 0,\n        period :  5,\n        measList : {\n            \"Power Sensor\" : {\n                name : \"Power Sensor\",\n                type : \"power\",\n                ID   : \"carlo.em112.power\",\n                unit : \"watts\",\n                description : \"Power\",\n                value : \"data[0]\",\n                enabled : true\n            },\n            \"Voltage_Sensor\" : {\n                name : \"Voltage_Sensor\",\n                type : \"volt\",\n                ID   : \"carlo.em112.volt\",\n                unit : \"volts\",\n                description : \"Voltage\",\n                value : \"data[2]\",\n                enabled : true\n            },\n        }\n    },\n    sensor2 : {\n        name    : \"sensor2\",\n        type    : \"modbus-rtu\",\n        model   : \"win.win\",\n        version : \"1\",\n        serial  : \"0004-0008-00000001\",\n        description : 'Winners Temp+Hum Sensor',\n        enabled : true,\n        modbus : {\n            fc       : 3,\n            unitid   : 33,\n            register : 0,\n            quantity : 2,\n        },\n        index :   2,\n        expires : 0,\n        period :  12,\n        measList : {\n            \"Temp_Sensor\" : {\n                name : \"Temp_Sensor\",\n                type : \"temp\",\n                ID   : \"win.win.temp\",\n                unit : \"ºC\",\n                description : \"Temperature Sensor\",\n                value : \"data[0]\",\n                enabled : true,\n            },\n            \"Hum_Sensor\" : {\n                name : \"Hum_Sensor\",\n                type : \"hum\",\n                ID   : \"win.win.hum\",\n                unit : \"%\",\n                description : \"Humidity Sensor\",\n                value : \"data[1] + 10\",\n                enabled : true,\n            },\n        }\n    }\n}\n\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "55fff84b.ba0738",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "DL: Emul Server Build",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\ndataLogger.cloud.serverList = {\n    \"PORDO Server\" : {\n        name     : \"PORDO Server\",\n        type     : \"pordo\",\n        url      : \"http://192.168.201.199:80\",\n        enabled  : false\n    },\n    \"InfluxDB Local\" : {\n        name     : \"InfluxDB Local\",\n        type     : \"influxdb\",\n        url      : \"http://127.0.01:8086\",\n        database : \"local\",\n        user     : \"\",\n        password : \"\",\n        enabled  : false\n    },\n    \"PowerBI Server\" : {\n        name     : \"PowerBI Server\",\n        type     : \"powerbi\",\n        url      : \"https://api.powerbi.com\",\n        //dataset  : \"/beta/c3090cec-1cab-463e-b502-9108a333a386/datasets/9ff16270-2da3-4cae-9c7c-9da924d78515/rows?key=bhKrAD%2BpYouwRSDSrI5REe%2Bc8Xw0ptMKc4okY%2BQELlOfd3CBd2L6p9%2FkOrnT2X86rCThgewJlHCVtqruuyNUSQ%3D%3D\"\n        database  : \"/beta/c3090cec-1cab-463e-b502-9108a333a386/datasets/9ff16270-2da3-4cae-9c7c-9da924d78515/rows?key=bhKrAD%2BpYouwRSDSrI5REe%2Bc8Xw0ptMKc4okY%2BQELlOfd3CBd2L6p9%2FkOrnT2X86rCThgewJlHCVtqruuyNUSQ%3D%3D\",\n        user     : \"\",\n        password : \"\",\n        enabled  : false\n    }\n}\n\nglobal.set(\"dataLogger\", dataLogger, \"config\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "33b9e76d.eb0398",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "55fff84b.ba0738"
            ]
        ]
    },
    {
        "id": "866ecfc0.cb58c",
        "type": "comment",
        "z": "6c4882be.3f8e7c",
        "name": "Data Emulation",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "dd8b13c8.1b7f2",
        "type": "ui_form",
        "z": "87692da3.99da2",
        "d": true,
        "name": "",
        "label": "",
        "group": "1c60e58.a09e11b",
        "order": 11,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Project",
                "value": "projectFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Gateway/DataLogger Name",
                "value": "gwNameFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Gateway/DataLogger Model",
                "value": "gwModelFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Device Name",
                "value": "devNameFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Device Model",
                "value": "devModelFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Device Serial",
                "value": "devSerialFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Device Type",
                "value": "devTypeFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Measurement Name",
                "value": "measNameFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Measurement ID",
                "value": "measIDFlag",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Measurement Type",
                "value": "measTypeFlag",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "projectFlag": false,
            "gwNameFlag": false,
            "gwModelFlag": false,
            "devNameFlag": false,
            "devModelFlag": false,
            "devSerialFlag": false,
            "devTypeFlag": false,
            "measNameFlag": false,
            "measIDFlag": false,
            "measTypeFlag": false
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "",
        "x": 710,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "787f2fd.69685d",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Queue TTL (seconds)",
        "tooltip": "Time to Live for messages in queue (seconds)",
        "group": "9f1b4f31.7f04f",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "queue_ttl",
        "x": 1100,
        "y": 640,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "97223bad.af8988",
        "type": "debug",
        "z": "87692da3.99da2",
        "name": "DBG: DL Cloud: Action",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 580,
        "wires": []
    },
    {
        "id": "88b0687f.3c3d58",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 860,
        "wires": [
            [
                "4440b9b0.7779f8"
            ]
        ]
    },
    {
        "id": "c1fdbe5b.fe618",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "Queue MSG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 850,
        "y": 800,
        "wires": []
    },
    {
        "id": "27efb0de.1c952",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 960,
        "wires": [
            [
                "44587c5.abaef84"
            ]
        ]
    },
    {
        "id": "44587c5.abaef84",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 960,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "922e9d63.7748b",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "bda1ee57.d7ddd"
            ]
        ]
    },
    {
        "id": "bda1ee57.d7ddd",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "Bypass set to true",
        "rules": [
            {
                "t": "set",
                "p": "bypass",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "beeea49.b72e358",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "75403d86.a98534"
            ]
        ]
    },
    {
        "id": "75403d86.a98534",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ttl",
                "pt": "msg",
                "to": "2000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "count",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "6fcda223.56c79c",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "7509b0df.933a9"
            ]
        ]
    },
    {
        "id": "7509b0df.933a9",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "Bypass set to false",
        "rules": [
            {
                "t": "set",
                "p": "bypass",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1060,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "c67021b9.a20c5",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "b0eb6a07.745a68"
            ]
        ]
    },
    {
        "id": "b0eb6a07.745a68",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 920,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "3a4da944.2ba266",
        "type": "status",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "scope": [
            "3c965a17.3a4f46"
        ],
        "x": 180,
        "y": 580,
        "wires": [
            [
                "5f780a9c.e44374"
            ]
        ]
    },
    {
        "id": "5f780a9c.e44374",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "Queue Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 560,
        "y": 580,
        "wires": []
    },
    {
        "id": "c5cc2142.2d94",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1100,
        "wires": [
            [
                "bd3f4a8e.8e3978"
            ]
        ]
    },
    {
        "id": "bd3f4a8e.8e3978",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "queueCount set to true",
        "rules": [
            {
                "t": "set",
                "p": "queueCount",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1100,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "3c965a17.3a4f46",
        "type": "simple-queue",
        "z": "6c4882be.3f8e7c",
        "name": "QueueTest",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 670,
        "y": 860,
        "wires": [
            [
                "c1fdbe5b.fe618",
                "ff806626.604b08"
            ]
        ]
    },
    {
        "id": "4d3f8de6.8188d4",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "if (msg.status.source.name == \"QueueTest\") {\n    if (msg.status.text > 0) {\n        msg.trigger = true;\n        return msg;\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "b73520b4.5034a",
        "type": "delay",
        "z": "6c4882be.3f8e7c",
        "name": "Procesado",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1010,
        "y": 860,
        "wires": [
            [
                "a941e8a1.497e18",
                "78d84165.ff896"
            ]
        ]
    },
    {
        "id": "a941e8a1.497e18",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "Queue MSG Delayed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 800,
        "wires": []
    },
    {
        "id": "78d84165.ff896",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "Result",
        "func": "this.status = {\n    fill : \"green\",\n    shape: \"ring\",\n    text : \"22\"\n};\nmsg.count = 1;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 920,
        "wires": [
            [
                "44587c5.abaef84"
            ]
        ]
    },
    {
        "id": "4440b9b0.7779f8",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "nottl",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "count",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 860,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "b9310ae4.7781e8",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "8876d786.3b6a78"
            ]
        ]
    },
    {
        "id": "8876d786.3b6a78",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "count=0",
        "rules": [
            {
                "t": "set",
                "p": "count",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1140,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "ff806626.604b08",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "if (msg.trigger || msg.nottl || msg.ttl) {\n    return msg;\n}\nelse\n    return null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 860,
        "wires": [
            [
                "b73520b4.5034a"
            ]
        ]
    },
    {
        "id": "3b0442f6.74389e",
        "type": "complete",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "scope": [
            "b73520b4.5034a"
        ],
        "uncaught": false,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "e93fd330.b9c78"
            ]
        ]
    },
    {
        "id": "e93fd330.b9c78",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "Flow Complete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 540,
        "wires": []
    },
    {
        "id": "bbf8740b.074998",
        "type": "status",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "scope": [
            "78d84165.ff896"
        ],
        "x": 180,
        "y": 620,
        "wires": [
            [
                "ff6eace7.1a657"
            ]
        ]
    },
    {
        "id": "ff6eace7.1a657",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "Delay Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 620,
        "wires": []
    },
    {
        "id": "d5a54043.96459",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1180,
        "wires": [
            [
                "ae18134e.b97ba"
            ]
        ]
    },
    {
        "id": "ae18134e.b97ba",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "count=1",
        "rules": [
            {
                "t": "set",
                "p": "count",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1180,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "305e6b93.9511d4",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "if (msg.payload.json)\n    value = JSON.parse(msg.payload.value);\nelse\n    value = msg.payload.value;\n\nglobal.set(msg.payload.variable, value);\n\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 80,
        "wires": [
            [
                "48847fba.031d1"
            ]
        ]
    },
    {
        "id": "c9505bb9.c94798",
        "type": "ui_form",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "label": "",
        "group": "ab435d94.d29ce",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Variable",
                "value": "variable",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "JSON",
                "value": "json",
                "type": "switch",
                "required": true,
                "rows": null
            },
            {
                "label": "Value",
                "value": "value",
                "type": "multiline",
                "required": false,
                "rows": 10
            }
        ],
        "formValue": {
            "variable": "",
            "json": false,
            "value": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "305e6b93.9511d4"
            ]
        ]
    },
    {
        "id": "48847fba.031d1",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: Debug Variable Form",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "f8318d1a.d1684",
        "type": "ui_numeric",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "label": "Loglevel",
        "tooltip": "",
        "group": "e2cccaf.0e53c38",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "f5592849.753578"
            ]
        ]
    },
    {
        "id": "659af5a0.939b7c",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "94d6edef.dad7"
            ]
        ]
    },
    {
        "id": "94d6edef.dad7",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "globalFuns = global.get(\"globalFuns\");\nmsg.payload = globalFuns.loglevel_get();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "f8318d1a.d1684"
            ]
        ]
    },
    {
        "id": "3db458f6.3d96d8",
        "type": "ui_text_input",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "label": "Variable",
        "tooltip": "",
        "group": "e2cccaf.0e53c38",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "1000",
        "topic": "varname",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "b1482bd6.675068"
            ]
        ]
    },
    {
        "id": "f5592849.753578",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "globalFuns = global.get(\"globalFuns\");\nglobalFuns.loglevel_set(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b1482bd6.675068",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "DL:DBG:Show Variable",
        "func": "context.set(msg.topic, msg.payload);\n\nvarname = context.get(\"varname\");\ncontextStorage = context.get(\"context\") || \"default\";\n\nnode.warn(context);\nif (varname) {\n    new_payload = global.get(varname, contextStorage);\n    if (!new_payload)\n        return { payload : \"ERROR: Variable does not exist\" };\n    result = JSON.stringify(new_payload, null, \"\\t\");\n    msg.payload = result.replace(/\\n/g, '<BR>').replace(/\\t/g, \"&nbsp&nbsp&nbsp&nbsp\");\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "5eb4367a.9b50b8",
                "606d5885.202078"
            ]
        ]
    },
    {
        "id": "e66d8467.c07d98",
        "type": "simple-queue",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "1a513123.ad356f"
            ]
        ]
    },
    {
        "id": "4e09780d.2efa28",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "queueCount",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "3c965a17.3a4f46"
            ]
        ]
    },
    {
        "id": "6ff7e18f.b69ba",
        "type": "delay",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1340,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "20ca5464.19e96c",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "Result",
        "func": "this.status = {\n    fill : \"green\",\n    shape: \"ring\",\n    text : \"22\"\n};\nmsg.count = 1;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "dd6341d8.41365",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "queueCount",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "1a513123.ad356f",
        "type": "switch",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1280,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "155e8d41.8840f3",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "FTP",
        "info": "",
        "x": 150,
        "y": 1560,
        "wires": []
    },
    {
        "id": "bdf02dc9.2c10a",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "FTP Send",
        "func": "globalFuns = global.get(\"globalFuns\");\nvar fs     = globalFuns.loadModule(\"fs\");\nvar ftpClient = global.get('ftp');\n\nfilenameSrc = msg.localFilename;\nfilenameDst = msg.remoteFilename;\n\nfunction if_err_change_name(filename)\n{\n\tfields = filename.split(\"-\"); \n\tlastElement=fields[fields.length-1];\n\t\t\t\t    \n\t/*Separate the number and the extension*/\n\tnum=lastElement.split(\".\")[0];\n\textension=lastElement.split(\".\")[1];\n\tnum=parseInt(num)+1;\n\t\t\t\t    \n\t/*Join everything and change name on gateway*/ \n\tfields[fields.length-1] = num + \".\" + extension;\n\tnew_filename=(fields.join(\"-\"));\n\tfs.rename(filename, new_filename , function (err) {\n\t\tglobalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. couldn't rename file: \" + err);\n\t})\n}\n\nvar c = new ftpClient();\nc.on('response', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. response: \" + err)\n})\nc.on('close', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. close: \" + err)\n})\nc.on('greeting', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. greeting: \" + err + \" \" + msg.ftp_options.host)\n})\nc.on('end', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. end: \" + err)\n})\nc.on('uncaughtException', function (err) {\n    /*We add one to the file name*/\n    filenameSrc=if_err_change_name(filenameSrc);\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. uncaughtException: \" + err);\n    msg.status = -2;\n    node.send(msg);\n})\nc.on('error', function(err) {\n    /*We add one to the file name*/\n    filenameSrc=if_err_change_name(filenameSrc);\n    msg.payload = \"FTP Send. error: \" + err;\n    msg.status = -1;\n    globalFuns.tlnt_log(5, \"DataLogger\", msg.payload)\n    node.send(msg);\n})\nc.on('ready', function() {\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. ready.\")\n    c.put(filenameSrc, filenameDst, function(err) {\n        if (err) {\n            txt = \"Error\";\n            msg.status = -3;\n            throw err;\n        }\n        else {\n            txt = \"OK\";\n            msg.status = 0;\n        }\n        c.end();\n        msg.txt = \"SEND \" + txt + \" \" + filenameDst;\n        globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Send. \" + msg.txt)\n        node.send(msg);\n    });\n    msg.txt = \"ON\";\n});\n\nc.connect(msg.ftp_options);\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1700,
        "wires": [
            [
                "d1767042.ff99a",
                "719d359c.5fa54c"
            ]
        ]
    },
    {
        "id": "d74ac2ff.f1215",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "FTP Tick (5s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1620,
        "wires": [
            [
                "aa222381.87d19"
            ]
        ]
    },
    {
        "id": "aa222381.87d19",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "FTP CSV Check to Send",
        "func": "/******************************************************/\n/** Obtener el Meas ID de un fichero\n *  @return ID\n */\nfunction get_meas_id(filename) \n{\n    fields = filename.split(\"-\");\n    if (fields.length > 3)\n        id = fields[1]\n    else\n        id = fields[0];\n    return id;\n}\n\n/******************************************************/\n/** Obtener el Meas ID de un fichero\n *  @return [ device, meas ]  si exito\n *          [ null, null ]    si error\n */\nfunction get_meas(monitorList, meas_id) \n{\n    for (var devName in monitorList) {\n        device = monitorList[devName];\n        for (var measName in device.measList) {\n            meas = device.measList[measName];\n            if (meas.ID == meas_id)\n                return [ device, meas ];\n        }\n    }\n    return [ null, null ];\n}\n\n/******************************************************/\n/** Obtener el primer servidor FTP de un meas\n *  @return Nombre servidor FTP si exito\n *          undefined si no hay ninguno\n */\nfunction get_first_ftp_server(serverList, meas) \n{\n    if (!meas.serverList)\n        return undefined;\n    return meas.serverList.find(element => serverList[element].type == 'ftp');\n}\n\n/******************************************************/\n/******************************************************/\nftpSem = flow.get(\"ftpSem\", \"memoryOnly\");\n//node.warn(ftpSem);\nif (ftpSem && (msg.payload < ftpSem))\n    return null;\n//node.warn(msg.payload);\nflow.set(\"ftpSem\", msg.payload + 30000, \"memoryOnly\");\n\nglobalFuns = global.get(\"globalFuns\");\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLogger          = global.get(\"dataLogger\", \"config\");\nif (!dataLogger || !dataLoggerInternals) {\n    flow.set(\"ftpSem\", undefined, \"memoryOnly\");\n    return null;\n}\n\nfs = global.get('fs');\n\nmsg = {};\n\nPATH=dataLoggerInternals.storage.csv.path + \"/pending/\";\ndirs = fs.readdirSync(PATH);\nmsg.dir_list = dirs;\nmsg.ndirs    = dirs.length;\nmax_dirs  = 1\nmax_files = 1\nfor (var dir_idx in dirs) {\n    //if (dir_idx >= max_dirs)\n    //    break;\n    dirname = dirs[dir_idx];\n    files = fs.readdirSync(PATH + dirname);\n    msg.file_list = files;\n    msg.nfiles    = files.length;\n    for (var file_idx in files) {\n        //if (file_idx >= max_files)\n        //    break;\n        filename = files[file_idx];\n        msg.basename = filename;\n        msg.filedir  = PATH + dirname;\n        msg.filename = msg.filedir + \"/\" + filename;\n        \n        meas_id = get_meas_id(filename);\n        move_to_history = false;\n        result = get_meas(dataLogger.monitor.deviceList, meas_id);\n        if (result[0] !== null) {\n            meas = result[1];\n            if (get_first_ftp_server(dataLogger.cloud.serverList, meas)) {\n                globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Check. Processing meas_id:\" + meas_id + \" filename:\" + filename);\n                msg.device = result[0];\n                msg.meas   = result[1];\n                // De momento un unico fichero cada vez\n                return msg;\n                //node.send(msg);\n            }\n            else {\n                move_to_history = true;\n                globalFuns.tlnt_log(5, \"DataLogger\", \"Moving not FTP file to History: \" + msg.filename);\n            }\n        }\n        else {\n            move_to_history = true;\n            globalFuns.tlnt_log(2, \"DataLogger\", \"FTP Check. meas_id (\" + meas_id + \") not in list. filename:\" + filename + \". Moving to History.\");\n        }\n        if (move_to_history) {\n            cp = global.get(\"child_process\");\n            dstDir = msg.filedir.replace(\"pending\", \"history\");\n            try {\n                cp.execSync(\"mkdir -p \" + dstDir);\n                cmd = \"mv \" + msg.filename + \" \" + dstDir;\n                cp.execSync(cmd);\n            }\n            catch (e) {\n                globalFuns.tlnt_log(2, \"DataLogger\", \"FTP: ERROR moving file to History: \" + msg.filename);\n            }\n        }\n    }\n}\n\nflow.set(\"ftpSem\", undefined, \"memoryOnly\");\nreturn null;\n\n\n\ndataLoggerCSVPending = global.get(\"dataLoggerCSVPending\");\nif (!dataLoggerCSVPending)\n    return null;\n\nvar cnt = 0;\nvar max = 20;   // Solo enviamos un maximo de 'max' ficheros\nfor (var filename in dataLoggerCSVPending) {\n    fileEntry = dataLoggerCSVPending[filename];\n    if (fileEntry.sent) {\n        /* Deberia haberse movido a la variable History */\n        node.warn(\"CSV Check WARN: \" + fileEntry.devName + \".\" + fileEntry.measName);\n        //continue; //?\n    }\n    msg.devName  = fileEntry.devName;\n    msg.measName = fileEntry.measName;\n    //msg.fileEntry = fileEntry;\n    msg.basename = fileEntry.basename;\n    const msg_snd = RED.util.cloneMessage(msg);\n    msg.ttl = 4000;\n    node.send(msg_snd);\n    if (cnt++ > max)\n        break;\n}\n\nnode.done();\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"ftpSem\", undefined, \"memoryOnly\");\n//msg = { reset : true };\n//return msg;",
        "finalize": "",
        "x": 270,
        "y": 1700,
        "wires": [
            [
                "df2a34a6.86b648",
                "84cb1181.541a3"
            ]
        ]
    },
    {
        "id": "84cb1181.541a3",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "FTP Build",
        "func": "globalFuns = global.get(\"globalFuns\");\nvar Client = globalFuns.loadModule(\"ftp\");\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLogger          = global.get(\"dataLogger\", \"config\");\nserverList = dataLogger.cloud.serverList;\nbasename   = msg.basename; // || \"dataLogger1-win.win.temp-20200303090833-0.csv\";\nmeas       = msg.meas;\nif ( (!dataLogger) ||\n     /*(!dataLogger.storage.enabled) ||*/\n     (!dataLogger.storage.csv.enabled) ||\n     (!serverList) ||\n     (!meas) || (!basename) )\n    return null;\n\ncsv          = dataLogger.storage.csv;\ncsvInternals = dataLoggerInternals.storage.csv;\n\nfor (var idx in meas.serverList) {\n    serverName = meas.serverList[idx];\n    //globalFuns.tlnt_log(5, \"DataLogger\", \"FTP Build. measName:\" + meas.name + \" serverName:\" + serverName);\n    if (serverList[serverName].type != \"ftp\")\n        continue;\n    if (!serverList[serverName].enabled)\n        continue;\n    if (meas.serverList.includes(serverName)) {\n        // connect to localhost:21 as anonymous\n        globalFuns.tlnt_log(3, \"DataLogger\", \"FTP Build. measName:\" + meas.name);\n        options = {\n            host     : serverList[serverName].url,\n            port     : serverList[serverName].port || 21,\n            user     : serverList[serverName].user,\n            password : serverList[serverName].password,\n            //debug : dbg\n        };\n\n        msg.serverName     = serverName;\n        msg.ftp_options    = options;\n        msg.localFilename  = msg.filename;\n        msg.remoteFilename = serverList[serverName].database + \"/\" + basename;\n        \n        fs = global.get(\"fs\");\n        try {\n            /* Check si el fichero existe antes de tratar de enviarlo */\n            fs.accessSync(msg.localFilename, fs.constants.R_OK);\n            msg.payload = \"\";\n            return msg;\n        }\n        catch(e) {\n            globalFuns.tlnt_log(3, \"DataLogger\", \"FTP Build WARN: Exception '\" + e + \"': \" + basename);\n        }\n    }\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 1700,
        "wires": [
            [
                "2f34b4ea.7c435c",
                "bdf02dc9.2c10a"
            ]
        ]
    },
    {
        "id": "df2a34a6.86b648",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG:DL: FTP In",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 500,
        "y": 1620,
        "wires": []
    },
    {
        "id": "2f34b4ea.7c435c",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG:DL: FTP Build",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1620,
        "wires": []
    },
    {
        "id": "d1767042.ff99a",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG:DL: FTP Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1620,
        "wires": []
    },
    {
        "id": "eaecee29.71be3",
        "type": "catch",
        "z": "3022fd6.d249f02",
        "name": "",
        "scope": [
            "bdf02dc9.2c10a",
            "84cb1181.541a3",
            "aa222381.87d19"
        ],
        "uncaught": false,
        "x": 750,
        "y": 1800,
        "wires": [
            [
                "e7af9581.6f7f18",
                "719d359c.5fa54c"
            ]
        ]
    },
    {
        "id": "569924da.b0b55c",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG:DL: FTP Finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1700,
        "wires": []
    },
    {
        "id": "719d359c.5fa54c",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "FTP Finish",
        "func": "globalFuns = global.get(\"globalFuns\");\ndataLoggerStatus = global.get(\"dataLoggerStatus\") || { cloud : { serverList : {} } };\nif (!dataLoggerStatus.cloud.serverList)\n    dataLoggerStatus.cloud.serverList = {};\nif (!dataLoggerStatus.cloud.serverList[msg.serverName]) {\n    dataLoggerStatus.cloud.serverList[msg.serverName] = {\n        status : \"unknown\",\n        statistics : {\n            total  : 0,\n            errors : 0\n        }\n    }\n}\n\ndataLoggerStatus.cloud.serverList[msg.serverName].statistics.total++;\ntimestamp = new Date();\nif (msg.status === 0) {\n    dataLoggerStatus.cloud.serverList[msg.serverName].status = \"ok\";\n    dataLoggerStatus.cloud.serverList[msg.serverName].statistics.last_ok_timestamp = timestamp;\n    \n    cp = global.get(\"child_process\");\n    dstDir = msg.filedir.replace(\"pending\", \"history\");\n    try {\n        cp.execSync(\"mkdir -p \" + dstDir);\n        cmd = \"mv \" + msg.filename + \" \" + dstDir;\n        cp.execSync(cmd);\n        //globalFuns.tlnt_log(5, \"DataLogger\", \"FTP: Moving file to History: \" + cmd);\n        globalFuns.tlnt_log(5, \"DataLogger\", \"FTP: Moving file to History: \" + msg.filename);\n    }\n    catch (e) {\n        globalFuns.tlnt_log(2, \"DataLogger\", \"FTP: ERROR moving file to History: \" + msg.filename);\n    }\n}\nelse {\n    dataLoggerStatus.cloud.serverList[msg.serverName].status = \"Error\";\n    dataLoggerStatus.cloud.serverList[msg.serverName].statistics.errors++;\n    dataLoggerStatus.cloud.serverList[msg.serverName].statistics.last_error_timestamp = timestamp;\n    dataLoggerStatus.cloud.serverList[msg.serverName].statistics.last_error_msg  = msg.payload;\n    dataLoggerStatus.cloud.serverList[msg.serverName].statistics.last_error_code = msg.status;\n    globalFuns.tlnt_log(5, \"DataLogger\", \"FTP: ERROR\");\n}\n\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\nflow.set(\"ftpSem\", undefined, \"memoryOnly\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 1740,
        "wires": [
            [
                "569924da.b0b55c"
            ]
        ]
    },
    {
        "id": "e7af9581.6f7f18",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG:DL: FTP Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1800,
        "wires": []
    },
    {
        "id": "75579651.4d2ec8",
        "type": "comment",
        "z": "857c3f85.fb474",
        "name": "Configuration",
        "info": "",
        "x": 130,
        "y": 420,
        "wires": []
    },
    {
        "id": "dd5f5855.642e18",
        "type": "comment",
        "z": "857c3f85.fb474",
        "name": "CSV Status",
        "info": "",
        "x": 130,
        "y": 780,
        "wires": []
    },
    {
        "id": "b1cf0115.e5017",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Dir Date",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 700,
        "y": 840,
        "wires": []
    },
    {
        "id": "163aa947.bbd877",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "name": "",
        "label": "Measurements",
        "tooltip": "",
        "place": "Select option",
        "group": "f0ae0529.e2f7a8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 700,
        "y": 960,
        "wires": [
            [
                "563de27c.4fcc4c"
            ]
        ]
    },
    {
        "id": "563de27c.4fcc4c",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: CSV Meas Status",
        "func": "dataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus || !dataLoggerStatus.storage || !dataLoggerStatus.storage.csv)\n    return null;\n\ncsv = dataLoggerStatus.storage.csv;\nif (!csv.currentFileList || !csv.currentFileList[msg.payload])\n    return null;\ncsvMeas = csv.currentFileList[msg.payload];\n\nmsgType  = { payload : csvMeas.type || \"\" }\nmsgFile  = { payload : csvMeas.basename || \"\" };\nmsgLines = { payload : csvMeas.lines || \"\" };\n\nfs = global.get(\"fs\");\ntry {\n    stats = fs.statSync(dataLoggerInternals.storage.csv.path + \"/current/\" + csvMeas.fullname);\n    size  = stats.size;\n}\ncatch (e) {\n    size = -1;\n}\nmsgSize  = { payload : size };\n\nreturn [\n    msgType,\n    msgFile, \n    msgLines,\n    msgSize\n];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "f62e39ac.335848"
            ],
            [
                "d38cf43a.764ca8"
            ],
            [
                "5cb92000.445f1"
            ],
            [
                "a34d9f36.e8a7f"
            ]
        ]
    },
    {
        "id": "f62e39ac.335848",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "File Type",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1200,
        "y": 860,
        "wires": []
    },
    {
        "id": "5cb92000.445f1",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lines",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1190,
        "y": 940,
        "wires": []
    },
    {
        "id": "d38cf43a.764ca8",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current File",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1210,
        "y": 900,
        "wires": []
    },
    {
        "id": "a34d9f36.e8a7f",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "f0ae0529.e2f7a8",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Size",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1190,
        "y": 980,
        "wires": []
    },
    {
        "id": "ff435aee.5ad5c8",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>History</B>: Number of Directories",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 930,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5bf3ab02.42f6c4",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>History</B>: Disk Usage",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 900,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e6ff65d6.ead8a8",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Pending</B>: Number of Files",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 920,
        "y": 1300,
        "wires": []
    },
    {
        "id": "37bf1264.7598ae",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Pending</B>: Number of Directories",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 940,
        "y": 1260,
        "wires": []
    },
    {
        "id": "9f883c9d.f0bec",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Pending</B>: Disk Usage",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 910,
        "y": 1340,
        "wires": []
    },
    {
        "id": "861c6460.ab74d8",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Current</B>: Number of Files",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 920,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3920378e.09fb08",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Current</B>: Number of Directories",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 940,
        "y": 1380,
        "wires": []
    },
    {
        "id": "df4d10c1.02ec6",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "668b55e.b379cac",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "<B>Current</B>: Disk Usage",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 900,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1d7cd4a8.c24e8b",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "668b55e.b379cac",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "938c80cd.d91da"
            ]
        ]
    },
    {
        "id": "26e48b1e.6abf94",
        "type": "ui_button",
        "z": "857c3f85.fb474",
        "name": "",
        "group": "4b8f01ce.69f01",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "x": 220,
        "y": 1720,
        "wires": [
            [
                "f58f7eae.53521"
            ]
        ]
    },
    {
        "id": "d5933dbc.dac09",
        "type": "ui_table",
        "z": "857c3f85.fb474",
        "group": "4b8f01ce.69f01",
        "name": "Directory List",
        "order": 3,
        "width": 9,
        "height": 6,
        "columns": [
            {
                "field": "dirname",
                "title": "Directory Name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "nfiles",
                "title": "Files",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "522e79bd.9208b8"
            ]
        ]
    },
    {
        "id": "f58f7eae.53521",
        "type": "delay",
        "z": "857c3f85.fb474",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 200,
        "y": 1760,
        "wires": [
            [
                "ffa05174.4f05",
                "522e79bd.9208b8"
            ]
        ]
    },
    {
        "id": "938c80cd.d91da",
        "type": "delay",
        "z": "857c3f85.fb474",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "c6f419c1.f3bca8"
            ]
        ]
    },
    {
        "id": "d7a12042.b869e",
        "type": "ui_text",
        "z": "857c3f85.fb474",
        "group": "4b8f01ce.69f01",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Directory: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1120,
        "y": 1780,
        "wires": []
    },
    {
        "id": "522e79bd.9208b8",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: CSV Directory Select",
        "func": "if (!msg.payload.dirname) {\n    return [ { payload : \"\" }, { payload : [] } ]\n}\n\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ncsvType = flow.get(\"csvFileTypeSelect\", \"memoryOnly\");\nif (!dataLoggerInternals || !csvType)\n    return null;\n\nfs = global.get(\"fs\");\ndir = dataLoggerInternals.storage.csv.path + \"/\" + csvType + \"/\" + msg.payload.dirname;\ntry { files = fs.readdirSync(dir); }\ncatch (e) { files = [] }\n//node.warn(dir);\n//node.warn(files);\n\nmsgTxt   = { payload : csvType + \"/\" + msg.payload.dirname };\nmsgTable = { payload : [] };\n\nfor (var idx in files) {\n    file = files[idx];\n    try { stat = fs.statSync(dir + \"/\" + file); }\n    catch(e) { stat = { size : \"<UNKNOWN>\" }; }\n    entry = {\n        csvType  : csvType,\n        dirname  : msg.payload.dirname,\n        basename : file,\n        size     : stat.size,\n        lines    : 0\n    };\n    msgTable.payload.push(entry);\n}\n\nreturn [ msgTxt, msgTable ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 1820,
        "wires": [
            [
                "d7a12042.b869e"
            ],
            [
                "678defd9.0bd6f",
                "481db53c.fd985c"
            ]
        ]
    },
    {
        "id": "a50f87bf.31ad18",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: CSV File Select",
        "func": "msg.payload.fullname = \"/datalogger/csv/\" + msg.payload.csvType + \"/\" + \n    msg.payload.dirname + \"/\" + msg.payload.basename;\n\nflow.set(\"csvSelect\", msg.payload.csvType + \"/\" + \n    msg.payload.dirname + \"/\" + msg.payload.basename, \"memoryOnly\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 1880,
        "wires": [
            [
                "4c16e8ce.3ca0c8"
            ]
        ]
    },
    {
        "id": "101ad111.d75b4f",
        "type": "comment",
        "z": "857c3f85.fb474",
        "name": "CSV Usage",
        "info": "",
        "x": 150,
        "y": 1160,
        "wires": []
    },
    {
        "id": "ba90579e.beab68",
        "type": "comment",
        "z": "857c3f85.fb474",
        "name": "Journaling tasks",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "48cfeb7b.30e4c4",
        "type": "inject",
        "z": "857c3f85.fb474",
        "name": "DL Storage Journaling inject (60s) [5s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 140,
        "wires": [
            [
                "4deee309.a3952c"
            ]
        ]
    },
    {
        "id": "4deee309.a3952c",
        "type": "function",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Journaling",
        "func": "dataLogger          = global.get(\"dataLogger\", \"config\");\ndataLoggerInternals = global.get(\"dataLoggerInternals\", \"config\");\ndataLoggerStatus    = global.get(\"dataLoggerStatus\");\nif (!dataLogger || !dataLoggerInternals || !dataLoggerStatus)\n    return null;\n\nfs = global.get(\"fs\");\ncp = global.get(\"child_process\");\nglobalFuns = global.get(\"globalFuns\");\n\nnow = new Date();\npath = dataLoggerInternals.storage.csv.path;\npath_current = path + \"/current\";\npath_pending = path + \"/pending\";\npath_history = path + \"/history\";\n\n/******************************************************/\n/** Obtener el dia en formato AAAAMMDD\n */\nfunction get_dirname(ts)\n{\n    return ts.getUTCFullYear() +\n        String(ts.getUTCMonth() + 1).padStart(2, \"0\") +\n        ts.getUTCDate().toString().padStart(2, \"0\");\n}\n\n/******************************************************/\n/** Borrar ficheros antiguos\n */\nfunction delete_dirs_older(rootpath, expireStr)\n{\n    dirs = fs.readdirSync(rootpath);\n    for (var idx in dirs) {\n        dir = dirs[idx];\n        if (dir < expireStr) {\n            fulldir = rootpath + \"/\" + dir;\n            try {\n                // Lo hago en dos pasos por no hacer un \"rm -fR\" que pueda ser destructivo si fulldir esta mal\n                //node.warn(\"rm \" + fulldir + \"/*\");\n                //node.warn(\"rmdir \" + fulldir);\n                cp.execSync(\"rm -f \" + fulldir + \"/*\");\n                cp.execSync(\"rmdir \" + fulldir);\n                globalFuns.tlnt_log(3, \"DataLogger\", \"Journaling: Deleted old dir: \" + fulldir);\n                            }\n            catch (e) {\n                globalFuns.tlnt_log(1, \"DataLogger\", \"Journaling: ERROR deleting dir: \" + fulldir);\n            }\n        }\n    }\n}\n\n/******************************************************/\n/** Mover ficheros \"orphan\" de la carpeta current\n */\nfunction move_current_orphan_files(rootpath)\n{\n    dirname_now = get_dirname(now);\n    last_orphan_action = flow.get(\"last_orphan_action\", \"memoryOnly\") || { dirname : \"99999999\", count : 0 };\n    if (last_orphan_action.dirname == dirname_now) {\n        //node.warn(\"Journaling: Hoy ya se ha procesado\");\n        return;\n    }\n    \n    /* El journaling se hace a las 4:00 AM UTC */\n    if (now.getHours() < 4) {\n        //node.warn(\"Journaling: Todavia no es la hora\");\n        return;\n    }\n\n    globalFuns.tlnt_log(3, \"DataLogger\", \"Journaling current orphan files older than \" + dirname_now);\n\n    dirs = fs.readdirSync(path_current);\n    //node.warn(\"Journaling: \" + JSON.stringify(dirs));\n    var moved = 0;\n    for (var idx in dirs) {\n        dir = dirs[idx];\n        //node.warn(\"Journaling: \" + dir)\n        if (dirname_now - dir > 0) {\n            dirpath = path_current + \"/\" + dir;\n            files = fs.readdirSync(dirpath);\n            //node.warn(\"Journaling: \" + dirpath + \":\" + JSON.stringify(files));\n            for (var fileIdx in files) {\n                file = files[fileIdx];\n                //node.warn(`mkdir -p ${path_pending}/${dir}`);\n                cp.execSync(`mkdir -p ${path_pending}/${dir}`);\n                //node.warn(`mv ${dirpath}/${file} ${path_pending}/${dir}/`);\n                cp.execSync(`mv ${dirpath}/${file} ${path_pending}/${dir}/`);\n                globalFuns.tlnt_log(4, \"DataLogger\", `Journaling: Moving orphan current file ${dir}/${file}`);\n                //node.warn(`Journaling: Moving file ${dir}/${file}`);\n                \n                last_orphan_action.count++;\n                moved++;\n            }\n        }\n    }\n    \n    if (moved)\n        globalFuns.tlnt_log(3, \"DataLogger\", \"Journaling current orphan files complete. Moved files: \" + moved);\n    \n    last_orphan_action.dirname = dirname_now;\n    flow.set(\"last_orphan_action\", last_orphan_action, \"memoryOnly\");\n}\n\n/******************************************************/\n/******************************************************/\n\nif (dataLogger.storage.csv.delete_older_than) {\n    // Delete old directories \n    exp = new Date(now - dataLogger.storage.csv.delete_older_than * 24 * 60 * 60 * 1000);\n    nowStr = get_dirname(now);\n    expStr = get_dirname(exp);\n    \n    //node.warn(nowStr + \" \" + expStr)\n    delete_dirs_older(path_history, expStr);\n    delete_dirs_older(path_pending, expStr)\n    delete_dirs_older(path_current, expStr)\n}\n\nmove_current_orphan_files(path);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "89b27ab2.d9a238",
        "type": "comment",
        "z": "857c3f85.fb474",
        "name": "CSV Files",
        "info": "",
        "x": 140,
        "y": 1660,
        "wires": []
    },
    {
        "id": "c902d689.83bcc8",
        "type": "debug",
        "z": "857c3f85.fb474",
        "name": "DBG: DL: CSV Dir List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1760,
        "wires": []
    },
    {
        "id": "481db53c.fd985c",
        "type": "debug",
        "z": "857c3f85.fb474",
        "name": "DBG: DL: CSV File List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1720,
        "wires": []
    },
    {
        "id": "643ee994.13dda8",
        "type": "semaphore-take",
        "z": "3022fd6.d249f02",
        "config": "a674f548.1450d8",
        "name": "Sem OP Take",
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "baf77576.355698"
            ]
        ]
    },
    {
        "id": "94e1c18a.e7481",
        "type": "semaphore-leave",
        "z": "3022fd6.d249f02",
        "config": "a674f548.1450d8",
        "name": "Sem OP Leave",
        "x": 980,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "5b39f8cd.77bb08",
        "type": "catch",
        "z": "3022fd6.d249f02",
        "name": "",
        "scope": [
            "baf77576.355698"
        ],
        "uncaught": false,
        "x": 750,
        "y": 1140,
        "wires": [
            [
                "31109c7.02de064",
                "94e1c18a.e7481"
            ]
        ]
    },
    {
        "id": "31109c7.02de064",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Operate Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a64ffafd.564328",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Store Changes Only (CSV)",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "store_changes_only",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1060,
        "y": 2480,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "51c99eb.df33f6",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Changes Only Keep-alive timeout",
        "tooltip": "Keep Alive Timeout (seconds)",
        "group": "c52ab030.ec40a",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "keep_alive",
        "x": 1080,
        "y": 2600,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "7bcc142.b5664ec",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Send Changes Only (except FTP)",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "send_changes_only",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1080,
        "y": 2520,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "51e29026.0d2a5",
        "type": "delay",
        "z": "3022fd6.d249f02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 260,
        "y": 1260,
        "wires": [
            [
                "e51caedb.5020a"
            ]
        ]
    },
    {
        "id": "fd26a318.17a49",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "bbgAgtVersion:1.2.1-dev3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nVERSION=\"1.2.1-dev3\";\nglobal.set(\"bbgtAgtVersion\", VERSION);",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "15ff5e0d.b7b352",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DataLoggerVersion:1.2.0",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nDATALOGGER_VERSION=\"1.2.0\";\nglobal.set(\"DataLoggerVersion\", DATALOGGER_VERSION);",
        "finalize": "",
        "x": 990,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b71097fa.5604c8",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud MQTT (OUT)",
        "links": [
            "8b85e49d.c73188"
        ],
        "x": 735,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d69200ab.27767",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: Cloud MQTT EMIOS (OUT)",
        "links": [
            "6bc3ed96.0d7c34"
        ],
        "x": 775,
        "y": 1480,
        "wires": []
    },
    {
        "id": "8b85e49d.c73188",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: MQTT (IN)",
        "links": [
            "b71097fa.5604c8"
        ],
        "x": 75,
        "y": 3000,
        "wires": [
            [
                "a991dfd5.d4f2c"
            ]
        ]
    },
    {
        "id": "6d18c06a.29c4b",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "InfluxDB Build",
        "func": "data = msg.payload;\n\nmsg.payload = [\n    { \n        value : data\n    },\n    {\n        devName    : msg.item.name,\n        devType    : msg.item.type,\n        devModel   : msg.item.model,\n        //devVersion : msg.item.version,\n        measName   : msg.meas.name,\n        measID     : msg.meas.ID,\n    }\n];\n\nmsg.measurement = msg.meas.type\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 2840,
        "wires": [
            [
                "75d80f5c.b0b42"
            ]
        ]
    },
    {
        "id": "b6d3e4e4.c03698",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: InfluxDB (IN)",
        "links": [
            "2261045a.fb24ec"
        ],
        "x": 75,
        "y": 2760,
        "wires": [
            [
                "99a5c73b.a800d8"
            ]
        ]
    },
    {
        "id": "75d80f5c.b0b42",
        "type": "influxdb out",
        "z": "3022fd6.d249f02",
        "influxdb": "9cdaa712.01fbb8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 700,
        "y": 2840,
        "wires": []
    },
    {
        "id": "951c40ac.9a78d",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: InfluxDB Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 2720,
        "wires": []
    },
    {
        "id": "911956e4.29b948",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "INFLUXDB",
        "info": "",
        "x": 120,
        "y": 2700,
        "wires": []
    },
    {
        "id": "99a5c73b.a800d8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: InfluxDB Build",
        "func": "/* Variables */\nvar loglevel = 3;\n\nbbgtAgtCfg      = global.get(\"bbgtAgtCfg\", \"config\") || {};\nbbgtAgtInfo     = global.get(\"bbgtAgtInfo\", \"config\") || {};\nbabelgateStatus = global.get(\"babelgateStatus\") || {};\nbabelgate   = bbgtAgtCfg.babelgate || {};\nmacAddress  = babelgateStatus.mac || \"\";\nproductInfo = bbgtAgtInfo.productInfo || {};\n\n/**************************************************/\nfunction build_influxdb_data(project_name, dataLoggerID, device, meas, value)\n{\n    str = meas.type + \",\" +\n        \"project=\"     + project_name.replace(/ /g, '_');\n    if (dataLoggerID)\n        str += \",dataLoggerID=\" + dataLoggerID.replace(/ /g, '_');\n    if (babelgate.name)\n        str += \",gwName=\" + babelgate.name.replace(/ /g, '_');\n    if (productInfo.model)\n        str += \",gwModel=\" + productInfo.model.replace(/ /g, '_');\n    if (macAddress)\n        str += \",gwSerial=\" + macAddress.replace(/ /g, '_');\n    str +=        \n        \",devName=\"     + device.name.replace(/ /g, '_') + \",\" +\n        \"devModel=\"    + device.model.replace(/ /g, '_') + \",\" +\n        \"devSerial=\"   + device.serial.replace(/ /g, '_') + \",\" +\n        \"devVersion=\"  + device.version.replace(/ /g, '_') + \",\" +\n        \"devType=\"     + device.type.replace(/ /g, '_') + \",\" +\n        \"measName=\"    + meas.name.replace(/ /g, '_') + \",\" +\n        \"measID=\"      + meas.ID.replace(/ /g, '_') + \" \" +\n        \"value=\"       + value;\n    return str;\n}\n\nvar url_base = msg.server.url;\nvar database = msg.server.database;\n\nvar url=url_base + \"/write?db=\" + database;\n\n// Hora de publicacion de los datos\nvar published = new Date()\n\ndataLogger = global.get(\"dataLogger\", \"config\") || { config : {} };\nif (dataLogger.config && dataLogger.config.project)\n    project = dataLogger.config.project;\nelse if ( (babelgate) && (babelgate.project) ) {\n    project = babelgate.project;\n}\nelse\n    project = \"Test-Project\"\n\ndataLoggerID = dataLogger.scheduler.dataLoggerID;\n\nvar newMsg = {\n    url     : url,\n    method  : \"POST\",\n    headers : {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    old_msg : msg\n};\n\nnewMsg.payload = build_influxdb_data(project, dataLoggerID, msg.item, msg.meas, msg.payload);\nnewMsg.count = 0;\nif (msg.server.queue_ttl)\n    newMsg.ttl = msg.server.queue_ttl * 1000;\nelse\n    newMsg.nottl = true;\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2760,
        "wires": [
            [
                "e038b627.bdc808",
                "b82010e5.bbe5"
            ]
        ]
    },
    {
        "id": "b307bf77.c34de",
        "type": "http request",
        "z": "3022fd6.d249f02",
        "name": "DL: InfluxDB Send",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 890,
        "y": 2760,
        "wires": [
            [
                "bffeef2a.f9054",
                "4c092082.94e3f"
            ]
        ]
    },
    {
        "id": "bffeef2a.f9054",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: InfluxDB Send Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 2720,
        "wires": []
    },
    {
        "id": "4c092082.94e3f",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: InfluxDB Result",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\") || { cloud : { serverList : {} } };\nif (!dataLoggerStatus.cloud)\n    dataLoggerStatus.cloud = { serverList : {} };\n\nserverListStatus = dataLoggerStatus.cloud.serverList;\nserverStatus = serverListStatus[msg.old_msg.server.name];\nif (!serverStatus) {\n    serverStatus = {\n        status  : \"unknown\",\n        statistics : {\n            total  : 0,\n            errors : 0,\n        }\n    }\n}\n\nif (Math.floor(msg.statusCode / 100) != 2) {\n    serverStatus.status = \"error\";\n    serverStatus.statistics.errors++;\n    serverStatus.statistics.last_error_timestamp = new Date();\n    serverStatus.statistics.last_error_code      = msg.statusCode;\n    serverStatus.statistics.last_error_msg       = msg.payload;\n}\nelse {\n    serverStatus.status = \"ok\";\n    serverStatus.statistics.last_ok_timestamp = new Date();\n}\nserverStatus.statistics.total++;\n\nserverListStatus[msg.old_msg.server.name] = serverStatus;\ndataLoggerStatus.cloud.serverList = serverListStatus;\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nmsg.count = 1;\nmsg.trigger = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 2760,
        "wires": [
            [
                "e038b627.bdc808"
            ]
        ]
    },
    {
        "id": "e038b627.bdc808",
        "type": "simple-queue",
        "z": "3022fd6.d249f02",
        "name": "Queue InfluxDB",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 480,
        "y": 2760,
        "wires": [
            [
                "951c40ac.9a78d",
                "2aa2c10d.fb604e"
            ]
        ]
    },
    {
        "id": "2aa2c10d.fb604e",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "",
        "func": "if (msg.trigger || msg.nottl || msg.ttl) {\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 2760,
        "wires": [
            [
                "b307bf77.c34de"
            ]
        ]
    },
    {
        "id": "b82010e5.bbe5",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: InfluxDB Build",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2720,
        "wires": []
    },
    {
        "id": "65f097e4.73b408",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "MQTT",
        "info": "",
        "x": 110,
        "y": 2940,
        "wires": []
    },
    {
        "id": "a991dfd5.d4f2c",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: MQTT Build",
        "func": "msg.topic = msg.server.database;\ntry {\n    msg.payload = eval(msg.extra);\n}\ncatch(e) {\n    globalFuns = global.get(\"globalFuns\");\n    globalFuns.tlnt_log(1, \"DataLogger:MQTT\", \"MQTT Build: ERROR evaluating string: \" + e);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 3000,
        "wires": [
            [
                "c68cd4ac.6b70f8",
                "78f2d62a.badfe8"
            ]
        ]
    },
    {
        "id": "c68cd4ac.6b70f8",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MQTT Build",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 3000,
        "wires": []
    },
    {
        "id": "bfa42182.7383d",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "env = global.get(\"env\");\n\nenv.MQTT_BROKER   = \"localhost\";\nenv.MQTT_PORT     = \"1883\";\nenv.MQTT_USERNAME = \"user\";\nenv.MQTT_PASSWD   = \"pass\";\n\nid = 1079;\ndata = \"11.1\"\nmsg.topic = \"EXTERNAL_SENS/VALUES\";\nmsg.payload = id + \"##FREC_ENVIO#P#\" + data + \"#1\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "5d2cc16f.500d",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "bfa42182.7383d"
            ]
        ]
    },
    {
        "id": "c668567d.0ab508",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "MQTT Send",
        "func": "var mqtt = global.get('mqtt')\n\n//BROKER_HOST = \"localhost\";\nBROKER_HOST = \"babelgate.energy-minus.es\";\nBROKER_PORT = 1883;\nbroker_url = \"mqtt://\" + BROKER_HOST + \":\" + BROKER_PORT;\noptions = {\n    //username : \"user\",\n    //password : \"pass\",\n    keepalive : 0,\n    reschedulePings : false,\n    //qos : 0,\n    retain : false,\n    resubscribe : false,\n};\nid = 1077;  // Sensor: fry_test\nid = 1204;  // sensor temperatura\ndata = \"31.1\"\ntopic = \"EXTERNAL_SENS/VALUES\";\npayload = id + \"##FREC_ENVIO#P#\" + data + \"#1\";\n\n\nvar c = mqtt.connect(broker_url, options);\n//node.warn(JSON.stringify(c))\nc.on('connect', function () {\n    node.warn(\"Connect\");\n  //client.subscribe('presence', function (err) {\n  //    if (!err) {\n      c.publish(topic, payload)\n  //  }\n  //})\n  c.end();\n})\nc.on('response', function (err) {\n    node.warn(\"response\");\n})\nc.on('close', function (err) {\n    node.warn(\"close\");\n})\nc.on('offline', function (err) {\n    node.warn(\"offline\");\n})\nc.on('end', function (err) {\n    node.warn(\"end\");\n    node.send(msg);\n    node.done();\n})\nc.on('uncaughtException', function (err) {\n    node.warn(\"uncaughtException\");\n    node.send(msg);\n    node.done();\n})\nc.on('error', function(err) {\n    node.warn(\"error\");\n    node.send(msg);\n    node.done();\n})\nc.on('packetsend', function(packet) {\n    node.warn(\"packetsend\");\n    node.warn(packet);\n})\nc.on('packetreceive', function(packet) {\n    node.warn(\"packetreceive\");\n    node.warn(packet);\n})\nc.on('message', function (topic, message, packet) {\n  // message is Buffer\n  node.warn(\"message:\" + message.toString())\n  c.end()\n})\n\nnode.warn(\"Main\");\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "a65806de.031f28"
            ]
        ]
    },
    {
        "id": "fa9defd6.e81e1",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 320,
        "wires": [
            [
                "c668567d.0ab508"
            ]
        ]
    },
    {
        "id": "a65806de.031f28",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: MQTT Send",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "6bc3ed96.0d7c34",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "DL: MQTT EMIOS (IN)",
        "links": [
            "d69200ab.27767"
        ],
        "x": 75,
        "y": 3120,
        "wires": [
            [
                "6c912dcb.311e44"
            ]
        ]
    },
    {
        "id": "e21c5333.9c26d",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "MQTT EMIOS",
        "info": "",
        "x": 130,
        "y": 3060,
        "wires": []
    },
    {
        "id": "6c912dcb.311e44",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: MQTT EMIOS Build",
        "func": "msg.topic = \"EXTERNAL_SENS/VALUES\";\ndata      = msg.payload;\n// Caso excepcional del sensor de luminosidad\nif (msg.meas.type === 'lum') {\n    new_payload = msg.meas.ID + \"##FREC_ENVIO#P#\" + data + \"*0#1\";\n} else {\n    new_payload = msg.meas.ID + \"##FREC_ENVIO#P#\" + data + \"#1\";\n}\n\nmsg.payload = new_payload;\n\nfields = msg.server.url.split(\"://\");\nif (fields.length == 1)\n    msg.server.url = \"mqtt://\" + msg.server.url;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 250,
        "y": 3120,
        "wires": [
            [
                "1e4bc322.6fa93d",
                "78f2d62a.badfe8"
            ]
        ]
    },
    {
        "id": "1e4bc322.6fa93d",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MQTT EMIOS Build",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3120,
        "wires": []
    },
    {
        "id": "a78af1e0.7fe8b",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "MQTT Send",
        "func": "globalFuns = global.get(\"globalFuns\");\nvar mqtt = global.get('mqtt');\n\n//broker_url = \"mqtt://\" + msg.server.url;\nbroker_url = msg.server.url;\noptions = {\n    username : msg.server.user,\n    password : msg.server.password,\n    keepalive : 0,\n    reschedulePings : false,\n    //qos : 0,\n    retain : false,\n    resubscribe : false,\n};\n\nvar msg_sent = false;\nmsg.status = -1;\nconnect_msg = \"Connect ERROR\";\n\nvar c = mqtt.connect(broker_url, options);\n//node.warn(JSON.stringify(c))\nc.on('uncaughtException', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"uncaughtException\");\n    msg.status  = -2;\n    msg.payload = \"uncaughtException\";\n    node.send(msg);\n    node.done();\n})\nc.on('error', function(err) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"error\");\n    msg.payload = connect_msg;\n    node.send(msg);\n    node.done();\n})\nc.on('response', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"response\");\n})\nc.on('close', function () {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"close. msg_sent:\" + msg_sent);\n    if (!msg_sent) {\n        globalFuns.tlnt_log(2, \"DataLogger:MQTT\", \"WARN: close without send: \")\n        c.end()\n    }\n    msg.status  = 0;\n    connect_msg = \"Send OK\";\n})\nc.on('offline', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"offline: \" + err);\n})\nc.on('end', function (err) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"end\");\n    msg.payload = connect_msg;\n    node.send(msg);\n    node.done();\n})\nc.on('packetsend', function(packet) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"packetsend\");\n    globalFuns.tlnt_log(6, \"DataLogger:MQTT\", packet);\n})\nc.on('packetreceive', function(packet) {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"packetreceive\");\n    globalFuns.tlnt_log(6, \"DataLogger:MQTT\", packet);\n})\nc.on('message', function (topic, message, packet) {\n    // message is Buffer\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"message:\" + message.toString())\n    c.end()\n})\nc.on('connect', function () {\n    globalFuns.tlnt_log(5, \"DataLogger:MQTT\", \"Connect\");\n    c.publish(msg.topic, msg.payload)\n    c.end();\n    msg_sent = true;\n})\n\n//node.warn(\"Main\");\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 3060,
        "wires": [
            [
                "ba9a6b9c.95abf8"
            ]
        ]
    },
    {
        "id": "397771a2.2d28de",
        "type": "catch",
        "z": "3022fd6.d249f02",
        "name": "",
        "scope": [
            "a78af1e0.7fe8b"
        ],
        "uncaught": false,
        "x": 810,
        "y": 3100,
        "wires": [
            [
                "ba9a6b9c.95abf8"
            ]
        ]
    },
    {
        "id": "78f2d62a.badfe8",
        "type": "semaphore-take",
        "z": "3022fd6.d249f02",
        "config": "12bed69.e35c129",
        "name": "Sem MQTT Take",
        "x": 530,
        "y": 3060,
        "wires": [
            [
                "a78af1e0.7fe8b",
                "57cd4ddd.815ec4"
            ]
        ]
    },
    {
        "id": "ba9a6b9c.95abf8",
        "type": "semaphore-leave",
        "z": "3022fd6.d249f02",
        "config": "12bed69.e35c129",
        "name": "Sem MQTT Leave",
        "x": 990,
        "y": 3060,
        "wires": [
            [
                "dec0d95d.785be8",
                "fc579698.6dff58"
            ]
        ]
    },
    {
        "id": "57cd4ddd.815ec4",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MQTT Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 3000,
        "wires": []
    },
    {
        "id": "dec0d95d.785be8",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MQTT Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 3000,
        "wires": []
    },
    {
        "id": "f77b1325.3fe94",
        "type": "ui_text_input",
        "z": "87692da3.99da2",
        "name": "",
        "label": "Extra",
        "tooltip": "",
        "group": "9f1b4f31.7f04f",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "extra",
        "x": 1050,
        "y": 600,
        "wires": [
            [
                "b0545b19.679248"
            ]
        ]
    },
    {
        "id": "7a805a18.e292f4",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Changes Only Threshold",
        "tooltip": "Changes Only Threshold",
        "group": "c52ab030.ec40a",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "threshold",
        "x": 1050,
        "y": 2560,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "1eb008db.caa547",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "d": true,
        "name": "BabelGateAgentCfg Users",
        "func": "bbgtAgtCfg = msg.payload;\nif (!bbgtAgtCfg)\n    return null;\n\nfs = global.get(\"fs\");\nfs.readFileSync(\"/root/.node-red/settings.js\", \"ascii\");\n\n/** NOTA: Pendiente de implementar\n *  Habria que leer el settings.js, la seccion de usuarios (httpNodeAuth) y ver si\n *  los usuarios estan creados y si no, crear/borrar lo que proceda en funcion de bbgtAgtCfg\n */\nRED.runtime.settings.getUserSettings(opts => {\n        node.warn(opts);\n        node.done();\n    })\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a62ec156.48a82",
        "type": "inject",
        "z": "1c8a3583.7e682a",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "1eb008db.caa547"
            ]
        ]
    },
    {
        "id": "64f6eefa.c4dea",
        "type": "debug",
        "z": "87692da3.99da2",
        "name": "DBG: DL Cloud: Store",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 380,
        "wires": []
    },
    {
        "id": "5be85bd7.b13664",
        "type": "inject",
        "z": "87692da3.99da2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 800,
        "wires": [
            [
                "5178554c.9216bc"
            ]
        ]
    },
    {
        "id": "5178554c.9216bc",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "Cloud Reset",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\");\ndataLogger.cloud.serverList = {};\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nflow.set(\"selectedServer\", undefined, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a6f5892e.5e2cc8",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "DL: Server ADD",
        "group": "9f1b4f31.7f04f",
        "order": 11,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "cc949097.f1f1f"
            ]
        ]
    },
    {
        "id": "1849bead.9eb0a1",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "DL: Server EDIT",
        "group": "9f1b4f31.7f04f",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "cc949097.f1f1f"
            ]
        ]
    },
    {
        "id": "667fc5b2.20db0c",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "DL: Server SAVE",
        "group": "9f1b4f31.7f04f",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 210,
        "y": 660,
        "wires": [
            [
                "cc949097.f1f1f"
            ]
        ]
    },
    {
        "id": "f4a82b15.4835e8",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "DL: Server DEL",
        "group": "9f1b4f31.7f04f",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 220,
        "y": 700,
        "wires": [
            [
                "cc949097.f1f1f"
            ]
        ]
    },
    {
        "id": "cc949097.f1f1f",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "DL: Server Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null ];\n}\n\ndataLogger  = global.get(\"dataLogger\", \"config\");\nserverList = dataLogger.cloud.serverList;\nselectedServer = flow.get('selectedServer', \"memoryOnly\") || {}\nif (!selectedServer)\n    return [ null, null ];\n\nif (msg.topic == 'save') {\n    serverList[selectedServer.name] = selectedServer;\n}\nelse {\n    if (serverList[selectedServer.name])\n        delete(serverList[selectedServer.name]);\n}\n\ndataLogger.cloud.serverList = serverList;\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nmsgCtl = { topic : msg.topic };\n\nreturn [ msgCtl, msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 640,
        "wires": [
            [
                "1ee875d8.f90a3a",
                "97223bad.af8988"
            ],
            [
                "4ed27239.6ea3dc"
            ]
        ]
    },
    {
        "id": "d222e184.a1638",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "455ef938.a671c8",
        "type": "function",
        "z": "87692da3.99da2",
        "name": "DL: Server Stats",
        "func": "msgEmpty = { payload : \"\" };\nempty = [ msgEmpty, msgEmpty, msgEmpty, msgEmpty, msgEmpty, msgEmpty];\n\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus || !dataLoggerStatus.cloud || !dataLoggerStatus.cloud.serverList)\n    return empty;\n\nselectedServer = flow.get(\"selectedServer\", \"memoryOnly\");\nif (!selectedServer)\n    return empty;\n//node.warn(selectedServer);\n\nif (msg.topic == \"reset\") {\n    dataLoggerStatus.cloud.serverList[selectedServer.name] = {\n        status : \"\",\n        statistics : { errors : 0, total : 0 }\n    };\n}\n\nserverStatus = dataLoggerStatus.cloud.serverList[selectedServer.name];\nif (!serverStatus || !serverStatus.statistics)\n    return empty;\n\nstats = serverStatus.statistics;\n//node.warn(stats);\n\nmsgStatus    = { payload : serverStatus.status || \"\" };\nmsgCounter   = { payload : stats.errors + \"/\" + stats.total };\nmsgOKts      = { payload : stats.last_ok_timestamp || \"\" };\nmsgERRORts   = { payload : stats.last_error_timestamp || \"\" };\nmsgERRORmsg  = { payload : stats.last_error_msg || \"\" };\nmsgERRORcode = { payload : stats.last_error_code || \"\" };\n\nreturn [ msgStatus, msgCounter, msgOKts, msgERRORts, msgERRORmsg, msgERRORcode ];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 160,
        "wires": [
            [
                "d222e184.a1638"
            ],
            [
                "c7eecd2f.4499b"
            ],
            [
                "2f1a89df.7f0df6"
            ],
            [
                "89eceac0.f26f58"
            ],
            [
                "125e282f.9daae8"
            ],
            [
                "b643d604.fe1618"
            ]
        ]
    },
    {
        "id": "2f1a89df.7f0df6",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last OK",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1040,
        "y": 140,
        "wires": []
    },
    {
        "id": "89eceac0.f26f58",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last ERROR",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1050,
        "y": 180,
        "wires": []
    },
    {
        "id": "125e282f.9daae8",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 6,
        "width": "6",
        "height": "3",
        "name": "",
        "label": "Last ERROR Msg",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1070,
        "y": 220,
        "wires": []
    },
    {
        "id": "b643d604.fe1618",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last ERROR Code",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "c7eecd2f.4499b",
        "type": "ui_text",
        "z": "87692da3.99da2",
        "group": "7db826fe.ca75c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Error Counter (errors/total)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "fc579698.6dff58",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "MQTT Finish",
        "func": "globalFuns = global.get(\"globalFuns\");\ndataLoggerStatus = global.get(\"dataLoggerStatus\") || { cloud : { serverList : {} } };\nif (!dataLoggerStatus.cloud.serverList)\n    dataLoggerStatus.cloud.serverList = {};\nserverName = msg.server.name;\nif (!serverName)\n    return null;\n\nif (!dataLoggerStatus.cloud.serverList[serverName]) {\n    dataLoggerStatus.cloud.serverList[serverName] = {\n        status : \"unknown\",\n        statistics : {\n            total  : 0,\n            errors : 0\n        }\n    }\n}\n\ndataLoggerStatus.cloud.serverList[serverName].statistics.total++;\ntimestamp = new Date();\nif (msg.status === 0) {\n    dataLoggerStatus.cloud.serverList[serverName].status = \"ok\";\n    dataLoggerStatus.cloud.serverList[serverName].statistics.last_ok_timestamp = timestamp;\n}\nelse {\n    dataLoggerStatus.cloud.serverList[serverName].status = \"Error\";\n    dataLoggerStatus.cloud.serverList[serverName].statistics.errors++;\n    dataLoggerStatus.cloud.serverList[serverName].statistics.last_error_timestamp = timestamp;\n    dataLoggerStatus.cloud.serverList[serverName].statistics.last_error_msg  = msg.payload;\n    dataLoggerStatus.cloud.serverList[serverName].statistics.last_error_code = msg.status;\n    globalFuns.tlnt_log(4, \"DataLogger\", \"MQTT: ERROR\");\n}\n\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "7e2395f7.c7582c",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "",
        "group": "7db826fe.ca75c8",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "x": 660,
        "y": 60,
        "wires": [
            [
                "455ef938.a671c8"
            ]
        ]
    },
    {
        "id": "a80865a.9a92b98",
        "type": "ui_button",
        "z": "87692da3.99da2",
        "name": "",
        "group": "7db826fe.ca75c8",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "restore",
        "payload": "",
        "payloadType": "str",
        "topic": "reset",
        "x": 670,
        "y": 100,
        "wires": [
            [
                "455ef938.a671c8"
            ]
        ]
    },
    {
        "id": "2dd7dc6a.1f5974",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Dev PWM-IN",
        "func": "if (msg.topic == \"add\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    selectedDevice.pwm_in = { reset_on_restart : false, period : 15 };\n    flow.set(\"selectedDevice\", selectedDevice, \"memoryOnly\");\n    enable = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"pwm-in\")\n        return [ null, null, null ];\n    enable = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedDevice = { pwm_in : {} };\n    enable = false;\n}\nelse if (msg.topic == \"save\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"pwm-in\")\n        return [ null, null, null ];\n    enable = false;\n}\nelse {\n    enable = false;\n    //selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {};\n    selectedDevice = msg.payload.item;\n    if (selectedDevice.type != \"pwm-in\")\n        return [ null, null, null ];\n\n    selectedDevice.pwm_in = msg.payload.item.pwm_in || { };\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\n\nmsgIOName = { payload : selectedDevice.pwm_in.ioname || \"\", enabled : enable };\nmsgPeriod = { payload : selectedDevice.pwm_in.period || \"\", enabled : enable };\nmsgFlag   = { payload : selectedDevice.pwm_in.reset_on_restart, enabled : enable };\n\nreturn [ msgIOName, msgPeriod, msgFlag ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1960,
        "wires": [
            [
                "6b04e913.433bb8"
            ],
            [
                "dceb8842.554918"
            ],
            [
                "228f7a9b.1dd006"
            ]
        ]
    },
    {
        "id": "6b04e913.433bb8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Pulse Counter Input Name",
        "tooltip": "I/O Name (IN1, IN2, ...)",
        "group": "1b455197.441f2e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "ioname",
        "x": 1060,
        "y": 1920,
        "wires": [
            [
                "b96c71ff.c5637"
            ]
        ]
    },
    {
        "id": "b96c71ff.c5637",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev PWM-IN",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || { };\nif (!selectedDevice.pwm_in)\n    selectedDevice.pwm_in = {};\nselectedDevice.pwm_in[msg.topic] = msg.payload;\n\nif (selectedDevice.pwm_in.ioname) {\n    bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\n    var translate_io = bbgtAgtInfo.translate_io;\n    try { selectedDevice.pwm_in.iopin = translate_io[selectedDevice.pwm_in.ioname].pin; }\n    catch(e) {}\n}\n\nflow.set('selectedDevice', selectedDevice, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "dceb8842.554918",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Pulse Counter Period",
        "tooltip": "Pulse counter period in seconds (1-2592000)",
        "group": "1b455197.441f2e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "period",
        "x": 1040,
        "y": 1960,
        "wires": [
            [
                "b96c71ff.c5637"
            ]
        ]
    },
    {
        "id": "44363d10.7601b4",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: PWM-IN Build",
        "func": "var pwm_in = msg.item.pwm_in;\nif (!pwm_in)\n    return null;\n\niopin = pwm_in.iopin;\nif (!iopin)\n    return null;\n\nmsg.filename = \"/var/log/pwmmon-\" + iopin + \".log\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 780,
        "wires": [
            [
                "d0428398.9a203"
            ]
        ]
    },
    {
        "id": "d0428398.9a203",
        "type": "file in",
        "z": "3022fd6.d249f02",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "ascii",
        "x": 470,
        "y": 780,
        "wires": [
            [
                "95b5776a.6a2108"
            ]
        ]
    },
    {
        "id": "95b5776a.6a2108",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: PWM-IN Process",
        "func": "// Tick:TS=1597750920, HI=0, LO=0, HzHI=0.00, HzLO=0.00, AGG_HI=0, AGG_LO=1\ntry {\n    //node.warn(msg.payload)\n    fields = msg.payload.substr(5).split(\",\");\n    //node.warn(fields)\n    //node.warn(fields[0])\n    //node.warn(fields[1])\n    eval(fields[0]);    // TS\n    eval(fields[1]);    // HI\n    eval(fields[2]);    // LO\n    eval(fields[3]);    // HzHI\n    eval(fields[4]);    // HzLO\n    eval(fields[5]);    // AGG_HI\n    eval(fields[6]);    // AGG_LO\n}\ncatch(e) {\n    globalFuns = global.get(\"globalFuns\");\n    globalFuns.tlnt_log(2, \"DataLogger\", \"PWM-IN Parse Error: \" + msg.payload)\n    return null;\n}\n\nif ( (HI === undefined) || (TS === undefined) )\n    return null;\n\nctxName = \"pwm-\" + msg.item.pwm_in.ioname;\nctx = context.get(ctxName, \"memoryOnly\") || { value : 0, ts : 0 };\nif (ctx.ts == TS)\n    return null;\nctx.ts    = TS;\nctx.value = HI;\ncontext.set(ctxName, ctx, \"memoryOnly\")\n\nmsg.payload = [ HI, LO, HzHI, HzLO, AGG_HI, AGG_LO ];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 780,
        "wires": [
            [
                "57da7917.9c4bc8",
                "6faf1c8b.339a04"
            ]
        ]
    },
    {
        "id": "57da7917.9c4bc8",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: PWM-IN Request (OUT)",
        "links": [
            "30ab35fe.693b6a"
        ],
        "x": 875,
        "y": 780,
        "wires": []
    },
    {
        "id": "6faf1c8b.339a04",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: PWM-IN Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 740,
        "wires": []
    },
    {
        "id": "1ce98527.d2f9ab",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "DL: PWM Type (OUT)",
        "links": [
            "805d36b7.7ebbe8"
        ],
        "x": 915,
        "y": 240,
        "wires": []
    },
    {
        "id": "e44e3371.a7c",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Web Configuration",
        "info": "",
        "x": 230,
        "y": 1600,
        "wires": []
    },
    {
        "id": "9cc0badc.b40d98",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "d6c956cd.138468",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 670,
        "y": 1580,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "203d9a5c.c593f6",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "d6c956cd.138468",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Cancel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "cancel",
        "payload": "",
        "payloadType": "str",
        "topic": "cancel",
        "x": 670,
        "y": 1620,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "b2affe1c.f251d",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Port",
        "tooltip": "",
        "group": "d6c956cd.138468",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "port",
        "x": 670,
        "y": 1660,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "98ff3ebf.43e03",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "Root Path",
        "tooltip": "",
        "group": "d6c956cd.138468",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "root_path",
        "x": 680,
        "y": 1700,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "655fb4de.7eed3c",
        "type": "ui_dropdown",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "User",
        "tooltip": "",
        "place": "Select option",
        "group": "d6c956cd.138468",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "user",
        "x": 670,
        "y": 1740,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "386677ba.a24d88",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: WebCfg Build",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\n\nglobalFuns.tlnt_log(6, \"SystemMgmt\", \"WebConfig\");\n\nwebConfig = bbgtAgtCfg.web;\nif (!webConfig) {\n    webConfig = {\n        port      : \"\",\n        user      : undefined,\n        https     : false,\n        root_path : \"\"\n    }\n    bbgtAgtCfg.web = webConfig;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n}\n\nenabled       = true;\n\nNO_AUTH_USER = \"-- No Auth --\"; \nif (bbgtAgtCfg.users)\n    user_list = Object.keys(bbgtAgtCfg.users);\nelse\n    user_list = [];\nuser_list.unshift(NO_AUTH_USER);\nuser = webConfig.user || NO_AUTH_USER;\n\nmsgPort = { payload : webConfig.port, enabled : enabled };\nmsgRoot = { payload : webConfig.root_path || \"\", enabled : enabled };\nmsgUser = { payload : user, options : user_list, enabled : enabled };\nmsgHttps= { payload : webConfig.https, enabled : enabled };\n\n//if ( (msg.topic == \"init\") || (msg.topic == \"config/apply\") ) {\n  //  cp = global.get(\"child_process\");\n    //if (webConfig.old_port)\n      //  cp.execSync(\"ufw delete allow \" + webConfig.old_port)\n    //if (webConfig.port)\n      // cp.execSync(\"ufw allow \" + webConfig.port)\n//}\nreturn [ msgPort, msgRoot, msgUser, msgHttps ];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1720,
        "wires": [
            [
                "b2affe1c.f251d"
            ],
            [
                "98ff3ebf.43e03"
            ],
            [
                "655fb4de.7eed3c"
            ],
            [
                "44338775.ba9338"
            ]
        ]
    },
    {
        "id": "79d36fd6.5d956",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "WebCfg INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1660,
        "wires": [
            [
                "386677ba.a24d88"
            ]
        ]
    },
    {
        "id": "69ebea24.492094",
        "type": "link in",
        "z": "31c39280.4de9fe",
        "name": "MGMT: WebCfg (IN)",
        "links": [
            "f70099ad.88cde8",
            "a84e62b4.6a0d8"
        ],
        "x": 195,
        "y": 1700,
        "wires": [
            [
                "386677ba.a24d88"
            ]
        ]
    },
    {
        "id": "4ce0a3d3.e7e2bc",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: WebCfg Action",
        "func": "//******************************************************\n//Function to get the web_port, because if its 80 or 443 \n//it doesn`t appear on the configuration as a number\nfunction get_port(port) {\n    if ( (port !== undefined) && (port !== \"\"))\n        knock_port = port;\n    else\n        (bbgtAgtCfg.web.https)?(knock_port = \"443\"):(knock_port = \"80\");\n    return(knock_port);\n}\n//********************************************************\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nwebConfig = bbgtAgtCfg.web;\nif (!webConfig)\n    return [ null, null ];\nglobalFuns  = global.get(\"globalFuns\");\n\ntmpWebConfig = flow.get(\"tmpWebConfig\", \"memoryOnly\");\nif (!tmpWebConfig) {\n    tmpWebConfig = RED.util.cloneMessage(webConfig);\n}\n\nglobalFuns.tlnt_log(3, \"SystemMgmt\", \"WebConfig: \" + msg.topic);\n\nif ( (msg.topic == \"save\") || (msg.topic == \"config/apply\") ) {\n    if (msg.topic == \"save\") {\n        webConfig = RED.util.cloneMessage(tmpWebConfig);\n    }\n    if ( (webConfig.user) && (bbgtAgtCfg.users[webConfig.user]) && (bbgtAgtCfg.users[webConfig.user].passwordNR) ) {\n        webConfig.httpNodeAuth = {\n            user : webConfig.user,\n            pass : bbgtAgtCfg.users[webConfig.user].passwordNR\n        }\n    }\n    else\n        webConfig.httpNodeAuth = undefined;\n\n    old_port = bbgtAgtCfg.web.port;\n    knock_old_port = get_port(old_port);\n    flow.set(\"knock_old_port\", knock_old_port);\n    \n    bbgtAgtCfg.web          = webConfig;\n    bbgtAgtCfg.web.old_port = old_port;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n    \n    knock_port = get_port(bbgtAgtCfg.web.port);\n    flow.set(\"knock_port\", knock_port);\n\n    msgNotif = {\n        topic   : \"Web Management\",\n        payload : \"Configuration saved OK\" \n    }\n     msgNotif2 = {\n        topic   : \"Please remember to Restart System\",\n        payload : \"for the configuration to be applied\"\n    }\n\n    //fs = global.get(\"fs\");\n    //data =  \"NODE_OPTIONS=--max-old-space-size=256\\n\" +\n    //        \"NODE_RED_OPTIONS=-v\\n\\n\" +\n    //        \"PORT=\" + webConfig.port + \"\\n\";\n    //fs.writeFileSync(\"/etc/config/node-red.env\", data, \"ascii\");\n\n    globalFuns.tlnt_log(3, \"SystemMgmt\", \"webConfig: \" + JSON.stringify(webConfig));\n}\nelse if (msg.topic == \"cancel\") {\n    tmpWebConfig = RED.util.cloneMessage(webConfig);\n    flow.set(\"tmpWebConfig\", tmpWebConfig, \"memoryOnly\");\n\n    msgNotif  = null;\n    msgNotif2 = null;\n    msg.topic = \"refresh\";\n}\nelse {\n    if ( (msg.topic == \"user\") && (msg.payload == \"-- No Auth --\") )\n        msg.payload = undefined;\n    tmpWebConfig[msg.topic] = msg.payload;\n    flow.set(\"tmpWebConfig\", tmpWebConfig, \"memoryOnly\");\n    msgNotif = null;\n    msgNotif2 = null;\n    msg      = null;\n}\n\nreturn [ msgNotif,msgNotif2, msg ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1660,
        "wires": [
            [
                "cabb187.d7680e8"
            ],
            [
                "93d939b2.b20ca8"
            ],
            [
                "a84e62b4.6a0d8"
            ]
        ]
    },
    {
        "id": "15556868.7454d8",
        "type": "ui_text",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "BabelGate Agent Version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 770,
        "y": 2360,
        "wires": []
    },
    {
        "id": "cd2a9f79.d3b92",
        "type": "change",
        "z": "31c39280.4de9fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "bbgtAgtVersion",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2360,
        "wires": [
            [
                "15556868.7454d8"
            ]
        ]
    },
    {
        "id": "e0c564a9.199618",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "Agent Version INIT (0s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 2360,
        "wires": [
            [
                "cd2a9f79.d3b92"
            ]
        ]
    },
    {
        "id": "2d0aa531.a2516a",
        "type": "ui_text",
        "z": "e045593e.092be8",
        "group": "9b849102.5b534",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DataLogger Version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "eed2176.bdaf7e8",
        "type": "change",
        "z": "e045593e.092be8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DataLoggerVersion",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 80,
        "wires": [
            [
                "2d0aa531.a2516a"
            ]
        ]
    },
    {
        "id": "6c0bbca0.6c4694",
        "type": "inject",
        "z": "e045593e.092be8",
        "name": "DL UI Control INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "init",
        "payloadType": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "eed2176.bdaf7e8",
                "a731e8ee.f0ac28"
            ]
        ]
    },
    {
        "id": "3cd4f45f.09c44c",
        "type": "ui_dropdown",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Modem Type",
        "tooltip": "",
        "place": "Select option",
        "group": "238dd158.f6e28e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "XBee RS-232",
                "value": "xbee-rs232",
                "type": "str"
            },
            {
                "label": "Xbee USB",
                "value": "xbee-usb",
                "type": "str"
            },
            {
                "label": "USB",
                "value": "usb",
                "type": "str"
            },
            {
                "label": "Custom Port",
                "value": "custom",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "modem_type",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "e251dd17.3d3ac",
        "type": "ui_text_input",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Modem Custom Serial Port",
        "tooltip": "/dev/ttyXXXX",
        "group": "238dd158.f6e28e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "custom_port",
        "x": 880,
        "y": 580,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "a3bbf144.1523f",
        "type": "ui_dropdown",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "label": "Modem Model",
        "tooltip": "",
        "place": "Select option",
        "group": "238dd158.f6e28e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Quectel EM05 (4G)",
                "value": "quectel_em05",
                "type": "str"
            },
            {
                "label": "GPRSbee (2G)",
                "value": "gprsbee",
                "type": "str"
            },
            {
                "label": "Reyax RYH2018 (3G)",
                "value": "ryh2018",
                "type": "str"
            },
            {
                "label": "DIGI (3G)",
                "value": "digi_3g",
                "type": "str"
            },
            {
                "label": "Other models",
                "value": "other",
                "type": "str"
            },
            {
                "label": "No Modem Installed",
                "value": "none",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "modem_model",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "1c5ca27a.386b4e"
            ]
        ]
    },
    {
        "id": "f0e7b667.1c2688",
        "type": "link in",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Modem Refresh (IN)",
        "links": [
            "11a2a974.ee9e27"
        ],
        "x": 215,
        "y": 740,
        "wires": [
            [
                "eff4b20f.20254"
            ]
        ]
    },
    {
        "id": "11a2a974.ee9e27",
        "type": "link out",
        "z": "6d0c29a1.c03ff8",
        "name": "MGMT: Modem Refresh (OUT)",
        "links": [
            "f0e7b667.1c2688"
        ],
        "x": 1295,
        "y": 700,
        "wires": []
    },
    {
        "id": "f95665f0.ea53b8",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Build Log",
        "func": "cp = global.get(\"child_process\");\nPATH = \"/root/.node-red/httpStatic/logs/\";\n\ntry { cp.execSync(\"mkdir -p \" + PATH); }\ncatch(e) {}\n\ntry {\n    result = cp.execSync(\"grep -e pppd -e wvdial /var/log/syslog | tail -n 100 > \" + PATH + \"modem.log\");\n}\ncatch(e) { \n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "22b82805.ee7b38",
        "type": "ui_template",
        "z": "6d0c29a1.c03ff8",
        "group": "238dd158.f6e28e",
        "name": "Show Modem Logs",
        "order": 19,
        "width": "3",
        "height": "1",
        "format": "<script>\nthis.scope.action = function() {\n    url = \"/logs/modem.log\";\n    window.open(url, \"_blank\"); \n}\n</script>\n<md-button mat-icon-button ng-click=\"action()\" target=\"_blank\">\n    <i class=\"material-icons\">ballot</i>   View Log\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 190,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "ba09701d.4ccbb",
        "type": "ui_button",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem View Logs",
        "group": "238dd158.f6e28e",
        "order": 18,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Refresh Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "f95665f0.ea53b8"
            ]
        ]
    },
    {
        "id": "3b510e65.87eb82",
        "type": "ui_text",
        "z": "4b1b7339.7c8b5c",
        "d": true,
        "group": "b677349c.461718",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "4ad9b4fa.944d3c",
        "type": "function",
        "z": "4b1b7339.7c8b5c",
        "name": "Log Build",
        "func": "filename_list = {\n    //syslog : \"/var/log/syslog+(|.1)\",\n    syslog  : \"/var/log/syslog\",\n    upgrade : \"/tmp/babelgate/upgrades/BabelGate-DataLogger-install-last.log\"\n};\n\nlogSelect = flow.get(\"logSelect\", \"memoryOnly\") || {};\nlogtype   = logSelect.logtype || \"syslog\";\nnumlines  = logSelect.numlines || 1000;\n\nif (logtype == \"custom\")\n    filename = logSelect.custom_filename;\nelse\n    filename = filename_list[logtype];\nif (!filename)\n    return null;\n    \nif (logSelect.filter1 || logSelect.filter2 || logSelect.filter3) {\n    // Ignore binaries (-I)\n    cmd = \"grep -Ih \" + filename;\n    if (logSelect.filter1)\n        cmd += \" -e \\\"\" + logSelect.filter1 + \"\\\"\";\n    if (logSelect.filter2)\n        cmd += \" -e \\\"\" + logSelect.filter2 + \"\\\"\";\n    if (logSelect.filter3)\n        cmd += \" -e \\\"\" + logSelect.filter3 + \"\\\"\";\n    cmd += \" | tail\";\n}\nelse {\n    cmd = \"tail \" + filename;\n}\n\ncmd += \" -n \" + numlines;\n\nmsg.cmd = cmd;\n\ncp = global.get(\"child_process\");\ntry {\n    result = cp.execSync(cmd, { encoding : \"ascii\" });\n}\ncatch (e) {\n    result = \"Error: \" + e;\n}\n\nmsg.result  = result;\nmsg.payload = result.replace(/\\n/g, '<BR>');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 440,
        "wires": [
            [
                "54c75117.19708",
                "908944e5.9f1708"
            ]
        ]
    },
    {
        "id": "a88f0f79.08e6c",
        "type": "inject",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "4ad9b4fa.944d3c"
            ]
        ]
    },
    {
        "id": "5fdf86b.e19d078",
        "type": "ui_text_input",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Filter 1",
        "tooltip": "",
        "group": "ee324b2f.1ee438",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "filter1",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "fdfe96c0.0606a8",
        "type": "ui_dropdown",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Log Type",
        "tooltip": "",
        "place": "Select option",
        "group": "ee324b2f.1ee438",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "System Logs",
                "value": "syslog",
                "type": "str"
            },
            {
                "label": "Custom Log File",
                "value": "custom",
                "type": "str"
            },
            {
                "label": "Firmware Upgrade",
                "value": "upgrade",
                "type": "str"
            },
            {
                "label": "Upload Config",
                "value": "config",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "logtype",
        "x": 240,
        "y": 40,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "90160f0a.e5e3c",
        "type": "function",
        "z": "4b1b7339.7c8b5c",
        "name": "Log Select",
        "func": "logSelect = flow.get(\"logSelect\", \"memoryOnly\") || {};\nlogSelect[msg.topic] = msg.payload;\nflow.set(\"logSelect\", logSelect, \"memoryOnly\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "de401773.84b6e8",
        "type": "ui_button",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "group": "ee324b2f.1ee438",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "View Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "assignment",
        "payload": "",
        "payloadType": "str",
        "topic": "show",
        "x": 240,
        "y": 440,
        "wires": [
            [
                "4ad9b4fa.944d3c"
            ]
        ]
    },
    {
        "id": "5caaeea3.d084a",
        "type": "ui_numeric",
        "z": "4b1b7339.7c8b5c",
        "d": true,
        "name": "",
        "label": "Number of lines",
        "tooltip": "",
        "group": "ee324b2f.1ee438",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "numlines",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "step": 1,
        "x": 220,
        "y": 240,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "5fff5388.11846c",
        "type": "ui_text_input",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Filter 2",
        "tooltip": "",
        "group": "ee324b2f.1ee438",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "filter2",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "54c75117.19708",
        "type": "debug",
        "z": "4b1b7339.7c8b5c",
        "name": "DBG: Log Build",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "10b66157.ccdfbf",
        "type": "ui_text_input",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Filter 3",
        "tooltip": "",
        "group": "ee324b2f.1ee438",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "filter3",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "908944e5.9f1708",
        "type": "ui_template",
        "z": "4b1b7339.7c8b5c",
        "group": "b677349c.461718",
        "name": "",
        "order": 1,
        "width": "18",
        "height": "15",
        "format": "<div ng-bind-html=\"msg.payload\" style=\"font-size:12px\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 730,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1753c258.3e0c0e",
        "type": "ui_text_input",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Custom Log Filename",
        "tooltip": "Full path filename",
        "group": "ee324b2f.1ee438",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "custom_filename",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "d9d288ca.6a9e98",
        "type": "ui_text_input",
        "z": "4b1b7339.7c8b5c",
        "name": "",
        "label": "Number of lines",
        "tooltip": "",
        "group": "ee324b2f.1ee438",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "numlines",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "90160f0a.e5e3c"
            ]
        ]
    },
    {
        "id": "b5c13eb.1d095c",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Modbus Result",
        "func": "for (var idx in msg.payload) {\n    if (msg.payload[idx] === false)\n        msg.payload[idx] = 0;\n    else if (msg.payload[idx] == true)\n        msg.payload[idx] = 1;\n}\n\nregtype = msg.item.modbus.regtype || \"int16\";\nif (regtype == \"int16\") {\n    return [ msg, null ];\n}\nelse if ( (regtype.startsWith(\"int32\")) || (regtype.startsWith(\"float\")) ) {\n    new_payload = [];\n    for (idx = 0; idx < msg.payload.length; idx += 2) {\n        if (regtype.endsWith(\"-be\"))\n            value = (msg.payload[idx] * 65536) + (msg.payload[idx + 1]);\n        else\n            value = (msg.payload[idx + 1] * 65536) + (msg.payload[idx]);\n        new_payload.push(value)\n    }\n    //node.warn(new_payload)\n\n    msg.original_data = msg.payload;\n    msg.payload = new_payload;\n    if (regtype.startsWith(\"int32\"))\n        return [ msg, null ];\n    else\n        return [ null, msg ];\n}\n\nreturn [ msg, null ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 380,
        "wires": [
            [
                "b6f74647.ebda18",
                "39f7db5c.bd5654"
            ],
            [
                "6d46f644.175b68",
                "39f7db5c.bd5654"
            ]
        ]
    },
    {
        "id": "2cd05548.07274a",
        "type": "ui_dropdown",
        "z": "e045593e.092be8",
        "name": "",
        "label": "FC",
        "tooltip": "",
        "place": "Select option",
        "group": "6c2d686e.2ec398",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "FC 1: Coil Status",
                "value": 1,
                "type": "num"
            },
            {
                "label": "FC 2: Input Status",
                "value": 2,
                "type": "num"
            },
            {
                "label": "FC 3: Holding Registers",
                "value": 3,
                "type": "num"
            },
            {
                "label": "FC 4: Input Registers",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "fc",
        "x": 990,
        "y": 1400,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "9fc6ec9d.61867",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "DataLogger ID",
        "tooltip": "",
        "group": "9b849102.5b534",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "",
        "x": 740,
        "y": 320,
        "wires": [
            [
                "87756d29.59913"
            ]
        ]
    },
    {
        "id": "67d0a052.7a22e",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Build ID",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\") || { scheduler : { enabled : false } };\nmsg.payload = dataLogger.scheduler.dataLoggerID || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "9fc6ec9d.61867"
            ]
        ]
    },
    {
        "id": "87756d29.59913",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store ID",
        "func": "dataLogger = global.get(\"dataLogger\", \"config\") || {};\ndataLogger.scheduler.dataLoggerID = msg.payload;\nglobal.set(\"dataLogger\", dataLogger, \"config\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 930,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "49ed7556.4992ec",
        "type": "ui_gauge",
        "z": "6d0c29a1.c03ff8",
        "name": "Modem Power",
        "group": "238dd158.f6e28e",
        "order": 17,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Power Level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#03c200"
        ],
        "seg1": "50",
        "seg2": "75",
        "x": 700,
        "y": 1680,
        "wires": []
    },
    {
        "id": "ce89a7f7.cf5958",
        "type": "ui_text",
        "z": "6d0c29a1.c03ff8",
        "group": "238dd158.f6e28e",
        "order": 16,
        "width": 0,
        "height": 0,
        "name": "Modem Status",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 1720,
        "wires": []
    },
    {
        "id": "2c29d50a.403c5a",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: modem.conf",
        "filename": "/etc/config/tlnt/modem.conf",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 770,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "9e81789b.8152e8",
        "type": "modbus-flex-getter",
        "z": "6c4882be.3f8e7c",
        "d": true,
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "deb611cd.001bd",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 470,
        "y": 1380,
        "wires": [
            [
                "43affcb2.433614"
            ],
            []
        ]
    },
    {
        "id": "b6d0409e.2a67b",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "4da8f3ad.d282cc"
            ]
        ]
    },
    {
        "id": "21804097.e1d55",
        "type": "modbus-flex-connector",
        "z": "6c4882be.3f8e7c",
        "d": true,
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": true,
        "showErrors": true,
        "server": "deb611cd.001bd",
        "x": 490,
        "y": 1460,
        "wires": [
            [
                "aa90a580.4bb508"
            ]
        ]
    },
    {
        "id": "e757717c.68f41",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "msg.payload = {\n    tcpHost : \"89.29.240.158\",\n    tcpPort : 8083,\n    connectorType : \"TCP\",\n    unitId : 0\n};\n\n//msg.payload.unitId || node.unit_id\n//msg.payload.commandDelay || node.commandDelay\n//msg.payload.clientTimeout || node.clientTimeout\n//msg.payload.reconnectTimeout| || node.reconnectTimeout\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 1460,
        "wires": [
            [
                "21804097.e1d55"
            ]
        ]
    },
    {
        "id": "295c19ff.054256",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1460,
        "wires": [
            [
                "e757717c.68f41"
            ]
        ]
    },
    {
        "id": "4da8f3ad.d282cc",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "func": "msg.payload = {\n    unitid : 1,\n    fc : 3,\n    address  : 0,\n    quantity : 4\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 1380,
        "wires": [
            [
                "9e81789b.8152e8"
            ]
        ]
    },
    {
        "id": "43affcb2.433614",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: Modbus Test Get",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1380,
        "wires": []
    },
    {
        "id": "aa90a580.4bb508",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: Modbus Flex Conn",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ef36c6e1.2dbb98",
        "type": "ui_button",
        "z": "e045593e.092be8",
        "name": "",
        "group": "1b455197.441f2e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Counter Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Reset Counter?",
        "payloadType": "str",
        "topic": "",
        "x": 720,
        "y": 2040,
        "wires": [
            [
                "4a94eff1.95292"
            ]
        ]
    },
    {
        "id": "9e11cd58.16af9",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev PWM-IN",
        "func": "if (msg.payload != \"OK\")\n    return null;\n\nselectedDevice = flow.get('selectedDevice', \"memoryOnly\") || { };\nif (!selectedDevice.pwm_in)\n    return null;\n\npin = selectedDevice.pwm_in.iopin;\n\ncp = global.get(\"child_process\");\ncp.execSync(\"systemctl stop pwmMonitor@\" + pin +\".service\");\ncp.execSync(\"pwm_gpio_chrdv_poll -l 1 -T -R -f /var/log/pwmmon-\" + pin + \".log -g \" + pin);\ncp.execSync(\"systemctl start pwmMonitor@\" + pin +\".service\");\n\nmsg.selectedDevice = selectedDevice;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 2040,
        "wires": [
            [
                "d6d45a5d.8a56a8"
            ]
        ]
    },
    {
        "id": "228f7a9b.1dd006",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Reset counter on restart",
        "tooltip": "",
        "group": "1b455197.441f2e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "reset_on_restart",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1050,
        "y": 2000,
        "wires": [
            [
                "b96c71ff.c5637"
            ]
        ]
    },
    {
        "id": "fca664bc.abc668",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Dev Action PWM-IN",
        "func": "if (msg.topic != \"save\") {\n    return null;\n}\n\ndataLogger     = global.get(\"dataLogger\", \"config\");\nmonitorList    = dataLogger.monitor.deviceList;\nmonitorListOld = msg.monitorListOld;\nselectedDevice = flow.get('selectedDevice', \"memoryOnly\");\nif (selectedDevice && (selectedDevice.type != \"pwm-in\") )\n    return null;\n\nbbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\n\nfs = global.get(\"fs\");\ncp = global.get(\"child_process\");\ndata = \"# Autogenerated by node-red DataLogger application (\" + (new Date()).toUTCString() + \")\\n\\n\" + \n    \"PWMMONITOR_PROG=/usr/local/bin/pwm_gpio_chrdv_poll\\n\\n\";\n\ngpio_list_old  = [];\ngpio_list      = [];\nidle_gpio_list = [];\ngpio_list_str      = \"\";\nidle_gpio_list_str = \"\";\n\n/* Find function */\nfunction find_io(element, index, array, thisArg)\n{\n    ioname = this.toString();\n    // Ponemos un try por si no existe algun objeto\n    try { return (element.type == 'pwm-in') && (element.pwm_in.ioname == ioname); }\n    catch(e) { return false; }\n}\n\n/* Iterate */\nfor (var inputIdx in translate_io.list_in) {\n    inputName = translate_io.list_in[inputIdx];\n    //node.warn(inputName);\n    pin = translate_io[inputName].pin;\n    monitorItem = Object.values(monitorList).find(find_io, inputName);\n    if (monitorItem){\n        gpio_list.push(pin);\n        gpio_list_str += pin + \" \";\n        data += \"PWMMONITOR_GPIO\" + pin + \"_PERIOD=\" + monitorItem.pwm_in.period + \"\\n\";\n        data += \"PWMMONITOR_GPIO\" + pin + \"_EDGE=both\\n\";\n        data += \"PWMMONITOR_GPIO\" + pin + \"_FLAGS=\\\"-T\";\n        if (!monitorItem.pwm_in.reset_on_restart)\n            data += \" -I\";\n        data += \"\\\"\\n\";\n    }\n    else {\n        idle_gpio_list.push(pin);\n        idle_gpio_list_str += pin + \" \";\n    }\n    \n    monitorItemOld = Object.values(monitorListOld).find(find_io, inputName);\n    if (monitorItemOld)\n        gpio_list_old.push(pin);\n}\n\ndata += \"PWMMONITOR_GPIO_LIST=\\\"\" + gpio_list_str + \"\\\"\\n\\n\";\ndata += \"PWMMONITOR_IDLE_GPIO_LIST=\\\"\" + idle_gpio_list_str + \"\\\"\\n\\n\";\ndata += \"PWMMONITOR_FILE_PREFIX=/var/log/pwmmon\\n\";\ndata += \"PWMMONITOR_LOGLEVEL=1\\n\";\n\nfs.writeFileSync(\"/etc/config/pwmMonitor.env\", data, \"ascii\");\n\nif (selectedDevice) {\n    restart_iopin = selectedDevice.pwm_in.iopin;\n    cp.execSync(\"systemctl restart pwmMonitor@\" + restart_iopin +\".service\");\n    cp.execSync(\"systemctl enable pwmMonitor@\" + restart_iopin +\".service\");\n}\n\nchanges_start = gpio_list.filter(x => !gpio_list_old.includes(x) && x != restart_iopin);\nfor (var idx in changes_start) {\n    pin = changes_start[idx];\n    cp.execSync(\"systemctl start pwmMonitor@\" + pin +\".service\");\n    cp.execSync(\"systemctl enable pwmMonitor@\" + pin +\".service\");\n}\n\nchanges_stop = gpio_list_old.filter(x => !gpio_list.includes(x) && x != restart_iopin);\nfor (idx in changes_stop) {\n    pin = changes_stop[idx];\n    cp.execSync(\"systemctl stop pwmMonitor@\" + pin +\".service\");\n    cp.execSync(\"systemctl disable pwmMonitor@\" + pin +\".service\");\n}\n\n//node.warn(gpio_list_old);\n//node.warn(gpio_list);\nnode.warn(\"Restart:\" + restart_iopin);\nnode.warn(\"Start:\" + changes_start);\nnode.warn(\"Stop:\" + changes_stop);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "b2d9ca57.852618",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: Dev Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2b256db0.fd4a22",
        "type": "ui_text_input",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "label": "Storage Context",
        "tooltip": "",
        "group": "e2cccaf.0e53c38",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "1000",
        "topic": "context",
        "x": 660,
        "y": 240,
        "wires": [
            [
                "b1482bd6.675068"
            ]
        ]
    },
    {
        "id": "5eb4367a.9b50b8",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: Variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 240,
        "wires": []
    },
    {
        "id": "606d5885.202078",
        "type": "ui_template",
        "z": "6c4882be.3f8e7c",
        "group": "e2cccaf.0e53c38",
        "name": "Variable Content",
        "order": 4,
        "width": "6",
        "height": "9",
        "format": "<div ng-bind-html=\"msg.payload\" style=\"font-size:12px\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1160,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "92c0658e.9cbda8",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: MODBUS Select (IN)",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 535,
        "y": 1520,
        "wires": [
            [
                "29712f4f.63f3c"
            ]
        ]
    },
    {
        "id": "df7755af.53c8d8",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: DIGITAL-IN Select (IN)",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 535,
        "y": 1700,
        "wires": [
            [
                "237ad8dc.00fc48"
            ]
        ]
    },
    {
        "id": "810274d1.086858",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: PWM-IN Select (IN)",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 535,
        "y": 1960,
        "wires": [
            [
                "2dd7dc6a.1f5974"
            ]
        ]
    },
    {
        "id": "1e1c21dc.f3d93e",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: Select Meas (IN)",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 575,
        "y": 2180,
        "wires": [
            [
                "2a1f3bd0.a2cf14"
            ]
        ]
    },
    {
        "id": "400328ff.8805d8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "label": "Baud Speed",
        "tooltip": "",
        "group": "6c2d686e.2ec398",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "serialBaudrate",
        "x": 1010,
        "y": 1560,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "cec7a6a4.0622a8",
        "type": "ui_dropdown",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "label": "Parity",
        "tooltip": "",
        "place": "Select option",
        "group": "6c2d686e.2ec398",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "none",
                "value": "none",
                "type": "str"
            },
            {
                "label": "even",
                "value": "even",
                "type": "str"
            },
            {
                "label": "odd",
                "value": "odd",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "serialParity",
        "x": 990,
        "y": 1600,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "567990d.86f0f7",
        "type": "ui_dropdown",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Reg Type",
        "tooltip": "",
        "place": "Select option",
        "group": "6c2d686e.2ec398",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "int16",
                "value": "int16",
                "type": "str"
            },
            {
                "label": "int32-le",
                "value": "int32-le",
                "type": "str"
            },
            {
                "label": "int32-be",
                "value": "int32-be",
                "type": "str"
            },
            {
                "label": "float-le",
                "value": "float-le",
                "type": "str"
            },
            {
                "label": "float-be",
                "value": "float-be",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "regtype",
        "x": 1000,
        "y": 1640,
        "wires": [
            [
                "cad02bf0.932718"
            ]
        ]
    },
    {
        "id": "e231686.d5f3198",
        "type": "modbus-flex-connector",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Connector",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": true,
        "showErrors": true,
        "server": "338ade83.b54192",
        "x": 1770,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4b9204bc.17ae5c",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Queue info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 540,
        "wires": []
    },
    {
        "id": "1cc110b3.65a9df",
        "type": "modbus-queue-info",
        "z": "3022fd6.d249f02",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "338ade83.b54192",
        "errorOnHighLevel": true,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": true,
        "updateOnAllUnitQueues": true,
        "x": 1510,
        "y": 540,
        "wires": [
            [
                "4b9204bc.17ae5c"
            ]
        ]
    },
    {
        "id": "724ab066.58f02",
        "type": "ui_table",
        "z": "e045593e.092be8",
        "group": "49b4254c.5474ec",
        "name": "DL Device Data",
        "order": 15,
        "width": 5,
        "height": "6",
        "columns": [
            {
                "field": "index",
                "title": "Idx",
                "width": "60",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rawdata",
                "title": "data",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rawlast",
                "title": "last",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1600,
        "y": 1260,
        "wires": []
    },
    {
        "id": "8b67474.93ebfb8",
        "type": "inject",
        "z": "e045593e.092be8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1250,
        "y": 1200,
        "wires": [
            [
                "b1e942a1.dcfd1"
            ]
        ]
    },
    {
        "id": "b1e942a1.dcfd1",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Dev Refresh Data",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\");\nif (!selectedDevice)\n    return [ null, null ];\n\ndataLoggerStatus = global.get('dataLoggerStatus');\nif (!dataLoggerStatus || !dataLoggerStatus.monitor ||\n    !dataLoggerStatus.monitor.deviceList ||\n    !dataLoggerStatus.monitor.deviceList[selectedDevice.name])\n    return [ null, null ];\n\nglobalFuns = global.get(\"globalFuns\");\n\ndeviceStatus = dataLoggerStatus.monitor.deviceList[selectedDevice.name];\n\nmsg.payload = [];\nfor (var idx in deviceStatus.rawdata) {\n    msg.payload.push({\n            index   : idx,\n            rawdata : deviceStatus.rawdata[idx],\n            rawlast : deviceStatus.rawlast ? deviceStatus.rawlast[idx] : undefined\n        }\n    )\n}\n\nif (deviceStatus.status) {\n    \n    //We add errorInfo variable to show the error code when the device status is not OK\n    if (deviceStatus.status == \"OK\"){\n        errorInfo = \"<small>Last ERROR: \" +\n                    (deviceStatus.timestamp_error ? globalFuns.simple_date_time_string(deviceStatus.timestamp_error) : \"\") +\n                    \"</small><BR>\";\n    } else {\n        errorInfo = \"<small>ERROR Type: \" +\n                    (deviceStatus.error ? ((deviceStatus.error.split(\": \"))[1]) : \"\") +\n                    \"</small><BR>\";\n    }\n    \n    txt = \"<BR>\" +\n        \"Status: <B>\" + deviceStatus.status + \"</B><BR>\" +\n        \"<small>Last OK: \" +\n        (deviceStatus.timestamp_ok ? globalFuns.simple_date_time_string(deviceStatus.timestamp_ok) : \"\") +\n        \"</small><BR>\" + errorInfo; \n    msgStatus = { payload : txt };\n}\nelse\n    msgStatus = { payload : \"\" };\n\nreturn [ msgStatus, msg ];\n\n/*msgStatus.payload = \"Status: <B>OK</B><BR>\" +\n    \"Last OK:    <B>2020-10-01T11:22:33.444Z</B><BR>\" +\n    \"Last ERROR: <B>2020-10-01T11:22:33.444Z</B><BR>\";*/\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1220,
        "wires": [
            [
                "760250e8.74088"
            ],
            [
                "724ab066.58f02"
            ]
        ]
    },
    {
        "id": "2b0be1c4.3944fe",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 540,
        "wires": [
            [
                "1cc110b3.65a9df"
            ]
        ]
    },
    {
        "id": "be18c78a.dbf8e8",
        "type": "catch",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Read Error",
        "scope": [
            "aa8f7e84.86c91"
        ],
        "uncaught": false,
        "x": 1270,
        "y": 240,
        "wires": [
            [
                "6ae15975.2ecc98"
            ]
        ]
    },
    {
        "id": "1aff3ac0.b192b5",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: MODBUS Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 320,
        "wires": []
    },
    {
        "id": "a95604b9.0eeb18",
        "type": "inject",
        "z": "3022fd6.d249f02",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"connectorType\":\"SERIAL\",\"serialBaudrate\":\"115200\"}",
        "payloadType": "json",
        "x": 1550,
        "y": 500,
        "wires": [
            [
                "e231686.d5f3198",
                "4b9204bc.17ae5c"
            ]
        ]
    },
    {
        "id": "6ae15975.2ecc98",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: MODBUS Error",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus || !dataLoggerStatus.monitor || !dataLoggerStatus.monitor.deviceList)\n    return null;\n\ndataLoggerStatus.monitor.deviceList[msg.item.name].status = \"ERROR\";\ndataLoggerStatus.monitor.deviceList[msg.item.name].timestamp_error = new Date(msg.now);\ndataLoggerStatus.monitor.deviceList[msg.item.name].error = msg.error.message;\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 280,
        "wires": [
            [
                "1aff3ac0.b192b5"
            ]
        ]
    },
    {
        "id": "da2294e9.45b588",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "DL: Device Data Show (IN)",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 1295,
        "y": 1240,
        "wires": [
            [
                "b1e942a1.dcfd1"
            ]
        ]
    },
    {
        "id": "760250e8.74088",
        "type": "ui_template",
        "z": "e045593e.092be8",
        "group": "49b4254c.5474ec",
        "name": "DL Device Status",
        "order": 14,
        "width": 5,
        "height": "3",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1610,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d46f644.175b68",
        "type": "toFloat",
        "z": "3022fd6.d249f02",
        "name": "",
        "toFixed": "4",
        "x": 1210,
        "y": 400,
        "wires": [
            [
                "b6f74647.ebda18"
            ]
        ]
    },
    {
        "id": "de095ba6.dafff8",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "Firmware Upgrade Label",
        "order": 6,
        "width": 6,
        "height": 2,
        "format": "<div ng-bind-html=\"<BR><BR><H1>Firmware Upgrade</H1>\"></div>\n<div>\n    <BR><BR>\n    <H1>Firmware Upgrade</H1>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 310,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "8f6b7ab7.384c38",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Firmware Upgrade",
        "info": "",
        "x": 210,
        "y": 2220,
        "wires": []
    },
    {
        "id": "1ec7755a.a605fb",
        "type": "ui_text",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Uploaded Image Version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1130,
        "y": 2600,
        "wires": []
    },
    {
        "id": "6d72fa8a.52b954",
        "type": "link out",
        "z": "e045593e.092be8",
        "name": "DL: Dev Refresh (OUT)",
        "links": [
            "366d0cff.223644"
        ],
        "x": 395,
        "y": 960,
        "wires": []
    },
    {
        "id": "3573db38.019324",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "Upg Check File INIT (5s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "action",
                "v": "init",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 2600,
        "wires": [
            [
                "4430a9e5.c25fd8"
            ]
        ]
    },
    {
        "id": "4430a9e5.c25fd8",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Check File",
        "func": "/*When we upload a file to update the firmware the directory needed for instalation \nwill appear in /tmp/, any error of file not found from this node, simply means\nthat we haven´t submited the package for a new firmware version*/\n\nTMPDIR=\"/tmp/babelgate/upgrades/\";\nPACKAGES_DIR=TMPDIR + \"packages/\"\nCHECKSUM_KEY=\"TlNtRtLgN\";\n\ncp = global.get(\"child_process\");\nfs = global.get(\"fs\");\nglobalFuns = global.get(\"globalFuns\");\n\nmsgNotify = RED.util.cloneMessage(msg);\nmsgVersion = { payload : \"Unknown\" };\n\n// Search file\nfiles   = fs.readdirSync(PACKAGES_DIR);\nif (msg.name)\n    package_file = msg.name;\nelse\n    package_file = files.filter(e => e.startsWith(\"BabelGate\")).find(e => e.endsWith(\".package\"));\nif (!package_file) {\n    msgNotify.error   = \"File not found\";\n    msgNotify.payload = \"File not found\";\n    return [ null, msgNotify, msgVersion ];\n}\ntarfile = package_file.replace(/.package/g, \".tar.gz\");\n\n// Decrypt file\ncmd = \"/usr/local/bin/decrypt-installer-tarball.sh \" + \n    PACKAGES_DIR + package_file + \" \" +\n    CHECKSUM_KEY + \" \" +\n    TMPDIR + tarfile;\nglobalFuns.tlnt_log(3, \"MGMT:Upgrade\", cmd);\nerror = false;\ntry {\n    result = cp.execSync(cmd, { encoding : \"ascii\"} );\n    globalFuns.tlnt_log(3, \"MGMT:Upgrade\", result);\n}\ncatch(e) {\n    globalFuns.tlnt_log(1, \"MGMT:Upgrade\", \"ERROR: \" + e);\n    msgNotify.error   = \"ERROR decrypting file \" + package_file;\n    msgNotify.payload = \"ERROR decrypting file \" + package_file;\n    error = true;\n    return [ null, msgNotify, msgVersion ];\n}\nif (error)\n    return [ null, msgNotify, msgVersion ];\n\n// Uncompress\ncmd = \"tar -C \" + TMPDIR + \" -zxvf \" + TMPDIR + tarfile;\nerror = false;\ntry {\n    result = cp.execSync(cmd, { encoding : \"ascii\"} );\n    globalFuns.tlnt_log(3, \"MGMT:Upgrade\", result);\n}\ncatch(e) {\n    globalFuns.tlnt_log(1, \"MGMT:Upgrade\", \"ERROR: \" + e);\n    msgNotify.error   = \"ERROR uncompressing file \" + tarfile;\n    msgNotify.payload = \"ERROR uncompressing file \" + package_file;\n    error = true;\n    return [ null, msgNotify, msgVersion ];\n}\nif (error)\n    return [ null, msgNotify, msgVersion ];\n\n// Check MD5\ncmd = \"cd /tmp/babelgate/upgrades/; \" +\n    \"/tmp/babelgate/upgrades/BabelGate-DataLogger-installer.sh check_package \" + CHECKSUM_KEY;\nerror = false;\ntry {\n    result = cp.execSync(cmd, { encoding : \"ascii\"} );\n    globalFuns.tlnt_log(3, \"MGMT:Upgrade\", result);\n    if (!result.includes(\"Checksum OK\"))\n        error = true;\n}\ncatch(e) {\n    globalFuns.tlnt_log(1, \"MGMT:Upgrade\", \"ERROR: \" + e);\n    msgNotify.error   = \"ERROR checking MD5 \" + tarfile;\n    msgNotify.payload = \"Checksum ERROR \" + package_file;\n    error = true;\n    return [ null, msgNotify, msgVersion ];\n}\nif (error)\n    return [ null, msgNotify, msgVersion ];\n\nif (msg.action == \"init\")\n    msgNotify = null;\nelse {\n    msgNotify.error   = \"File \" + package_file + \" check OK\";\n    msgNotify.payload = msgNotify.error;\n}\n\nmsgVersion.payload = package_file.slice(31,-8);\n\nreturn [ msg, msgNotify, msgVersion ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2540,
        "wires": [
            [
                "436cf8c6.3a3558"
            ],
            [
                "bfe848de.7163e8",
                "8921e6c4.6b2c58"
            ],
            [
                "1ec7755a.a605fb"
            ]
        ]
    },
    {
        "id": "274119b8.780066",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1260,
        "y": 2520,
        "wires": []
    },
    {
        "id": "436cf8c6.3a3558",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: MGMT: Upload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "2bb41a75.c81066",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "",
        "order": 22,
        "width": 0,
        "height": 0,
        "format": "<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 9999; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n  \n  /* Modal Content/Box */\n.modal-content {\n    background-color: #fefefe;\n    margin: 15% auto; /* 15% from the top and centered */\n    padding: 20px;\n    border: 8px solid #0094ce;\n    width: 700px; /* Could be more or less, depending on screen size */\n  }\n\n/* The Close Button */\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"modalFirmwareUpgrade\" class=\"modal\">\n\n<!-- Modal content -->\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <span class=\"close\">&times;</span>\n        <h2>Upload Firmware Package</h2>\n        <p><br></p>\n    </div>\n    <div class=\"modal-body\">\n        <form action=\"/uploadFirmware\" method=\"POST\" enctype=\"multipart/form-data\">\n            <p><input type=\"file\" name=\"firmwareUpgradeFile\" /></p>\n            <p><input type=\"submit\" value=\"Submit\"></p>\n        </form>\n    </div>\n    <div class=\"modal-footer\">\n        <h3></h3>\n    </div>\n</div> \n</div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 420,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "84713ec3.6027f",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "",
        "order": 21,
        "width": 0,
        "height": 0,
        "format": "<script>\nreload_upload = true;\n//alert(\"IMPORT 000\");\n</script>\n\n<script>\n//alert(\"IMPORT 111\");\n(function(scope) {\n    //alert(\"IMPORT 222\");\n    if (typeof global_upload === 'undefined')\n        global_upload = \"kk\";\n    if (typeof reload_upload === 'undefined')\n        reload_upload = \"kk\";\n    //alert(\"IMPORT 333: global_upload: \" + String(global_upload) + \" reload_upload: \" + String(reload_upload));\n    current_socketid = 0;\n    global_upload = true;\n    scope.$watch('msg', function(msg) {\n        //alert(\"IMPORT 444: global_upload: \" + String(global_upload) + \" reload_upload: \" + String(reload_upload));\n        if ( (global_upload) || (reload_upload) ) {\n            global_upload = false;\n            reload_upload = false;\n        }\n        else if ( (msg) && (msg.topic) && (msg.topic == \"upload\") ) {\n            // Get the modal\n            var modal = document.getElementById(\"modalFirmwareUpgrade\");\n            //alert(\"333: modal:\" /*+ JSON.stringify(modal)*/);\n\n            // Get the <span> element that closes the modal\n            var span = document.getElementsByClassName(\"close\")[0];\n        \n            //alert(\"444: span:\" + JSON.stringify(span));\n            modal.style.display = \"block\";\n        \n            // When the user clicks on <span> (x), close the modal\n            span.onclick = function() {\n                //alert(\"span\");\n                modal.style.display = \"none\";\n            }\n            \n            // When the user clicks anywhere outside of the modal, close it\n            window.onclick = function(event) {\n                //alert (\"window\");\n                if (event.target == modal) {\n                    modal.style.display = \"none\";\n                }\n            }\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 460,
        "y": 2440,
        "wires": [
            [
                "1955c1ef.56a1ce"
            ]
        ]
    },
    {
        "id": "51edcfeb.bd1a4",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Upload File",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "attach_file",
        "payload": "",
        "payloadType": "str",
        "topic": "upload",
        "x": 270,
        "y": 2440,
        "wires": [
            [
                "84713ec3.6027f"
            ]
        ]
    },
    {
        "id": "1955c1ef.56a1ce",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2440,
        "wires": []
    },
    {
        "id": "fe269b56.121768",
        "type": "http response",
        "z": "31c39280.4de9fe",
        "name": "",
        "x": 1210,
        "y": 2560,
        "wires": []
    },
    {
        "id": "8c0ffb72.5ec168",
        "type": "http in",
        "z": "31c39280.4de9fe",
        "name": "",
        "url": "/uploadFirmware",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 240,
        "y": 2540,
        "wires": [
            [
                "ca1af89f.e80868"
            ]
        ]
    },
    {
        "id": "ca1af89f.e80868",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "DL: FW Image Store",
        "func": "PACKAGES_DIR=\"/tmp/babelgate/upgrades/packages/\";\ncp = global.get(\"child_process\");\nfs = global.get('fs');\n\ncp.execSync(\"mkdir -p \" + PACKAGES_DIR);\ncp.execSync(\"rm -f \" + PACKAGES_DIR + \"*\");\n\nmsg.action = \"upload\";\nmsg.name = msg.req.files[0].originalname;\nfs.writeFileSync(PACKAGES_DIR + msg.name, msg.req.files[0].buffer);\nmsg.value = 0;\n//msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 2540,
        "wires": [
            [
                "4430a9e5.c25fd8",
                "6427e50e.c3293c",
                "7da3decd.c2dd9",
                "50be9497.81efac"
            ]
        ]
    },
    {
        "id": "bfe848de.7163e8",
        "type": "template",
        "z": "31c39280.4de9fe",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\nwindow.history.go(-1);\n</script>\n<p></p>{{payload}}</p>\n",
        "output": "str",
        "x": 1070,
        "y": 2560,
        "wires": [
            [
                "fe269b56.121768"
            ]
        ]
    },
    {
        "id": "6427e50e.c3293c",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: DL: Upload FW2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2480,
        "wires": []
    },
    {
        "id": "8921e6c4.6b2c58",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1080,
        "y": 2520,
        "wires": [
            [
                "274119b8.780066"
            ]
        ]
    },
    {
        "id": "319648f1.88e868",
        "type": "function",
        "z": "6c4882be.3f8e7c",
        "name": "Console Exec Cmd",
        "func": "cp = global.get(\"child_process\");\n\ncmd = flow.get(\"command\");\nif (cmd)\n    result = cp.execSync(cmd, { encoding : \"ascii\"} );\n\nmsg.cmd = cmd;\nmsg.payload = result.replace(/\\n/g, '<BR>');\nmsg.result  = result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1660,
        "wires": [
            [
                "4ef2c14.2ac144",
                "58c3e7d7.7614e8"
            ]
        ]
    },
    {
        "id": "ba330cc7.bdf3f",
        "type": "inject",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1700,
        "wires": [
            [
                "319648f1.88e868"
            ]
        ]
    },
    {
        "id": "b74bfe7a.26b36",
        "type": "ui_button",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "group": "6585f725.eb4a18",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Run Command",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "play_arrow",
        "payload": "",
        "payloadType": "str",
        "topic": "run",
        "x": 200,
        "y": 1660,
        "wires": [
            [
                "319648f1.88e868"
            ]
        ]
    },
    {
        "id": "4ef2c14.2ac144",
        "type": "debug",
        "z": "6c4882be.3f8e7c",
        "name": "DBG: Console",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1700,
        "wires": []
    },
    {
        "id": "58c3e7d7.7614e8",
        "type": "ui_template",
        "z": "6c4882be.3f8e7c",
        "group": "6585f725.eb4a18",
        "name": "",
        "order": 3,
        "width": "18",
        "height": "15",
        "format": "<div ng-bind-html=\"msg.payload\" style=\"font-size:12px\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 720,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "3705830c.1991dc",
        "type": "ui_text_input",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "label": "Command",
        "tooltip": "",
        "group": "6585f725.eb4a18",
        "order": 2,
        "width": "15",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": "1000",
        "topic": "",
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "9ce794e3.b1d018"
            ]
        ]
    },
    {
        "id": "9ce794e3.b1d018",
        "type": "change",
        "z": "6c4882be.3f8e7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "7820d22f.f0573c",
        "type": "ui_toast",
        "z": "e045593e.092be8",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 660,
        "y": 1340,
        "wires": []
    },
    {
        "id": "691936a6.7c9d38",
        "type": "ui_toast",
        "z": "e045593e.092be8",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 640,
        "y": 2540,
        "wires": []
    },
    {
        "id": "f79aa8b7.98aa28",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "Build Export Config",
        "func": "//fs = global.get(\"fs\");\ndataLogger  = global.get(\"dataLogger\", \"config\") || {};\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\") || {};\neventConfig = global.get(\"eventConfig\", \"config\") || {};\n\nmsg.filename = \"/datalogger/conf/dataLogger.conf\";\nmsg.payload = {\n    action : \"override\",\n    data   : {\n        dataLogger  : dataLogger,\n        bbgtAgtCfg  : bbgtAgtCfg,\n        eventConfig : eventConfig,\n    }\n};\n\n//fs.writeFileSync(, dataLogger, \"ascii\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 860,
        "wires": [
            [
                "c2f1322a.5a55d",
                "f34da18c.58f58"
            ]
        ]
    },
    {
        "id": "c2f1322a.5a55d",
        "type": "file",
        "z": "31c39280.4de9fe",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 630,
        "y": 860,
        "wires": [
            [
                "cf38f84e.d64a48"
            ]
        ]
    },
    {
        "id": "f34da18c.58f58",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: MGMT: Export Config",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 820,
        "wires": []
    },
    {
        "id": "1b27ec56.1ba634",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: DL: Export (OUT)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 860,
        "wires": []
    },
    {
        "id": "cf38f84e.d64a48",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "DL: Export Config Temp",
        "order": 20,
        "width": 0,
        "height": 0,
        "format": "<script>\n//alert(\"EXPORT 000\");\n</script>\n\n<script>\nreload = true;\n//alert(\"EXPORT 111\");\n\n(function(scope) {\n    //alert(\"EXPORT 222\");\n    if (typeof global_msg === 'undefined')\n        global_msg = \"kk\";\n    if (typeof reload === 'undefined')\n        reload = \"kk\";\n    //alert(\"EXPORT 333: global_msg: \" + String(global_msg) + \" reload: \" + String(reload));\n    global_msg = true;\n    current_socketid = 0;\n    scope.$watch('msg', function(msg) {\n        current_socketid = msg.socketid;\n        //alert(\"EXPORT 444: global_msg: \" + String(global_msg) + \" reload: \" + String(reload));\n        if ( (global_msg) || (reload) ) {\n            global_msg = false;\n            reload     = false;\n        }\n        else if (current_socketid != msg.socketid) {\n            //alert(\"EXPORT 555: current_socketid: \" + String(current_socketid) + \" socketid: \" + String(msg.sockeetid));\n        }\n        else if ( (msg) && (msg.topic) && (msg.topic == \"export\") ) {\n            //alert(\"global_msg: \" + String(global_msg || \"kk\") + \" reload: \" + String(reload || \"kk\"));\n            //alert(JSON.stringify(msg));\n            //alert(\"ACCEPT: \" + String(this.socketid));\n            filename = msg.filename\n            url = window.location.origin + filename;\n            basename = filename.split(/[\\\\/]/).pop();\n            //alert(url);\n            \n            var element = document.createElement('a');\n            element.setAttribute('href', url);\n            element.setAttribute('download', basename);\n            element.style.display = 'none';\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 830,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e5b58e63.702af",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "Import Cfg Temp CSS",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n/* The Modal (background) */\n.modalConfig {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 9999; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n  \n  /* Modal Content/Box */\n.modalConfig-content {\n    background-color: #fefefe;\n    margin: 15% auto; /* 15% from the top and centered */\n    padding: 20px;\n    border: 8px solid #0094ce;\n    width: 700px; /* Could be more or less, depending on screen size */\n  }\n\n/* The Close Button */\n.closeImportConfig {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.closeImportConfig:hover,\n.closeImportConfig:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"modalImportConfig\" class=\"modalConfig\">\n\n<!-- Modal content -->\n<div class=\"modalConfig-content\">\n    <div class=\"modalConfig-header\">\n        <span class=\"closeImportConfig\">&times;</span>\n        <h2>Upload configuration file</h2>\n        <p></p>\n    </div>\n    <div class=\"modalConfig-body\">\n        <form action=\"/datalogger/uploadConf\" method=\"POST\" enctype=\"multipart/form-data\">\n            <p><input type=\"file\" name=\"myFile\" /></p>\n            <p><input type=\"submit\" value=\"Submit\"></p>\n        </form>\n    </div>\n    <div class=\"modalConfig-footer\">\n        <h3></h3>\n    </div>\n</div> \n</div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 680,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d065b7f6.014388",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "Import Cfg Temp Script",
        "order": 19,
        "width": 0,
        "height": 0,
        "format": "<script>\nreload_import = true;\n//alert(\"IMPORT 000\");\n</script>\n\n<script>\n//alert(\"IMPORT 111\");\n(function(scope) {\n    //alert(\"IMPORT 222\");\n    if (typeof global_import === 'undefined')\n        global_import = \"kk\";\n    if (typeof reload_import === 'undefined')\n        reload_import = \"kk\";\n    //alert(\"IMPORT 333: global_import: \" + String(global_import) + \" reload_import: \" + String(reload_import));\n    current_socketid = 0;\n    global_import = true;\n    scope.$watch('msg', function(msg) {\n        //alert(\"IMPORT 444: global_import: \" + String(global_import) + \" reload_import: \" + String(reload_import));\n        if ( (global_import) || (reload_import) ) {\n            global_import = false;\n            reload_import = false;\n        }\n        else if ( (msg) && (msg.topic) && (msg.topic == \"import\") ) {\n            // Get the modal\n            var modal = document.getElementById(\"modalImportConfig\");\n            //alert(\"333: modal:\" /*+ JSON.stringify(modal)*/);\n\n            // Get the <span> element that closes the modal\n            var span = document.getElementsByClassName(\"closeImportConfig\")[0];\n        \n            //alert(\"444: span:\" + JSON.stringify(span));\n            modal.style.display = \"block\";\n        \n            // When the user clicks on <span> (x), close the modal\n            span.onclick = function() {\n                //alert(\"span\");\n                modal.style.display = \"none\";\n            }\n            \n            // When the user clicks anywhere outside of the modal, close it\n            window.onclick = function(event) {\n                //alert (\"window\");\n                if (event.target == modal) {\n                    modal.style.display = \"none\";\n                }\n            }\n        }\n    });\n})(scope);\n</script>\n\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 680,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "77c576f5.eef218",
        "type": "debug",
        "z": "857c3f85.fb474",
        "name": "DBG: DL: Delete File Actions",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2000,
        "wires": []
    },
    {
        "id": "9bb93621.eb5728",
        "type": "ui_toast",
        "z": "857c3f85.fb474",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 920,
        "y": 2040,
        "wires": []
    },
    {
        "id": "862e8881.7dfcf8",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Firmware Upgrade",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "system_update_alt",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 250,
        "y": 2760,
        "wires": [
            [
                "3bc18d96.ee2ba2"
            ]
        ]
    },
    {
        "id": "3bc18d96.ee2ba2",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Firmware Upgrade",
        "func": "TMPDIR=\"/tmp/babelgate/upgrades/\";\nPROGRESS_FILE = \"/tmp/babelgate/upgrades/progress\"\nCHECKSUM_KEY=\"TlNtRtLgN\";\n\ncp = global.get(\"child_process\");\nglobalFuns = global.get(\"globalFuns\");\n\nmsgValue = { value : 0 };\n//msgValue = { payload : 0 };\nmsg.topic = \"Upgrading Firmware\";\nmsg.payload = \"This will take several Minutes\";\nnode.send([ msgValue, msg ]);\nnode.done();\n\ncmd = TMPDIR + \n    \"BabelGate-DataLogger-installer.sh\";\n    //+ \" full_upgrade \" + CHECKSUM_KEY;\nargs = [ \"full_upgrade\", CHECKSUM_KEY ];\n\ncmd_error = false; \ntry {\n    fs = global.get(\"fs\");\n    fs.writeFileSync(PROGRESS_FILE, \"0 Not started\", { encoding : \"ascii\" });\n    const watcher = fs.watch(PROGRESS_FILE, (eventType, filename) => {\n        //node.warn(`event type is: ${eventType}`);\n        if (filename) {\n            data = fs.readFileSync(PROGRESS_FILE, { encoding : \"ascii\" });\n            idx     = data.search(\" \");\n            percent = data.slice(0, idx);\n            text    = data.slice(idx + 1).trimRight();\n            msg.payload = `Progress ${percent}% (${text})`;\n            msgValue.value = percent;\n            //msgValue.payload = percent;\n            if (percent > 0)\n                node.send([ msgValue, msg ]);\n        } else {\n            node.warn('filename not provided');\n        }\n    });\n\n    //cmd = \"sleep 5\";\n    //const ex = cp.spawn('/tmp/prueba.sh', ['5']);\n    const ex = cp.spawn(cmd, args);\n    var result = \"\";\n\n    ex.stdout.on('data', (data) => { result += data; });\n    ex.stderr.on('data', (data) => { result += data; });\n    ex.on('error', (err) => {\n        //node.warn(\"error: \" + err);\n        globalFuns.tlnt_log(3, \"MGMG:Upgrade\", \"error: \" + err);\n        msg.payload = \"Firmware Upgrade Error\";\n        msg.result  = \"ERROR: \" + result + \" (code \" + err + \")\";\n        node.send([ null, msg ]);\n        node.done();\n        watcher.close();\n    });\n\n    ex.on('close', (code) => {\n        //node.warn(\"close: \" + code);\n        globalFuns.tlnt_log(3, \"MGMG:Upgrade\", \"close: \" + code)\n        if (code === 0) {\n            msg.payload = \"Firmware Upgrade OK\";\n            msg.result  = \"Return code: \" + code;\n            msgValue.value = 100;\n            //msgValue.payload = 100;\n        }\n        else {\n            msg.payload = \"Firmware Upgrade Error\";\n            msg.result  = \"ERROR: \" + result + \" (code \" + code + \")\";\n            msgValue.value = 0;\n            //msgValue.payload = 100;\n        }\n        //node.warn(\"EXEC Finish\");\n        node.send([ msgValue, msg ]);\n        node.done();\n        watcher.close();\n    });\n}\ncatch(e) {\n    cmd_error = true;\n    msg.result = \"ERROR: \" + e;\n}\n//node.warn(\"EXEC3\");\n\nif (!cmd_error) {\n    return null;\n}\n\nmsgValue.value = 0;\n//msgValue.payload = 0;\nmsg.payload = \"Firmware Upgrade ERROR\";\nglobalFuns.tlnt_log(1, \"MGMG:Upgrade\", msg.result);\n\nreturn [ msgValue, msg ];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 2760,
        "wires": [
            [
                "7da3decd.c2dd9",
                "50be9497.81efac"
            ],
            [
                "112725b3.d6d62a",
                "f395329d.013db"
            ]
        ]
    },
    {
        "id": "f395329d.013db",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: MGMT: Upgrade",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2800,
        "wires": []
    },
    {
        "id": "112725b3.d6d62a",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 780,
        "y": 2760,
        "wires": []
    },
    {
        "id": "30849c4.7157164",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "FW Upgrade Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 2800,
        "wires": [
            [
                "3bc18d96.ee2ba2"
            ]
        ]
    },
    {
        "id": "6e5e24f9.74250c",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Firmware Upgrade",
        "func": "TMPDIR=\"/tmp/babelgate/upgrades/\";\nCHECKSUM_KEY=\"TlNtRtLgN\";\n\ncp = global.get(\"child_process\");\nglobalFuns = global.get(\"globalFuns\");\n\nmsg.topic = \"Upgrading Firmware\";\nmsg.payload = \"This will take several Minutes\";\nnode.send(msg);\nnode.done();\nreturn null;\ncmd = TMPDIR + \n    \"BabelGate-DataLogger-installer.sh full_upgrade \" +\n    CHECKSUM_KEY;\n   \nerror = false; \ntry {\n    cmd = \"sleep 30\";\n    result = cp.execSync(cmd, { encoding : \"ascii\" });\n    msg.result = result;\n}\ncatch(e) {\n    error = true;\n    msg.result = \"ERROR: \" + e;\n}\n\nglobalFuns.tlnt_log(error ? 1 : 3, \"MGMG:Upgrade\", msg.result);\nif (error)\n    msg.payload = \"Firmware Upgrade ERROR\";\nelse\n    msg.payload = \"Firmware Upgrade OK\";\n\nnode.done();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "7da3decd.c2dd9",
        "type": "ui_gauge",
        "z": "31c39280.4de9fe",
        "name": "Progress Bar",
        "group": "8300553d.9b0318",
        "order": 14,
        "width": 2,
        "height": 2,
        "gtype": "wave",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 2720,
        "wires": []
    },
    {
        "id": "6f37a259.235c5c",
        "type": "ui_template",
        "z": "f6f1314a.c5c41",
        "group": "8e4a0e9d.80ab4",
        "name": "Web Footer",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d8cfc04b.0ab48",
        "type": "ui_template",
        "z": "31c39280.4de9fe",
        "group": "8300553d.9b0318",
        "name": "Web Footer",
        "order": 23,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a359e476.e59f28",
        "type": "ui_template",
        "z": "6d0c29a1.c03ff8",
        "group": "34dc605d.803f1",
        "name": "Web Footer",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2e8761e8.80910e",
        "type": "ui_template",
        "z": "e045593e.092be8",
        "group": "9b849102.5b534",
        "name": "Web Footer",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "82297cc6.b7b49",
        "type": "ui_template",
        "z": "87692da3.99da2",
        "group": "6fc924.b7d256dc",
        "name": "Web Footer",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "587b722c.68d98c",
        "type": "ui_template",
        "z": "857c3f85.fb474",
        "group": "a9b35bd0.ff0498",
        "name": "Web Footer",
        "order": 12,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c5fcc426.004548",
        "type": "ui_template",
        "z": "3022fd6.d249f02",
        "d": true,
        "group": "9a132943.aaa4f8",
        "name": "Web Footer",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "36a988d3.5aae58",
        "type": "ui_switch",
        "z": "f7a9df1f.01316",
        "name": "",
        "label": "Enable Router",
        "tooltip": "",
        "group": "da3bed84.75ded",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "routerEnable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 720,
        "y": 200,
        "wires": [
            [
                "e42db149.7cdea"
            ]
        ]
    },
    {
        "id": "40874601.918238",
        "type": "comment",
        "z": "f7a9df1f.01316",
        "name": "Router",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "c4f60765.ecef58",
        "type": "ui_switch",
        "z": "f7a9df1f.01316",
        "name": "",
        "label": "Enable NAT",
        "tooltip": "",
        "group": "da3bed84.75ded",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "natEnable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "e42db149.7cdea"
            ]
        ]
    },
    {
        "id": "471f3d7b.71fe84",
        "type": "ui_table",
        "z": "f7a9df1f.01316",
        "d": true,
        "group": "c341f4cd.2ceee8",
        "name": "Static Routes",
        "order": 1,
        "width": "6",
        "height": "6",
        "columns": [
            {
                "field": "destination",
                "title": "Destination",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "gateway",
                "title": "Gateway",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 390,
        "y": 720,
        "wires": []
    },
    {
        "id": "b01b75d7.74ee88",
        "type": "ui_table",
        "z": "f7a9df1f.01316",
        "group": "bb0661ca.79c59",
        "name": "Port Forwarding List",
        "order": 1,
        "width": "9",
        "height": "5",
        "columns": [
            {
                "field": "external_port",
                "title": "Ext Port",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "internal_ip",
                "title": "Int IP",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "internal_port",
                "title": "Int Port",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "protocol",
                "title": "Proto",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 440,
        "wires": [
            [
                "ffe2114c.b3e0b",
                "d453df1a.c6d6d"
            ]
        ]
    },
    {
        "id": "ab09d6b8.70c198",
        "type": "ui_form",
        "z": "f7a9df1f.01316",
        "d": true,
        "name": "",
        "label": "Static Routes",
        "group": "c341f4cd.2ceee8",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Destination",
                "value": "destination",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Gateway",
                "value": "gateway",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "destination": "",
            "gateway": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Delete",
        "topic": "",
        "x": 390,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "8c863fda.2a6cd",
        "type": "ui_dropdown",
        "z": "f7a9df1f.01316",
        "name": "",
        "label": "WAN Interface",
        "tooltip": "Internet or WAN interface",
        "place": "Select option",
        "group": "da3bed84.75ded",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "wan_interface",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "e42db149.7cdea"
            ]
        ]
    },
    {
        "id": "89880ea4.e7345",
        "type": "ui_form",
        "z": "f7a9df1f.01316",
        "name": "",
        "label": "Port Forwarding Rule",
        "group": "bb0661ca.79c59",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "External Port",
                "value": "external_port",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Internal Port",
                "value": "internal_port",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Internal IP",
                "value": "internal_ip",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Protocol",
                "value": "proto",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "external_port": "",
            "internal_port": "",
            "internal_ip": "",
            "proto": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "save",
        "x": 420,
        "y": 520,
        "wires": [
            [
                "9022d7e7.0013d8"
            ]
        ]
    },
    {
        "id": "8bb058f7.b5ab48",
        "type": "debug",
        "z": "f7a9df1f.01316",
        "name": "DBG: Router UI INIT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 100,
        "wires": []
    },
    {
        "id": "44338775.ba9338",
        "type": "ui_switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "HTTPS",
        "tooltip": "",
        "group": "d6c956cd.138468",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "https",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 680,
        "y": 1780,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "5e231539.25515c",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "8300553d.9b0318",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Factory Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "settings_backup_restore",
        "payload": "Commit Factory Reset?",
        "payloadType": "str",
        "topic": "",
        "x": 200,
        "y": 1020,
        "wires": [
            [
                "ebd5ec40.dd355"
            ]
        ]
    },
    {
        "id": "50be9497.81efac",
        "type": "ui_level",
        "z": "31c39280.4de9fe",
        "d": true,
        "group": "8300553d.9b0318",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "Progress Bar Level",
        "label": "Firmware Upgrade Progress",
        "colorHi": "#006eff",
        "colorWarn": "#1f80ff",
        "colorNormal": "#529dff",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "%",
        "layout": "sh",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "soft",
        "shape": "3",
        "colorschema": "valuedriven",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": true,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "peaktime": 3000,
        "x": 790,
        "y": 2680,
        "wires": []
    },
    {
        "id": "5c9eaf8e.c1aa2",
        "type": "ui_slider",
        "z": "31c39280.4de9fe",
        "d": true,
        "name": "",
        "label": "slider",
        "tooltip": "",
        "group": "8300553d.9b0318",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 530,
        "y": 2640,
        "wires": [
            [
                "50be9497.81efac",
                "7da3decd.c2dd9"
            ]
        ]
    },
    {
        "id": "16032cee.bea463",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "x": 530,
        "y": 2680,
        "wires": [
            [
                "50be9497.81efac"
            ]
        ]
    },
    {
        "id": "1750886c.f50a58",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "IP: Iface List Build",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "e42db149.7cdea",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router Save",
        "func": "bbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg.router)\n    bbgtAgtCfg.router = {};\nif (!bbgtAgtCfg.router.config)\n    bbgtAgtCfg.router.config = {};\n    \nbbgtAgtCfg.router.config[msg.topic] = msg.payload;\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 240,
        "wires": [
            [
                "315f1498.d761bc"
            ]
        ]
    },
    {
        "id": "315f1498.d761bc",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router UFW Apply",
        "func": "bbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg.router)\n    bbgtAgtCfg.router = {};\nif (!bbgtAgtCfg.router.config)\n    bbgtAgtCfg.router.config = {};\n    \nfs = global.get(\"fs\");\ncp = global.get(\"child_process\");\n\nwan_interface = bbgtAgtCfg.router.config.wan_interface || \"enp2s0\";\nrouter_cfg    = bbgtAgtCfg.router.config;\nport_fw       = bbgtAgtCfg.router.port_fw;\n\nSYSCTL_FILE=\"/etc/sysctl.d/20-bbgt-agent.conf\";\nTEMPLATE=\"/usr/local/lib/tlnt/node-red/ufw-before.rules.template\";\nBEFORE_RULES=\"/etc/ufw/before.rules\";\n\n/* Router config */\ndata =\n    \"# File autogenerated by Node-Red BabelGate Agent\\n\" +\n    \"net/ipv4/ip_forward=\" + (router_cfg.routerEnable ? 1 : 0) + \"\\n\";\nfs.writeFileSync(SYSCTL_FILE, data, \"ascii\");\ncp.execSync(\"sysctl --system\");\n//cp.execSync(\"sysctl -p \" + SYSCTL_FILE);\n//cmd = \"ufw \" + (router_cfg.routerEnable ? \"allow\" : \"deny\") + \" routed\";\n//cp.execSync(cmd);\n\n/* Default Before.rules */\ntry { template = fs.readFileSync(TEMPLATE, \"ascii\"); }\ncatch(e) { template = \"\"; }\nfs.writeFileSync(BEFORE_RULES, template, \"ascii\");\n\n/* PORT Forwarding */\nport_fw_list = port_fw.list || [];\nif (router_cfg.natEnable || (port_fw_list.length > 0)) {\n\n    before_rules_data = \"\\n\\n\" +\n            \"# Rules added by Node-Red BabelGate Agent\\n\" +\n            \"# NAT table rules\\n\" +\n            \"*nat\\n\";\n\n    if (router_cfg.natEnable)\n        before_rules_data += \":POSTROUTING ACCEPT [0:0]\\n\";\n\n    if (port_fw_list.length > 0)\n        before_rules_data += \":PREROUTING ACCEPT [0:0]\\n\";\n    \n    if (router_cfg.natEnable) {\n        before_rules_data +=\n            \"\\n# Forward traffic through WAN - Change to public network interface\\n\" +\n            \"-A POSTROUTING -o \" + wan_interface + \" -j MASQUERADE\\n\";\n        cmd = `ufw route allow out on ${wan_interface}`;\n        //node.warn(cmd);\n        //cp.execSync(cmd);\n    }\n    \n    if (port_fw_list.length > 0) {\n        before_rules_data +=\n            \"\\n# Forward traffic to LAN machines\\n\";\n        for (var idx in port_fw_list) {\n            rule = port_fw_list[idx];\n            before_rules_data +=\n                `-A PREROUTING -p ${rule.proto} -i ${wan_interface} --dport ${rule.external_port} -j DNAT --to-destination ${rule.internal_ip}:${rule.internal_port}\\n`;\n           // cmd = `ufw route allow in on ${wan_interface} to ${rule.internal_ip} port ${rule.internal_port} proto ${rule.proto}`\n            //node.warn(cmd);\n           // cp.execSync(cmd);\n        }\n    }\n    before_rules_data += \"\\n\\nCOMMIT\\n\";\n    before_rules_data += \"# End of Rules added by Node-Red BabelGate Agent\\n\";\n\n    fs.appendFileSync(BEFORE_RULES, before_rules_data, \"ascii\");\n    cp.execSync(\"ufw disable && ufw enable\");\n}\n\nmsg.topic = \"Firewall\";\nmsg.payload = \"Changes Applied\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 520,
        "wires": [
            [
                "fe7fcb12.81bda8"
            ]
        ]
    },
    {
        "id": "d0e70940.b65e68",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router: Build List",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtInfo)\n    return null;\n\n//node.warn(bbgtAgtCfg);\nif (!bbgtAgtCfg.router)\n    bbgtAgtCfg.router = {};\nif (!bbgtAgtCfg.router.config)\n    bbgtAgtCfg.router.config = {};\n\nvar ether_list = bbgtAgtInfo.etherList || { ETH1 : \"enp2s0\", ETH2 : \"enp3s0\" };\nvar wanIface = bbgtAgtCfg.router.config.wan_interface || \"enp2s0\";\n\nglobalFuns.tlnt_log(3, \"RouterMgmt\", `WAN Interface: ${wanIface}`);\n\nif (msg.name == \"Router\") {\n    var option_list = { options : [], payload : Object.values(ether_list)[0] };\n    option_list.options.push({ Modem : \"ppp0\" });\n    for (var ifname in ether_list) {\n        obj = {};\n        obj[ifname] = ether_list[ifname];\n        option_list.options.push(obj);\n    }\n}\nelse\n    option_list = null;\n\ntry { msgNat = { payload : bbgtAgtCfg.router.config.natEnabled } }\ncatch(e) { msgNat = { payload : false } }\ntry { msgRouter = { payload : bbgtAgtCfg.router.config.routerEnabled } }\ncatch(e) { msgRouter = { payload : false } }\n\n\nreturn [ msgRouter, msgNat, option_list ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "36a988d3.5aae58"
            ],
            [
                "c4f60765.ecef58"
            ],
            [
                "8c863fda.2a6cd"
            ]
        ]
    },
    {
        "id": "43a73971.815378",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router: Port FW List Build",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtInfo)\n    return null;\n\nif (!bbgtAgtCfg.router)\n    bbgtAgtCfg.router = {};\nif (!bbgtAgtCfg.router.port_fw)\n    bbgtAgtCfg.router.port_fw = { list : [] };\n\nmsg = {};\nmsg.payload = RED.util.cloneMessage(bbgtAgtCfg.router.port_fw.list);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 440,
        "wires": [
            [
                "b01b75d7.74ee88",
                "f3153460.4d67e8"
            ]
        ]
    },
    {
        "id": "ffe2114c.b3e0b",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router: Port FW Select",
        "func": "msg.payload.row = msg.row;\nflow.set(\"routerFwPortSelect\", msg.payload, \"memoryOnly\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 440,
        "wires": [
            [
                "89880ea4.e7345"
            ]
        ]
    },
    {
        "id": "d453df1a.c6d6d",
        "type": "debug",
        "z": "f7a9df1f.01316",
        "name": "DBG: RT: Port FW Select",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 400,
        "wires": []
    },
    {
        "id": "f3153460.4d67e8",
        "type": "debug",
        "z": "f7a9df1f.01316",
        "name": "DBG: RT: Port FW Build List",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 400,
        "wires": []
    },
    {
        "id": "9022d7e7.0013d8",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router: Port FW Save",
        "func": "globalFuns  = global.get(\"globalFuns\");\nbbgtAgtInfo = global.get(\"bbgtAgtInfo\", \"config\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtInfo)\n    return null;\n\nif (!bbgtAgtCfg.router)\n    bbgtAgtCfg.router = {};\nif (!bbgtAgtCfg.router.port_fw)\n    bbgtAgtCfg.router.port_fw = { list : [] };\nif (!bbgtAgtCfg.router.port_fw.list)\n    bbgtAgtCfg.router.port_fw.list = [];\n\nif (msg.topic == \"save\") {\n    bbgtAgtCfg.router.port_fw.list.push(msg.payload);\n}\nelse if (msg.topic == \"delete\") {\n    routerFwPortSelect = flow.get(\"routerFwPortSelect\", \"memoryOnly\");\n    if (routerFwPortSelect && (routerFwPortSelect.row != undefined))\n        bbgtAgtCfg.router.port_fw.list.splice(routerFwPortSelect.row, 1);\n}\n\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 520,
        "wires": [
            [
                "7c5c0509.8c51fc",
                "43a73971.815378",
                "315f1498.d761bc"
            ]
        ]
    },
    {
        "id": "7c5c0509.8c51fc",
        "type": "debug",
        "z": "f7a9df1f.01316",
        "name": "DBG: RT: Port FW Save",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 560,
        "wires": []
    },
    {
        "id": "c2eb55c1.7afce8",
        "type": "inject",
        "z": "f7a9df1f.01316",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "9c0be1ec.2ba55"
            ]
        ]
    },
    {
        "id": "be60db9f.030f78",
        "type": "ui_button",
        "z": "f7a9df1f.01316",
        "name": "",
        "group": "bb0661ca.79c59",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete Rule",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "delete",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "9022d7e7.0013d8"
            ]
        ]
    },
    {
        "id": "72ba00f3.dbb22",
        "type": "inject",
        "z": "f7a9df1f.01316",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1040,
        "y": 60,
        "wires": [
            [
                "fc36090a.874498"
            ]
        ]
    },
    {
        "id": "fc36090a.874498",
        "type": "function",
        "z": "f7a9df1f.01316",
        "name": "Router: DBG Reset Port FW",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nbbgtAgtCfg.router.port_fw = {};\nglobal.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9c0be1ec.2ba55",
        "type": "ui_ui_control",
        "z": "f7a9df1f.01316",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "d0e70940.b65e68",
                "8bb058f7.b5ab48",
                "43a73971.815378"
            ]
        ]
    },
    {
        "id": "fe7fcb12.81bda8",
        "type": "ui_toast",
        "z": "f7a9df1f.01316",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1320,
        "y": 560,
        "wires": []
    },
    {
        "id": "e95263b0.d6fe6",
        "type": "stoptimer",
        "z": "6d0c29a1.c03ff8",
        "duration": "3",
        "units": "Second",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 1220,
        "y": 1860,
        "wires": [
            [
                "afc3e67e.b3a208",
                "e4f200d1.99681"
            ],
            []
        ]
    },
    {
        "id": "afc3e67e.b3a208",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: DynDNS Apply",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e4f200d1.99681",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Apply",
        "func": "fs = global.get('fs');\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg)\n    return null;\n\ndyndns = bbgtAgtCfg.dyndns;\nif (!dyndns)\n    return null;\n\nif ( (dyndns.extra !== undefined) && (dyndns.extra !== \"\") )\n    extra_string = dyndns.extra + \"\\n\";\nelse\n    extra_string = \"\";\n    \nvar msg1 = {\n    payload:\n        \"# Autogenerated file by TLNT node-red\\n\" +\n        \"protocol=\" + dyndns.protocol + \"\\n\" +\n        \"server=\" + dyndns.server + \"\\n\" +\n        \"login=\" + dyndns.user + \"\\n\" +\n        \"password=\" + dyndns.password + \"\\n\" +\n        extra_string +\n        dyndns.dnsName + \"\\n\"\n};\n\nfs.writeFileSync(\"/etc/default/ddclient\", \"run_daemon=\" + dyndns.daemon + \"\\n\");\n\nif (msg.topic == \"daemon\") {\n    if (dyndns.daemon) {\n        cmd1 = \"systemctl enable ddclient.service\";\n        cmd2 = \"systemctl start ddclient.service\";\n    }\n    else {\n        cmd1 = \"systemctl stop ddclient.service\";\n        cmd2 = \"systemctl disable ddclient.service\";\n    }\n    msg2 = {\n        payload: cmd1 + \"; \" + cmd2\n    }\n    msg2.cmd = msg2.payload;\n}\nelse\n    msg2 = null;\n\nreturn [ msg1, msg2 ];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1980,
        "wires": [
            [
                "6f467679.4d4ef8"
            ],
            [
                "1864732c.dcdc1d"
            ]
        ]
    },
    {
        "id": "c8e09e74.5af6b",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "DynDNS Build Notification",
        "func": "msg.topic = \"DynDNS\";\ntxt = (msg.payload.code == 0) ? \"OK\" : \"ERROR\";\nmsg.payload = \"Changes applied: \" + txt;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 2080,
        "wires": [
            [
                "3f3a610d.b3b55e"
            ]
        ]
    },
    {
        "id": "4a94eff1.95292",
        "type": "ui_toast",
        "z": "e045593e.092be8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 2040,
        "wires": [
            [
                "9e11cd58.16af9"
            ]
        ]
    },
    {
        "id": "d6d45a5d.8a56a8",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Pulse Counter Reset",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 2080,
        "wires": []
    },
    {
        "id": "cabb187.d7680e8",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1190,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a84e62b4.6a0d8",
        "type": "link out",
        "z": "31c39280.4de9fe",
        "name": "MGMT: Web Action (OUT)",
        "links": [
            "69ebea24.492094"
        ],
        "x": 1115,
        "y": 1700,
        "wires": []
    },
    {
        "id": "5e51a0c3.f2bfe",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1460,
        "y": 1340,
        "wires": []
    },
    {
        "id": "fcdb28da.ff73c8",
        "type": "ui_dropdown",
        "z": "31c39280.4de9fe",
        "name": "Time Zone",
        "label": "Time Zone",
        "tooltip": "",
        "place": "",
        "group": "9ff99fde.f574e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "timezone",
        "x": 690,
        "y": 1200,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "b44ae5c7.f170a8",
        "type": "debug",
        "z": "e045593e.092be8",
        "name": "DBG: DL: Meas Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2500,
        "wires": []
    },
    {
        "id": "13096778.141259",
        "type": "ui_list",
        "z": "6c6899a7.084208",
        "group": "2e99a5e7.c4385a",
        "name": "Trigger List",
        "order": 2,
        "width": 4,
        "height": 8,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "4225d14a.8acad",
                "ad67a96.7cc6a58"
            ]
        ]
    },
    {
        "id": "d9d1ae1e.5a613",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Triggers Enable",
        "tooltip": "",
        "group": "2e99a5e7.c4385a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "global_enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "2d7fd6ac.22626a",
        "type": "inject",
        "z": "6c6899a7.084208",
        "name": "Triggers INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payloadkk",
                "v": "[{\"title\":\"Evento_1\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_2\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_3\",\"description\":\"Description Evento 1\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "984d9326.39ecd",
                "f0408be9.213168",
                "4225d14a.8acad"
            ]
        ]
    },
    {
        "id": "87724e7e.e6e45",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "a5c385b3.165f88",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "name",
        "x": 970,
        "y": 160,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "2cc7166b.6da1ca",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Description",
        "tooltip": "",
        "group": "a5c385b3.165f88",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "description",
        "x": 990,
        "y": 200,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "53c0599b.6ff198",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Trigger Type",
        "tooltip": "",
        "place": "Trigger Type",
        "group": "a5c385b3.165f88",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Device Event",
                "value": "device",
                "type": "str"
            },
            {
                "label": "Meas Event",
                "value": "meas",
                "type": "str"
            },
            {
                "label": "Timer",
                "value": "timer",
                "type": "str"
            },
            {
                "label": "Action",
                "value": "action",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "trigger_type",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "798af335.e32b6c",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Device",
        "tooltip": "",
        "place": "Device",
        "group": "a5c385b3.165f88",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "Device1",
                "value": "Device1",
                "type": "str"
            },
            {
                "label": "Device2",
                "value": "Device2",
                "type": "str"
            },
            {
                "label": "Device3",
                "value": "Device3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "deviceList",
        "x": 970,
        "y": 320,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "5c85d287.9dfc9c",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Meas",
        "tooltip": "",
        "place": "Meas",
        "group": "a5c385b3.165f88",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "Meas1",
                "value": "Meas1",
                "type": "str"
            },
            {
                "label": "Meas2",
                "value": "Meas2",
                "type": "str"
            },
            {
                "label": "Meas3",
                "value": "Meas3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "measList",
        "x": 970,
        "y": 360,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "d262e8f6.7aca58",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Action",
        "tooltip": "",
        "place": "Action",
        "group": "a5c385b3.165f88",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "Action1",
                "value": "action1",
                "type": "str"
            },
            {
                "label": "Action2",
                "value": "action2",
                "type": "str"
            },
            {
                "label": "Action3",
                "value": "action3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "actionList",
        "x": 970,
        "y": 400,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "984d9326.39ecd",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Trigger Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "b29f4355.ef28c",
        "type": "mqtt in",
        "z": "1da514ca.601cbb",
        "name": "",
        "topic": "device/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "a020d235.8da04"
            ]
        ]
    },
    {
        "id": "f75f5cad.23693",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event MQTT RX",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 80,
        "wires": []
    },
    {
        "id": "3146f0c0.fe3f1",
        "type": "mqtt out",
        "z": "3022fd6.d249f02",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb155faa.7a0cb",
        "x": 490,
        "y": 1120,
        "wires": []
    },
    {
        "id": "95a867bd.187338",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Publish Device Rawdata",
        "func": "msg.topic = `device/${msg.item.type}/${msg.item.name}/rawdata`;\ndata = JSON.stringify(msg.payload);\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1120,
        "wires": [
            [
                "3146f0c0.fe3f1"
            ]
        ]
    },
    {
        "id": "4b21dfe8.1cd4e",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "Trigger Enable",
        "label": "Enable",
        "tooltip": "",
        "group": "a5c385b3.165f88",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "4225d14a.8acad",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Trigger Select",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.triggersConfig)\n    return null;\n\nglobalEnable  = false;\nnameEnable    = undefined;\ndeviceOptions = undefined;\nmeasOptions   = undefined;\nactionOptions = undefined;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"refresh\") ) {\n    selectedTrigger = flow.get(\"selectedTrigger\", \"memoryOnly\");\n    refreshDropdownOptions = true;\n\n    if (selectedTrigger && (selectedTrigger.name !== undefined)) {\n        if (msg.topic == \"init\") nameEnable = false;\n        globalEnable = (msg.topic == \"init\") ? false : true;\n    }\n}\nelse if (msg.topic == \"add\") {\n    selectedTrigger = undefined;\n    globalEnable = true;\n    nameEnable   = true;\n    refreshDropdownOptions = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedTrigger = flow.get(\"selectedTrigger\", \"memoryOnly\");\n    if ( (!selectedTrigger) || (Object.keys(selectedTrigger).length === 0) )\n        return null;\n    globalEnable = true;\n    nameEnable   = false;\n    refreshDropdownOptions = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedTrigger = {};\n    globalEnable = false;\n    nameEnable   = false;\n    flow.set('selectedTrigger', selectedTrigger, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedTrigger = flow.get(\"selectedTrigger\", \"memoryOnly\");\n    globalEnable = false;\n    nameEnable   = false;\n}\nelse { /* Select */\n    //node.warn(\"Trigger Select: Unknown topic: \" + msg.topic);\n    //return null;\n    globalEnable = false;\n    nameEnable   = false;\n    selectedTrigger = msg.payload.item;\n    flow.set('selectedTrigger', selectedTrigger, \"memoryOnly\");\n}\n\nif (refreshDropdownOptions) {\n    dataLogger = global.get(\"dataLogger\", \"config\");\n    if (dataLogger && dataLogger.monitor && dataLogger.monitor.deviceList) {\n        deviceOptions = Object.keys(dataLogger.monitor.deviceList);\n        measOptions = [];\n        for (var devIdx in deviceOptions) {\n            devName = deviceOptions[devIdx];\n            for (var measName in dataLogger.monitor.deviceList[devName].measList) {\n                meas = dataLogger.monitor.deviceList[devName].measList[measName];\n                name = devName + \" / \" + measName;\n                measOptions.push(name);\n            }\n        }\n    }\n    actionOptions = Object.keys(eventConfig.actionsConfig.actionList);\n}\n\nif (!selectedTrigger) {\n    selectedTrigger = {\n        name         : \"\",\n        description  : \"\",\n        trigger_type : \"meas\",\n        enable       : false,\n        measList     : [],\n        deviceList   : [],\n        actionList   : [],\n        period       : 1\n    };\n    flow.set('selectedTrigger', selectedTrigger, \"memoryOnly\");\n}\n\ntriggersConfig = eventConfig.triggersConfig;\n\ndevEnable    = (selectedTrigger.trigger_type == \"device\") ? true : false;\nmeasEnable   = (selectedTrigger.trigger_type == \"meas\") ? true : false;\nactionEnable = (selectedTrigger.trigger_type == \"action\") ? true : false;\nperiodEnable = (selectedTrigger.trigger_type == \"timer\") ? true : false;\nrealNameEnable = (nameEnable === undefined) ? undefined : (globalEnable && nameEnable);\n\nmsgGlobalEnable = { payload : triggersConfig.enable };\nmsgName    = { payload : selectedTrigger.name || \"\", enabled : realNameEnable };\nmsgDesc    = { payload : selectedTrigger.description || \"\", enabled : globalEnable };\nmsgEnabled = { payload : selectedTrigger.enable, enabled : globalEnable };\nmsgTrType  = { payload : selectedTrigger.trigger_type, enabled : globalEnable };\nmsgDevice  = { options : deviceOptions, payload : selectedTrigger.deviceList, enabled : globalEnable && devEnable };\nmsgMeas    = { options : measOptions, payload : selectedTrigger.measList, enabled : globalEnable && measEnable };\nmsgAction  = { options : actionOptions, payload : selectedTrigger.actionList, enabled : globalEnable && actionEnable };\nmsgPeriod  = { payload : selectedTrigger.period, enabled : globalEnable && periodEnable };\n\nreturnArray = [ msgGlobalEnable, msgName, msgDesc, msgEnabled, msgTrType, msgDevice, msgMeas, msgAction, msgPeriod ];\n//node.warn(JSON.stringify(returnArray));\nreturn returnArray;\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "d9d1ae1e.5a613"
            ],
            [
                "87724e7e.e6e45"
            ],
            [
                "2cc7166b.6da1ca"
            ],
            [
                "4b21dfe8.1cd4e"
            ],
            [
                "53c0599b.6ff198"
            ],
            [
                "798af335.e32b6c"
            ],
            [
                "5c85d287.9dfc9c"
            ],
            [
                "d262e8f6.7aca58"
            ],
            [
                "625eda25.51be44"
            ]
        ]
    },
    {
        "id": "2067ab00.d0bc06",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Trigger SAVE",
        "group": "a5c385b3.165f88",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "772f6f83.96df3"
            ]
        ]
    },
    {
        "id": "33a1021d.c5463e",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Trigger DEL",
        "group": "a5c385b3.165f88",
        "order": 12,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "772f6f83.96df3"
            ]
        ]
    },
    {
        "id": "1fc2e018.e8bf4",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Trigger EDIT",
        "group": "a5c385b3.165f88",
        "order": 11,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "772f6f83.96df3"
            ]
        ]
    },
    {
        "id": "3081d63a.93c23a",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Trigger ADD",
        "group": "a5c385b3.165f88",
        "order": 13,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "772f6f83.96df3"
            ]
        ]
    },
    {
        "id": "77d51322.58eeec",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Trigger Change Field",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig)\n    return null;\n\nif (msg.topic == \"global_enable\") {\n    eventConfig.triggersConfig.enable = msg.payload;\n    global.set(\"eventConfig\", eventConfig, \"config\");\n    return null;\n    //return msg;\n}\n\nselectedTrigger = flow.get(\"selectedTrigger\", \"memoryOnly\") || {};\nold_value = selectedTrigger[msg.topic];\nselectedTrigger[msg.topic] = msg.payload;\nflow.set(\"selectedTrigger\", selectedTrigger, \"memoryOnly\");\n\nif ( (msg.topic == \"enable\") && (msg.payload == old_value) ) \n    return null;\n\nmsg.old_value = old_value;\nmsg.old_topic = msg.topic;\nmsg.topic = \"refresh\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "466b8d6d.75d504",
                "ad2f685e.55cac8"
            ]
        ]
    },
    {
        "id": "759feb1c.d09fb4",
        "type": "ui_ui_control",
        "z": "6c6899a7.084208",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "f0408be9.213168",
                "984d9326.39ecd"
            ]
        ]
    },
    {
        "id": "c7b2abed.59dde8",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Events Init",
        "func": "ResetEventFlag = global.get(\"ResetEventFlag\") || false;\nResetEventStatusFlag = global.get(\"ResetEventStatusFlag\") || false;\n\neventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || ResetEventFlag) {\n    eventConfig = {\n        triggersConfig : {\n            enable      : false,\n            triggerList : {}\n        },\n        actionsConfig : {\n            enable     : false,\n            actionList : {} \n        },\n        rulesConfig : {\n            enable    : false,\n            ruleList : {} \n        }\n    };\n    global.set(\"eventConfig\", eventConfig, \"config\");\n    global.set(\"ResetEventFlag\", false)\n}\n\neventStatus = global.get(\"eventStatus\");\nif (!eventStatus || ResetEventStatusFlag) {\n    eventStatus = {\n        triggers : {\n            triggerList : {}\n        },\n        actions : {\n            actionList : {} \n        },\n        rules : {\n            ruleList : {} \n        }\n    };\n    global.set(\"eventStatus\", eventStatus);\n    global.set(\"ResetEventStatusFlag\", false)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "76962ab7.68b014",
        "type": "inject",
        "z": "6c6899a7.084208",
        "name": "Events INIT (0s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "c7b2abed.59dde8"
            ]
        ]
    },
    {
        "id": "f0408be9.213168",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Trigger Build List",
        "func": "if ( (msg.topic == \"change\") && (msg.name == \"Event Rules\") )\n    msg.topic = \"refresh\";\n\nif ( (msg.topic != \"init\") && (msg.topic != \"refresh\") && (msg.topic != \"save\") && (msg.topic != \"del\") )\n    return null;\n\neventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.triggersConfig || !eventConfig.triggersConfig.triggerList)\n    return null;\n\ntriggerList = eventConfig.triggersConfig.triggerList;\n\nmsg.payload = [];\n\nfor (var triggerName in triggerList) {\n    trigger = triggerList[triggerName];\n    var obj = {\n        title       : trigger.name,\n        description : trigger.description,\n        item        : trigger\n    };\n    msg.payload.push(obj);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 260,
        "wires": [
            [
                "13096778.141259"
            ]
        ]
    },
    {
        "id": "772f6f83.96df3",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "DL: Trigger Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null, null ];\n}\n\nmsgNotify = { };\neventConfig  = global.get(\"eventConfig\", \"config\");\ntriggerList = eventConfig.triggersConfig.triggerList;\nselectedTrigger = flow.get('selectedTrigger', \"memoryOnly\") || {}\nif (!selectedTrigger)\n    return [ null, null, null ];\nglobalFuns = global.get(\"globalFuns\");\n\nfield_list = {\n    name        : { type : \"string\", name : \"Name\", regex : /^[a-zA-Z0-9_]{1,20}$/i },\n    description : { type : \"string\", name : \"Description\", regex : /^[a-zA-Z0-9 _\\-.:,;]{0,40}$/i },\n    period      : { type : \"number\", min : 1, max : 30 * 24 * 60 * 60, name : \"Timer Period\" }\n};\n\n\n/************************************\n * Validate SAVE TRIGGER\n ************************************/\nfunction validate_save_trigger_params()\n{\n    result = globalFuns.validate_fields(field_list, selectedTrigger);\n    if (result.status !== 0)\n        return result;\n\n    return result;\n}\n\nif (msg.topic == 'save') {\n    msgNotify.topic = \"Save Trigger\";\n    result = validate_save_trigger_params();\n    if (result.status !== 0) {\n        msgNotify.payload = result.error;\n        return [ null, null, msgNotify ];\n    }\n    \n    //node.warn(selectedTrigger);\n    //node.warn(selectedTrigger.name);\n    triggerListOld = RED.util.cloneMessage(triggerList);\n    msg.triggerListOld = triggerListOld;\n    triggerList[selectedTrigger.name] = RED.util.cloneMessage(selectedTrigger);\n\n    eventStatus = global.get(\"eventStatus\");\n    if (eventStatus && eventStatus.triggers && eventStatus.triggers.triggerList) {\n        eventStatus.triggers.triggerList[selectedTrigger.name] = { counter : 0 };\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedTrigger.name + \" saved OK\";\n}\nelse {\n    msgNotify.topic   = \"Delete Trigger\";\n    if (triggerList[selectedTrigger.name])\n        delete(triggerList[selectedTrigger.name]);\n\n    eventStatus = global.get(\"eventStatus\");\n    if ( eventStatus && eventStatus.triggers && eventStatus.triggers.triggerList &&\n        eventStatus.triggers.triggerList[selectedTrigger.name]) {\n        delete(eventStatus.triggers.triggerList[selectedTrigger.name]);\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedTrigger.name + \" deleted\";\n}\n\neventConfig.triggersConfig.triggerList = triggerList;\nglobal.set(\"eventConfig\", eventConfig, \"config\");\n\nmsgCtl = { topic : msg.topic };\n\nreturn [ msgCtl, msg, msgNotify ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "4225d14a.8acad"
            ],
            [
                "7b35df81.8f66c",
                "3b28c515.0630fa"
            ],
            [
                "296b768c.0f5e6a"
            ]
        ]
    },
    {
        "id": "7b35df81.8f66c",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Trigger Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 480,
        "wires": []
    },
    {
        "id": "296b768c.0f5e6a",
        "type": "ui_toast",
        "z": "6c6899a7.084208",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 640,
        "y": 560,
        "wires": []
    },
    {
        "id": "e3f79869.1a5af8",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Trigger Select (IN)",
        "links": [
            "ad2f685e.55cac8"
        ],
        "x": 555,
        "y": 200,
        "wires": [
            [
                "4225d14a.8acad"
            ]
        ]
    },
    {
        "id": "ad2f685e.55cac8",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Trigger Change (OUT)",
        "links": [
            "e3f79869.1a5af8"
        ],
        "x": 1415,
        "y": 260,
        "wires": []
    },
    {
        "id": "466b8d6d.75d504",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Trigger Change",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 200,
        "wires": []
    },
    {
        "id": "625eda25.51be44",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Timer Period",
        "tooltip": "Trigger period in seconds (1 - 2592000)",
        "group": "a5c385b3.165f88",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "period",
        "x": 990,
        "y": 440,
        "wires": [
            [
                "77d51322.58eeec"
            ]
        ]
    },
    {
        "id": "ad67a96.7cc6a58",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: Ev: Select Trigger",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "3b28c515.0630fa",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Trigger Action (OUT)",
        "links": [
            "e8f89e27.20fd5"
        ],
        "x": 575,
        "y": 520,
        "wires": []
    },
    {
        "id": "e8f89e27.20fd5",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Trigger Build List (IN)",
        "links": [
            "3b28c515.0630fa"
        ],
        "x": 155,
        "y": 280,
        "wires": [
            [
                "f0408be9.213168",
                "984d9326.39ecd"
            ]
        ]
    },
    {
        "id": "de0465c5.844138",
        "type": "comment",
        "z": "6c6899a7.084208",
        "name": "TRIGGERS",
        "info": "",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "ffb4a4a7.866a68",
        "type": "comment",
        "z": "6c6899a7.084208",
        "name": "ACTIONS",
        "info": "",
        "x": 100,
        "y": 780,
        "wires": []
    },
    {
        "id": "17be169c.d7ef29",
        "type": "inject",
        "z": "6c6899a7.084208",
        "name": "Actions INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payloadkk",
                "v": "[{\"title\":\"Evento_1\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_2\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_3\",\"description\":\"Description Evento 1\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 840,
        "wires": [
            [
                "74c9f841.a5ba88",
                "bb9b7c88.3a59b",
                "646739b3.bc6728"
            ]
        ]
    },
    {
        "id": "efdfec8a.3a4e3",
        "type": "ui_ui_control",
        "z": "6c6899a7.084208",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "bb9b7c88.3a59b",
                "74c9f841.a5ba88"
            ]
        ]
    },
    {
        "id": "bb9b7c88.3a59b",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Action Build List",
        "func": "if ( (msg.topic == \"change\") && (msg.name == \"Event Rules\") )\n    msg.topic = \"refresh\";\n\nif ( (msg.topic != \"init\") && (msg.topic != \"refresh\") && (msg.topic != \"save\") && (msg.topic != \"del\") )\n    return null;\n\neventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.actionsConfig || !eventConfig.actionsConfig.actionList)\n    return null;\n\nactionList = eventConfig.actionsConfig.actionList;\n\nmsg.payload = [];\n\nfor (var actionName in actionList) {\n    action = actionList[actionName];\n    var obj = {\n        title       : action.name,\n        description : action.description,\n        item        : action\n    };\n    msg.payload.push(obj);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 900,
        "wires": [
            [
                "c93ef80d.0ef7f8"
            ]
        ]
    },
    {
        "id": "74c9f841.a5ba88",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Action Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 820,
        "wires": []
    },
    {
        "id": "c93ef80d.0ef7f8",
        "type": "ui_list",
        "z": "6c6899a7.084208",
        "group": "b89ef403.f4a9c8",
        "name": "Action List",
        "order": 2,
        "width": 4,
        "height": 8,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "x": 510,
        "y": 900,
        "wires": [
            [
                "646739b3.bc6728"
            ]
        ]
    },
    {
        "id": "646739b3.bc6728",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Action Select",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.actionsConfig)\n    return null;\n\nglobalEnable = false;\nnameEnable   = undefined;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"refresh\") ) {\n    selectedAction = flow.get(\"selectedAction\", \"memoryOnly\");\n\n    if (selectedAction && (selectedAction.name !== undefined)) {\n        if (msg.topic == \"init\") nameEnable = false;\n        globalEnable = (msg.topic == \"init\") ? false : true;\n    }\n}\nelse if (msg.topic == \"add\") {\n    selectedAction = undefined;\n    globalEnable = true;\n    nameEnable   = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedAction = flow.get(\"selectedAction\", \"memoryOnly\");\n    if ( (!selectedAction) || (Object.keys(selectedAction).length === 0) )\n        return null;\n    globalEnable = true;\n    nameEnable   = false;\n}\nelse if (msg.topic == \"del\") {\n    selectedAction = {};\n    globalEnable = false;\n    nameEnable   = false;\n    flow.set('selectedAction', selectedAction, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedAction = flow.get(\"selectedAction\", \"memoryOnly\");\n    globalEnable = false;\n    nameEnable   = false;\n}\nelse { /* Select */\n    //node.warn(\"Action Select: Unknown topic: \" + msg.topic);\n    //return null;\n    globalEnable = false;\n    nameEnable   = false;\n    selectedAction = msg.payload.item;\n    flow.set('selectedAction', selectedAction, \"memoryOnly\");\n}\n\nif (!selectedAction) {\n    selectedAction = {\n        name        : \"\",\n        description : \"\",\n        action_type : \"email\",\n        enable      : false,\n        email       : \"\",\n        telephone   : \"\",\n        extra       : \"\",\n        digital_output : \"\",\n        modbus_unitid   : 1,\n        modbus_fc       : 3,\n        modbus_register : 0\n    };\n    flow.set('selectedAction', selectedAction, \"memoryOnly\");\n}\nactionsConfig = eventConfig.actionsConfig;\n\nemailEnable     = (selectedAction.action_type == \"email\") ? true : false;\ntelephoneEnable = (selectedAction.action_type == \"sms\") ? true : false;\ndigiOutEnable   = (selectedAction.action_type == \"digital-out\") ? true : false;\nmodbusEnable    = (selectedAction.action_type == \"modbus-rtu\") ? true : false;\nextraEnable     = true;\nrealNameEnable  = (nameEnable === undefined) ? undefined : (globalEnable && nameEnable);\n\nmsgGlobalEnable = { payload : actionsConfig.enable };\nmsgName     = { payload : selectedAction.name, enabled : realNameEnable };\nmsgDesc     = { payload : selectedAction.description, enabled : globalEnable };\nmsgEnabled  = { payload : selectedAction.enable, enabled : globalEnable };\nmsgAcType   = { payload : selectedAction.action_type, enabled : globalEnable };\nmsgEmail    = { payload : selectedAction.email, enabled : globalEnable && emailEnable };\nmsgPhone    = { payload : selectedAction.telephone, enabled : globalEnable && telephoneEnable };\nmsgDigiOut  = { payload : selectedAction.digital_output, enabled : globalEnable && digiOutEnable };\nmsgModbusID = { payload : selectedAction.modbus_unitid, enabled : globalEnable && modbusEnable };\nmsgModbusFC = { payload : selectedAction.modbus_fc, enabled : globalEnable && modbusEnable };\nmsgModbusAd = { payload : selectedAction.modbus_register, enabled : globalEnable && modbusEnable };\nmsgExtra    = { payload : selectedAction.extra, enabled : globalEnable && extraEnable };\n\nreturnArray = [ msgGlobalEnable, msgName, msgDesc, msgEnabled, msgAcType,\n            msgEmail, msgPhone, msgDigiOut, \n            msgModbusID, msgModbusFC, msgModbusAd,\n            msgExtra ];\n//node.warn(JSON.stringify(returnArray));\nreturn returnArray;\n",
        "outputs": 12,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 900,
        "wires": [
            [
                "a367a328.93b3b"
            ],
            [
                "515be896.6b7138"
            ],
            [
                "4354188f.d929f8"
            ],
            [
                "f4445d49.25fc8"
            ],
            [
                "99d033bf.b166e"
            ],
            [
                "17934a95.634d35"
            ],
            [
                "5bbf6ad1.e42da4"
            ],
            [
                "99868c80.69b3d"
            ],
            [
                "f4cb9fb.4ae326"
            ],
            [
                "c733155e.2343f8"
            ],
            [
                "3b1fd086.69237"
            ],
            [
                "43530405.f739dc"
            ]
        ]
    },
    {
        "id": "515be896.6b7138",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "2765e667.3f5d5a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "name",
        "x": 970,
        "y": 740,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "4354188f.d929f8",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Description",
        "tooltip": "",
        "group": "2765e667.3f5d5a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "description",
        "x": 990,
        "y": 780,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "f4445d49.25fc8",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "Action Enable",
        "label": "Enable",
        "tooltip": "",
        "group": "2765e667.3f5d5a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1000,
        "y": 820,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "99d033bf.b166e",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Action Type",
        "tooltip": "",
        "place": "Action Type",
        "group": "2765e667.3f5d5a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Digital Output",
                "value": "digital-out",
                "type": "str"
            },
            {
                "label": "MODBUS RTU",
                "value": "modbus-rtu",
                "type": "str"
            },
            {
                "label": "e-Mail",
                "value": "email",
                "type": "str"
            },
            {
                "label": "SMS",
                "value": "sms",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "action_type",
        "x": 990,
        "y": 860,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "43530405.f739dc",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Extra Data",
        "tooltip": "E-Mail:Mail subject / SMS: Empty / ...",
        "group": "2765e667.3f5d5a",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "extra",
        "x": 990,
        "y": 1140,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "9631fe8e.8d484",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Action SAVE",
        "group": "2765e667.3f5d5a",
        "order": 13,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 110,
        "y": 1160,
        "wires": [
            [
                "a9e0f915.b29ed8"
            ]
        ]
    },
    {
        "id": "c5faf4d2.d25e78",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Action DEL",
        "group": "2765e667.3f5d5a",
        "order": 15,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 120,
        "y": 1200,
        "wires": [
            [
                "a9e0f915.b29ed8"
            ]
        ]
    },
    {
        "id": "1ed7ce9b.1b0251",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Action EDIT",
        "group": "2765e667.3f5d5a",
        "order": 14,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "a9e0f915.b29ed8"
            ]
        ]
    },
    {
        "id": "3d9919ce.2b0306",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Action ADD",
        "group": "2765e667.3f5d5a",
        "order": 16,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "a9e0f915.b29ed8"
            ]
        ]
    },
    {
        "id": "a9e0f915.b29ed8",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "DL: Actions Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null, null ];\n}\n\nmsgNotify = { };\neventConfig  = global.get(\"eventConfig\", \"config\");\nactionList = eventConfig.actionsConfig.actionList;\nselectedAction = flow.get('selectedAction', \"memoryOnly\") || {}\nif (!selectedAction)\n    return [ null, null, null ];\nglobalFuns = global.get(\"globalFuns\");\n\nfield_list = {\n    name        : { type : \"string\", name : \"Name\", regex : /^[a-zA-Z0-9_]{1,20}$/i },\n    description : { type : \"string\", name : \"Description\", regex : /^[a-zA-Z0-9 _\\-.:,;]{0,40}$/i },\n};\n\nfield_list_io = {\n    digital_output : { type : \"ioname\", name : \"Digital Output\" },\n};\n\nfield_list_email = {\n    email : { type : \"string\", name : \"E-Mail\" },\n};\n\nfield_list_sms = {\n    telephone : { type : \"string\", name : \"Telephone\", regex : /^[0-9\\+]{9,20}$/i },\n};\n\nfield_list_modbus = {\n    modbus_unitid   : { type : \"number\", min : 1, max : 255, name : \"Unit ID\" },\n    modbus_fc       : { type : \"number\", min : 1, max : 4, name : \"FC\" },\n    modbus_register : { type : \"number\", min : 0, max : 49999, name : \"Address\" }\n};\n\n\n/************************************\n * Validate SAVE ACTION\n ************************************/\nfunction validate_save_action_params()\n{\n    result = globalFuns.validate_fields(field_list, selectedAction);\n    if (result.status !== 0)\n        return result;\n\n    if (selectedAction.action_type == \"email\") {\n        result = globalFuns.validate_fields(field_list_email, selectedAction);\n        if (result.status !== 0)\n            return result;\n    }\n\n    if (selectedAction.action_type == \"sms\") {\n        result = globalFuns.validate_fields(field_list_sms, selectedAction);\n        if (result.status !== 0)\n            return result;\n    }\n\n    if (selectedAction.action_type == \"digital-out\") {\n        result = globalFuns.validate_fields(field_list_io, selectedAction);\n        if (result.status !== 0)\n            return result;\n    }\n    \n    if (selectedAction.action_type == \"modbus-rtu\") {\n        result = globalFuns.validate_fields(field_list_modbus, selectedAction);\n        if (result.status !== 0)\n            return result;\n    }\n    \n    return result;\n}\n\nif (msg.topic == 'save') {\n    msgNotify.topic = \"Save Action\";\n    result = validate_save_action_params();\n    if (result.status !== 0) {\n        msgNotify.payload = result.error;\n        return [ null, null, msgNotify ];\n    }\n    \n    //node.warn(selectedAction);\n    //node.warn(selectedAction.name);\n    actionListOld = RED.util.cloneMessage(actionList);\n    msg.actionListOld = actionListOld;\n    actionList[selectedAction.name] = RED.util.cloneMessage(selectedAction);\n\n    eventStatus = global.get(\"eventStatus\");\n    if (eventStatus && eventStatus.actions && eventStatus.actions.actionList) {\n        eventStatus.actions.actionList[selectedAction.name] = { counter : 0 };\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedAction.name + \" saved OK\";\n}\nelse {\n    msgNotify.topic   = \"Delete Action\";\n    if (actionList[selectedAction.name])\n        delete(actionList[selectedAction.name]);\n\n    eventStatus = global.get(\"eventStatus\");\n    if ( eventStatus && eventStatus.actions && eventStatus.actions.actionList &&\n        eventStatus.actions.actionList[selectedAction.name]) {\n        delete(eventStatus.actions.actionList[selectedAction.name]);\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedAction.name + \" deleted\";\n}\n\neventConfig.actionsConfig.actionList = actionList;\nglobal.set(\"eventConfig\", eventConfig, \"config\");\n\nmsgCtl = { topic : msg.topic };\n\nreturn [ msgCtl, msg, msgNotify ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1140,
        "wires": [
            [
                "646739b3.bc6728"
            ],
            [
                "4e3877b5.358278",
                "d7277e4f.28c71"
            ],
            [
                "be6086b3.b29748"
            ]
        ]
    },
    {
        "id": "4e3877b5.358278",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Actions Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1120,
        "wires": []
    },
    {
        "id": "be6086b3.b29748",
        "type": "ui_toast",
        "z": "6c6899a7.084208",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 640,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d7277e4f.28c71",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Actions Action (OUT)",
        "links": [
            "62426e56.2740b"
        ],
        "x": 575,
        "y": 1160,
        "wires": []
    },
    {
        "id": "62426e56.2740b",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Actions Build List (IN)",
        "links": [
            "d7277e4f.28c71"
        ],
        "x": 135,
        "y": 940,
        "wires": [
            [
                "bb9b7c88.3a59b",
                "74c9f841.a5ba88"
            ]
        ]
    },
    {
        "id": "3038be55.8200e2",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Action Change Field",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig)\n    return null;\n\nif (msg.topic == \"global_enable\") {\n    eventConfig.actionsConfig.enable = msg.payload;\n    global.set(\"eventConfig\", eventConfig, \"config\");\n    return null;\n    //return msg;\n}\n\nselectedAction = flow.get(\"selectedAction\", \"memoryOnly\") || {};\nold_value = selectedAction[msg.topic];\nselectedAction[msg.topic] = msg.payload;\nflow.set(\"selectedAction\", selectedAction, \"memoryOnly\");\n\nif ( (msg.topic == \"enable\") && (msg.payload == old_value) ) \n    return null;\n\nmsg.old_value = old_value;\nmsg.old_topic = msg.topic;\nmsg.topic = \"refresh\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 900,
        "wires": [
            [
                "723f5f26.42417",
                "8543c046.4251f"
            ]
        ]
    },
    {
        "id": "a367a328.93b3b",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Actions Enable",
        "tooltip": "",
        "group": "b89ef403.f4a9c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "global_enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1000,
        "y": 700,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "17934a95.634d35",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "E-Mail",
        "tooltip": "Destination E-Mail",
        "group": "2765e667.3f5d5a",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "email",
        "delay": "1000",
        "topic": "email",
        "x": 970,
        "y": 900,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "5bbf6ad1.e42da4",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Telephone",
        "tooltip": "Destination Telephone Number",
        "group": "2765e667.3f5d5a",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "tel",
        "delay": "1000",
        "topic": "telephone",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "8543c046.4251f",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Action Change (OUT)",
        "links": [
            "88e6802d.89dbf"
        ],
        "x": 1415,
        "y": 900,
        "wires": []
    },
    {
        "id": "88e6802d.89dbf",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Action Select (IN)",
        "links": [
            "8543c046.4251f"
        ],
        "x": 555,
        "y": 840,
        "wires": [
            [
                "646739b3.bc6728"
            ]
        ]
    },
    {
        "id": "723f5f26.42417",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Action Change",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 840,
        "wires": []
    },
    {
        "id": "8f234a33.62b4e8",
        "type": "comment",
        "z": "6c6899a7.084208",
        "name": "RULES",
        "info": "",
        "x": 90,
        "y": 1340,
        "wires": []
    },
    {
        "id": "32c5b21e.230d8e",
        "type": "inject",
        "z": "6c6899a7.084208",
        "name": "Rules INIT (2s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payloadkk",
                "v": "[{\"title\":\"Evento_1\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_2\",\"description\":\"Description Evento 1\"},{\"title\":\"Evento_3\",\"description\":\"Description Evento 1\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "str",
        "x": 100,
        "y": 1400,
        "wires": [
            [
                "22153b9d.720cc4",
                "cf6abdbd.66621",
                "aa8e59f5.289018"
            ]
        ]
    },
    {
        "id": "2335e13e.8359ee",
        "type": "ui_ui_control",
        "z": "6c6899a7.084208",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 1460,
        "wires": [
            [
                "cf6abdbd.66621",
                "22153b9d.720cc4"
            ]
        ]
    },
    {
        "id": "cf6abdbd.66621",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Rules Build List",
        "func": "if ( (msg.topic == \"change\") && (msg.name == \"Event Rules\") )\n    msg.topic = \"refresh\";\n\nif ( (msg.topic != \"init\") && (msg.topic != \"refresh\") && (msg.topic != \"save\") && (msg.topic != \"del\") )\n    return null;\n\neventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.rulesConfig || !eventConfig.rulesConfig.ruleList)\n    return null;\n\nruleList = eventConfig.rulesConfig.ruleList;\n\nmsg.payload = [];\n\nfor (var ruleName in ruleList) {\n    rule = ruleList[ruleName];\n    var obj = {\n        title       : rule.name,\n        description : rule.description,\n        item        : rule\n    };\n    msg.payload.push(obj);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 1460,
        "wires": [
            [
                "72f2c53f.a7788c"
            ]
        ]
    },
    {
        "id": "22153b9d.720cc4",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Rules Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1380,
        "wires": []
    },
    {
        "id": "72f2c53f.a7788c",
        "type": "ui_list",
        "z": "6c6899a7.084208",
        "group": "98ccc12f.ef924",
        "name": "Rules List",
        "order": 2,
        "width": 4,
        "height": 9,
        "lineType": "two",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "aa8e59f5.289018"
            ]
        ]
    },
    {
        "id": "aa8e59f5.289018",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Rule Select",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.rulesConfig)\n    return null;\n\nglobalEnable = false;\nnameEnable   = undefined;\ntriggerOptions = undefined;\n\nif ( (msg.topic == \"init\") || (msg.topic == \"refresh\") ) {\n    selectedRule = flow.get(\"selectedRule\", \"memoryOnly\");\n\n    if (selectedRule && (selectedRule.name !== undefined)) {\n        if (msg.topic == \"init\") nameEnable = false;\n        globalEnable = (msg.topic == \"init\") ? false : true;\n    }\n    \n    refreshDropdownOptions = true;\n}\nelse if (msg.topic == \"add\") {\n    selectedRule = undefined;\n    globalEnable = true;\n    nameEnable   = true;\n    refreshDropdownOptions = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedRule = flow.get(\"selectedRule\", \"memoryOnly\");\n    if ( (!selectedRule) || (Object.keys(selectedRule).length === 0) )\n        return null;\n    globalEnable = true;\n    nameEnable   = false;\n    refreshDropdownOptions = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedRule = {};\n    globalEnable = false;\n    nameEnable   = false;\n    flow.set('selectedRule', selectedRule, \"memoryOnly\");\n}\nelse if (msg.topic == \"save\") {\n    selectedRule = flow.get(\"selectedRule\", \"memoryOnly\");\n    globalEnable = false;\n    nameEnable   = false;\n}\nelse { /* Select */\n    //node.warn(\"Rule Select: Unknown topic: \" + msg.topic);\n    //return null;\n    globalEnable = false;\n    nameEnable   = false;\n    selectedRule = msg.payload.item;\n    flow.set('selectedRule', selectedRule, \"memoryOnly\");\n}\n\nif (refreshDropdownOptions) {\n    triggerOptions = Object.keys(eventConfig.triggersConfig.triggerList);\n    actionOptions  = Object.keys(eventConfig.actionsConfig.actionList);\n}\n\nif (!selectedRule) {\n    selectedRule = {\n        name         : \"\",\n        description  : \"\",\n        triggerList  : [],\n        rule_type    : \"simple\",\n        enable       : false,\n        variable     : \"\",\n        min          : \"\",\n        max          : \"\",\n        actionList   : [],\n        action_value : 0,\n        advanced     : { command : \"\" }\n    };\n    flow.set('selectedRule', selectedRule, \"memoryOnly\");\n}\nrulesConfig = eventConfig.rulesConfig;\n\nadvancedEnable = (selectedRule.rule_type == \"advanced\") ? true : false;\nsimpleEnable   = !advancedEnable;\nrealNameEnable  = (nameEnable === undefined) ? undefined : (globalEnable && nameEnable);\n\nmsgGlobalEnable = { payload : rulesConfig.enable };\nmsgName      = { payload : selectedRule.name, enabled : realNameEnable };\nmsgDesc      = { payload : selectedRule.description, enabled : globalEnable };\nmsgEnabled   = { payload : selectedRule.enable, enabled : globalEnable };\nmsgTrigger   = { options : triggerOptions, payload : selectedRule.triggerList, enabled : globalEnable };\nmsgRuType    = { payload : selectedRule.rule_type, enabled : globalEnable };\nmsgVariable  = { payload : selectedRule.variable, enabled : globalEnable && simpleEnable };\nmsgMin       = { payload : selectedRule.min, enabled : globalEnable && simpleEnable };\nmsgMax       = { payload : selectedRule.max, enabled : globalEnable && simpleEnable };\nmsgAction    = { options : actionOptions, payload : selectedRule.actionList, enabled : globalEnable && simpleEnable };\nmsgActionVal = { payload : selectedRule.action_value, enabled : globalEnable && simpleEnable };\nmsgAdvanced  = { payload : selectedRule.advanced, enabled : globalEnable && advancedEnable };\n\nreturnArray = [ msgGlobalEnable, msgName, msgDesc, msgEnabled, msgTrigger, msgRuType, msgVariable, msgMin, msgMax, msgAction, msgActionVal, msgAdvanced ];\n//node.warn(JSON.stringify(returnArray));\nreturn returnArray;\n",
        "outputs": 12,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 1440,
        "wires": [
            [
                "23cab507.b97dca"
            ],
            [
                "820f36b5.657d98"
            ],
            [
                "7b6c5ca8.5ee2a4"
            ],
            [
                "168bd3e0.bafeec"
            ],
            [
                "74a4c30b.7a487c"
            ],
            [
                "4ef9c291.8b8aac"
            ],
            [
                "b34fee9d.2ee34"
            ],
            [
                "86af1f84.b4bcc"
            ],
            [
                "2b70af1d.cfea3"
            ],
            [
                "bc296088.f90c3"
            ],
            [
                "6c58fc71.0072a4"
            ],
            [
                "7cd809d9.6a4cd8"
            ]
        ]
    },
    {
        "id": "820f36b5.657d98",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "d2eefada.da15a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "name",
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "7b6c5ca8.5ee2a4",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Description",
        "tooltip": "",
        "group": "d2eefada.da15a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "description",
        "x": 1010,
        "y": 1400,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "168bd3e0.bafeec",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "Rule Enable",
        "label": "Enable",
        "tooltip": "",
        "group": "d2eefada.da15a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1010,
        "y": 1440,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "a9db648f.43b9b8",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Rule SAVE",
        "group": "d2eefada.da15a8",
        "order": 13,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 120,
        "y": 1740,
        "wires": [
            [
                "efdfd326.0b30a"
            ]
        ]
    },
    {
        "id": "9155b5fb.86a3c8",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Rule DEL",
        "group": "d2eefada.da15a8",
        "order": 15,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "del",
        "x": 120,
        "y": 1780,
        "wires": [
            [
                "efdfd326.0b30a"
            ]
        ]
    },
    {
        "id": "1fcc884f.64be28",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Rule EDIT",
        "group": "d2eefada.da15a8",
        "order": 14,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "edit",
        "payload": "",
        "payloadType": "str",
        "topic": "edit",
        "x": 120,
        "y": 1700,
        "wires": [
            [
                "efdfd326.0b30a"
            ]
        ]
    },
    {
        "id": "62eeedd9.8c3f54",
        "type": "ui_button",
        "z": "6c6899a7.084208",
        "name": "EV: Rule ADD",
        "group": "d2eefada.da15a8",
        "order": 16,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "add",
        "payload": "",
        "payloadType": "str",
        "topic": "add",
        "x": 120,
        "y": 1660,
        "wires": [
            [
                "efdfd326.0b30a"
            ]
        ]
    },
    {
        "id": "efdfd326.0b30a",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "DL: Rules Action",
        "func": "if ( (msg.topic == \"add\") || (msg.topic == \"edit\") ) {\n    return [ msg, null, null ];\n}\n\nmsgNotify = { };\neventConfig  = global.get(\"eventConfig\", \"config\");\nruleList = eventConfig.rulesConfig.ruleList;\nselectedRule = flow.get('selectedRule', \"memoryOnly\") || {}\nif (!selectedRule)\n    return [ null, null, null ];\nglobalFuns = global.get(\"globalFuns\");\n\nfield_list = {\n    name        : { type : \"string\", name : \"Name\", regex : /^[a-zA-Z0-9_]{1,20}$/i },\n    description : { type : \"string\", name : \"Description\", regex : /^[a-zA-Z0-9 _\\-.:,;]{0,40}$/i }\n};\n\n\n/************************************\n * Validate SAVE RULE\n ************************************/\nfunction validate_save_rule_params()\n{\n    result = globalFuns.validate_fields(field_list, selectedRule);\n    if (result.status !== 0)\n        return result;\n\n    return result;\n}\n\nif (msg.topic == 'save') {\n    msgNotify.topic = \"Save Rule\";\n    result = validate_save_rule_params();\n    if (result.status !== 0) {\n        msgNotify.payload = result.error;\n        return [ null, null, msgNotify ];\n    }\n    \n    //node.warn(selectedRule);\n    //node.warn(selectedRule.name);\n    ruleListOld = RED.util.cloneMessage(ruleList);\n    msg.ruleListOld = ruleListOld;\n    ruleList[selectedRule.name] = RED.util.cloneMessage(selectedRule);\n\n    eventStatus = global.get(\"eventStatus\");\n    if (eventStatus && eventStatus.rules && eventStatus.rules.ruleList) {\n        eventStatus.rules.ruleList[selectedRule.name] = { counter : 0, active : false };\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedRule.name + \" saved OK\";\n}\nelse {\n    msgNotify.topic   = \"Delete Rule\";\n    if (ruleList[selectedRule.name])\n        delete(ruleList[selectedRule.name]);\n\n    eventStatus = global.get(\"eventStatus\");\n    if ( eventStatus && eventStatus.rules && eventStatus.rules.ruleList &&\n        eventStatus.rules.ruleList[selectedRule.name]) {\n        delete(eventStatus.rules.ruleList[selectedRule.name]);\n        global.set(\"eventStatus\", eventStatus);\n    }\n\n    msgNotify.payload = selectedRule.name + \" deleted\";\n}\n\neventConfig.rulesConfig.ruleList = ruleList;\nglobal.set(\"eventConfig\", eventConfig, \"config\");\n\nmsgCtl = { topic : msg.topic };\n\nreturn [ msgCtl, msg, msgNotify ];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 1720,
        "wires": [
            [
                "aa8e59f5.289018"
            ],
            [
                "d5a7cab1.57be08",
                "7e46e153.2e795"
            ],
            [
                "2b72072.9b92af8"
            ]
        ]
    },
    {
        "id": "d5a7cab1.57be08",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Rules Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2b72072.9b92af8",
        "type": "ui_toast",
        "z": "6c6899a7.084208",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 640,
        "y": 1780,
        "wires": []
    },
    {
        "id": "7e46e153.2e795",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Rules Action (OUT)",
        "links": [
            "3b0fb690.c183da"
        ],
        "x": 575,
        "y": 1740,
        "wires": []
    },
    {
        "id": "3b0fb690.c183da",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Rules Build List (IN)",
        "links": [
            "7e46e153.2e795"
        ],
        "x": 135,
        "y": 1500,
        "wires": [
            [
                "cf6abdbd.66621",
                "22153b9d.720cc4"
            ]
        ]
    },
    {
        "id": "9babf7be.295998",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Rule Change Field",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig)\n    return null;\n\nif (msg.topic == \"global_enable\") {\n    eventConfig.rulesConfig.enable = msg.payload;\n    global.set(\"eventConfig\", eventConfig, \"config\");\n    return null;\n    //return msg;\n}\n\nselectedRule = flow.get(\"selectedRule\", \"memoryOnly\") || { enable : false };\nold_value = selectedRule[msg.topic];\nselectedRule[msg.topic] = msg.payload;\nflow.set(\"selectedRule\", selectedRule, \"memoryOnly\");\n\nif ( (msg.topic == \"enable\") && (msg.payload == old_value) ) \n    return null;\n\nmsg.old_value = old_value;\nmsg.old_topic = msg.topic;\nmsg.topic = \"refresh\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1290,
        "y": 1520,
        "wires": [
            [
                "66a757d.2d36ca8",
                "c4ac4535.9cb4b8"
            ]
        ]
    },
    {
        "id": "23cab507.b97dca",
        "type": "ui_switch",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Rules Enable",
        "tooltip": "",
        "group": "98ccc12f.ef924",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "global_enable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1010,
        "y": 1320,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "c4ac4535.9cb4b8",
        "type": "link out",
        "z": "6c6899a7.084208",
        "name": "EVENT: Rules Change (OUT)",
        "links": [
            "7cdfbccc.a3e0e4"
        ],
        "x": 1415,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7cdfbccc.a3e0e4",
        "type": "link in",
        "z": "6c6899a7.084208",
        "name": "EVENT: Rules Select (IN)",
        "links": [
            "c4ac4535.9cb4b8"
        ],
        "x": 555,
        "y": 1400,
        "wires": [
            [
                "aa8e59f5.289018"
            ]
        ]
    },
    {
        "id": "66a757d.2d36ca8",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "DBG: EV: Rule Change",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1400,
        "wires": []
    },
    {
        "id": "4ef9c291.8b8aac",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Rule Type",
        "tooltip": "",
        "place": "Rule Type",
        "group": "d2eefada.da15a8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Value gets in or out of range",
                "value": "inoutrange",
                "type": "str"
            },
            {
                "label": "Value gets in range",
                "value": "inrange",
                "type": "str"
            },
            {
                "label": "Value gets out of range",
                "value": "outrange",
                "type": "str"
            },
            {
                "label": "Advanced",
                "value": "advanced",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "rule_type",
        "x": 1000,
        "y": 1520,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "7cd809d9.6a4cd8",
        "type": "ui_form",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "",
        "group": "d2eefada.da15a8",
        "order": 11,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Advanced Rule",
                "value": "command",
                "type": "multiline",
                "required": true,
                "rows": 7
            }
        ],
        "formValue": {
            "command": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "Reset",
        "topic": "advanced",
        "x": 990,
        "y": 1760,
        "wires": [
            [
                "c30c615f.e5e62"
            ]
        ]
    },
    {
        "id": "b34fee9d.2ee34",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Variable",
        "tooltip": "Leave empty / Device: \"rawdata\" / Meas: \"result\"",
        "group": "d2eefada.da15a8",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "variable",
        "x": 1000,
        "y": 1560,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "bc296088.f90c3",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Action",
        "tooltip": "",
        "place": "Action",
        "group": "d2eefada.da15a8",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "actionList",
        "x": 990,
        "y": 1680,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "99868c80.69b3d",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Digital Output",
        "tooltip": "",
        "place": "Digital Output",
        "group": "2765e667.3f5d5a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "OUT1",
                "value": "OUT1",
                "type": "str"
            },
            {
                "label": "OUT2",
                "value": "OUT2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "digital_output",
        "x": 1000,
        "y": 980,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "c30c615f.e5e62",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "Rule Program Validate",
        "func": "function action(a,b) {}\nfunction device(d,f) {\n    return { rawdata : [ 0 ], rawlast : [ 0] };\n}\nfunction meas(d,m,f) {\n    return { result : 0, last_result : 0 };\n}\n\nmsgNotify = { topic : \"Rule Validation\" };\n\ntry {\n    /* Variables */\n    dataLoggerStatus = global.get(\"dataLoggerStatus\");\n    deviceList = dataLoggerStatus.monitor.deviceList;\n    value=33;\n    \n    /* Eval */\n    eval(msg.payload.command);\n    msgNotify.payload = \"OK\";\n    return [ msg, msgNotify ];\n}\ncatch(e) {\n    node.warn(\"Rule Validate ERROR: \" + e);\n    msgNotify.error = e;\n    msgNotify.payload = \"ERROR: \" + e;\n    return [ null, msgNotify ];\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1240,
        "y": 1760,
        "wires": [
            [
                "9babf7be.295998"
            ],
            [
                "cc30c9a2.2fdeb8",
                "44223f6a.09bea"
            ]
        ]
    },
    {
        "id": "44223f6a.09bea",
        "type": "debug",
        "z": "6c6899a7.084208",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1820,
        "wires": []
    },
    {
        "id": "cc30c9a2.2fdeb8",
        "type": "ui_toast",
        "z": "6c6899a7.084208",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1480,
        "y": 1760,
        "wires": []
    },
    {
        "id": "17eeefd8.df467",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Sched Timer",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.triggersConfig ||\n    !eventConfig.triggersConfig.enable ||\n    !eventConfig.triggersConfig.triggerList)\n    return null;\n\nnow_s = Math.floor(msg.payload / 1000);\n\ntriggerList = eventConfig.triggersConfig.triggerList;\nfor (var triggerName in triggerList) {\n    trigger = triggerList[triggerName];\n    if (!trigger.enable || (trigger.trigger_type != \"timer\") )\n        continue;\n    \n    if (now_s % trigger.period == 0) {\n        msg.trigger = trigger;\n        node.send(msg);\n    }\n}\n\nnode.done();\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 240,
        "wires": [
            [
                "3e341895.f36e48",
                "e43776e2.727e28"
            ]
        ]
    },
    {
        "id": "688ac2e8.375b7c",
        "type": "inject",
        "z": "1da514ca.601cbb",
        "name": "Event Tick (1s) [3s]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "tick",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "17eeefd8.df467"
            ]
        ]
    },
    {
        "id": "3e341895.f36e48",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Timer Sched",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 280,
        "wires": []
    },
    {
        "id": "e43776e2.727e28",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Sched: Rules Check",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.rulesConfig ||\n    !eventConfig.rulesConfig.enable ||\n    !eventConfig.rulesConfig.ruleList)\n    return null;\n\nruleList = eventConfig.rulesConfig.ruleList;\nfor (var ruleName in ruleList) {\n    rule = ruleList[ruleName];\n    if (!rule.enable)\n        continue;\n    \n    if (rule.triggerList.indexOf(msg.trigger.name) == -1)\n        continue;\n    \n    msg.rule = rule;\n    node.send(msg);\n}\n\nnode.done();\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "a446772d.2eb118",
                "8717617f.9604c"
            ]
        ]
    },
    {
        "id": "74a4c30b.7a487c",
        "type": "ui_dropdown",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Trigger",
        "tooltip": "",
        "place": "Trigger",
        "group": "d2eefada.da15a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "triggerList",
        "x": 1000,
        "y": 1480,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "a446772d.2eb118",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Rules Sched",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "a020d235.8da04",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Parse MQTT",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig || !eventConfig.triggersConfig ||\n    !eventConfig.triggersConfig.enable ||\n    !eventConfig.triggersConfig.triggerList)\n    return null;\n\nmsg.mqtt_data = msg.payload;\nfields        = msg.topic.split(\"/\");\ntype          = fields[0];\n\ntriggerList = eventConfig.triggersConfig.triggerList;\nfor (var triggerName in triggerList) {\n    trigger = triggerList[triggerName];\n    if (!trigger.enable || (trigger.trigger_type != type) )\n        continue;\n    \n    devName     = fields[2];\n    msg.payload = {};\n    if (type == \"meas\") {\n        /* device/<device-type>/<device-name>/<meas-name>/value */\n        measName = fields[3];\n        trigger_meas_name = devName + \" / \" + measName;\n        if (trigger.measList.indexOf(trigger_meas_name) == -1)\n            continue;\n        msg.payload[fields[4]] = msg.mqtt_data;\n        msg.payload.value      = msg.mqtt_data;\n    }\n    else if (type == \"device\") {\n        /* device/<device-type>/<device-name>/rawdata */\n        if (trigger.deviceList.indexOf(devName) == -1)\n            continue;\n        msg.payload[fields[3]] = JSON.parse(msg.mqtt_data);\n        msg.payload.value      = msg.payload[fields[3]][0];\n    }\n    else if (type == \"action\") {\n        /* action/<action-type>/<action-name>/action_value */\n        if (trigger.actionList.indexOf(actionName) == -1)\n            continue;\n        msg.payload[fields[3]] = msg.mqtt_data;\n        msg.payload.value      = msg.mqtt_data;\n    }\n    else\n        continue;\n\n    msg.trigger = trigger;\n    node.send(msg);\n}\n\nnode.done();\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "f75f5cad.23693",
                "e43776e2.727e28"
            ]
        ]
    },
    {
        "id": "8717617f.9604c",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "EVENT: Sched (OUT)",
        "links": [
            "89ee67d9.fe4ee8"
        ],
        "x": 1005,
        "y": 160,
        "wires": []
    },
    {
        "id": "89ee67d9.fe4ee8",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "EVENT: Sched Rule Exec (IN)",
        "links": [
            "8717617f.9604c"
        ],
        "x": 115,
        "y": 420,
        "wires": [
            [
                "256e14db.ac12fc"
            ]
        ]
    },
    {
        "id": "256e14db.ac12fc",
        "type": "switch",
        "z": "1da514ca.601cbb",
        "name": "",
        "property": "rule.rule_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "advanced",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inrange",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "outrange",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inoutrange",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 230,
        "y": 420,
        "wires": [
            [
                "26c6bddd.58cd32"
            ],
            [
                "f3ec692b.362988"
            ],
            [
                "f3ec692b.362988"
            ],
            [
                "f3ec692b.362988"
            ]
        ]
    },
    {
        "id": "26c6bddd.58cd32",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Rule Exec Adv",
        "func": "eventConfig = global.get(\"eventConfig\", \"config\");\nif (!eventConfig.actionsConfig.enable)\n    return null;    // Actions disabled\n\nrule = msg.rule;\n\nactionList = {};\n\n/* Variables */\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndeviceList = dataLoggerStatus.monitor.deviceList;\nvoidDevice = { rawdata : [ 0 ], rawlast : [ 0 ] };\nvoidMeas   = { value : 0, last_value : 0 };\n\n/**************************************/\n/* action(action_name, value)\n **************************************/\nfunction action(action_name, value)\n{\n    actionEntry = eventConfig.actionsConfig.actionList[action_name];\n    if (actionEntry && actionEntry.enable) {\n        actionList[action_name] = RED.util.cloneMessage(actionEntry);\n        actionList[action_name].value = value;\n        //node.warn(action_name +\" \" + value)\n    }\n    else {\n        //node.warn(`Action ${action_name} does not exist`);\n    }\n}\n\n/**************************************/\n/* device_obj(device_name[, field])\n ***************************************/\nfunction device_obj(device_name, field)\n{\n    dev = (deviceList[device_name]) ? deviceList[device_name] : voidDevice;\n    if (field) {\n        try { return dev[field] }\n        catch(e) { return -1 }\n    }\n    else\n        return dev;\n}\n\n/**************************************/\n/* device(device_name[, raw_data_index])\n ***************************************/\nfunction device(device_name, raw_data_index)\n{\n    dev = (deviceList[device_name]) ? deviceList[device_name] : voidDevice;\n    if (raw_data_index != undefined) {\n        try { return dev.rawdata[raw_data_index] }\n        catch(e) { return -1 }\n    }\n    else\n        return dev.rawdata[0];\n}\n\n/**************************************/\n/* meas_obj(device_name, meas_name, [, field])\n ***************************************/\nfunction meas_obj(device_name, meas_name, field)\n{\n    try {\n        m = deviceList[device_name].measList[meas_name];\n    }\n    catch(e) {\n        node.warn(e);\n        m = voidMeas;\n    }\n    node.warn(m);\n    if (field) {\n        try { return m[field] }\n        catch(e) { return -1 }\n    }\n    else\n        return m;\n}\n\n/**************************************/\n/* meas(device_name, meas_name, [, field])\n ***************************************/\nfunction meas(device_name, meas_name, field)\n{\n    try {\n        m = deviceList[device_name].measList[meas_name];\n    }\n    catch(e) {\n        node.warn(e);\n        m = voidMeas;\n    }\n    node.warn(m);\n    if (field) {\n        try { return m[field] }\n        catch(e) { return -1 }\n    }\n    else\n        return m.value;\n}\n\n\n/**************************************/\n/* Rule EVAL\n ***************************************/\ntry {\n    eval(rule.advanced.command)\n}\ncatch(e) {\n    node.warn(\"Event Rule Exec Adv: \" + e);\n}\n\nmsg.actionList = actionList;\n\nif (msg.actionList) {\n    msg.payload = actionList;\n    if (Object.keys(msg.payload).length <= 0)\n        return null;\n\n    //msg.actionList   = rule.actionList;\n    //msg.action_value = rule.action_value || (new_active ? 1 : 0);\n    return msg;\n}\nelse\n    return null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "2828e129.107bae",
                "e490bb24.389908"
            ]
        ]
    },
    {
        "id": "2828e129.107bae",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Exec Adv",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 360,
        "wires": []
    },
    {
        "id": "86af1f84.b4bcc",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Min",
        "tooltip": "",
        "group": "d2eefada.da15a8",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "min",
        "x": 990,
        "y": 1600,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "2b70af1d.cfea3",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Max",
        "tooltip": "",
        "group": "d2eefada.da15a8",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "max",
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "6c58fc71.0072a4",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Action Value",
        "tooltip": "Leave empty for condition result as value",
        "group": "d2eefada.da15a8",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "action_value",
        "x": 1010,
        "y": 1720,
        "wires": [
            [
                "9babf7be.295998"
            ]
        ]
    },
    {
        "id": "13d72297.0a4e6d",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Publish Meas Result",
        "func": "msg.topic = `meas/${msg.item.type}/${msg.item.name}/${msg.meas.name}/value`;\ndata = JSON.stringify(msg.payload);\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1020,
        "wires": [
            [
                "44e162c1.ba299c"
            ]
        ]
    },
    {
        "id": "44e162c1.ba299c",
        "type": "mqtt out",
        "z": "3022fd6.d249f02",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb155faa.7a0cb",
        "x": 1250,
        "y": 1020,
        "wires": []
    },
    {
        "id": "653cc297.6eaf2c",
        "type": "mqtt in",
        "z": "1da514ca.601cbb",
        "name": "",
        "topic": "meas/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "a020d235.8da04"
            ]
        ]
    },
    {
        "id": "f3ec692b.362988",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Rule Exec Simple",
        "func": "rule = msg.rule;\neventStatus = global.get(\"eventStatus\");\nif (!eventStatus || !eventStatus.rules || !eventStatus.rules.ruleList)\n    return null;\n\nif (!eventStatus.rules.ruleList[rule.name])\n    eventStatus.rules.ruleList[rule.name] = { counter : 0, active : false };\n\nactionList = [];\nruleStatus = eventStatus.rules.ruleList[rule.name];\nactive     = ruleStatus.active || false;\ncounter    = ruleStatus.counter || 0;\ndo_action  = false;\nnew_active = active;\n\n/* Variables */\ndataLoggerStatus = global.get(\"dataLoggerStatus\");\ndevice = dataLoggerStatus.monitor.deviceList;\n\nif (rule.variable)\n    value = msg.payload[rule.variable]; // ESTO NO ESTA BIEN\nelse\n    value = msg.payload.value;\n\n/* Check in-range */\nif ( (rule.rule_type == \"inrange\") || (rule.rule_type == \"inoutrange\") ) {\n    inrange = true;\n    if ( (rule.min != \"\") && (value < rule.min) )\n        inrange = false;\n    else if ( (rule.max != \"\") && (value > rule.max) )\n        inrange = false;\n\n    if (active != inrange) {\n        new_active = inrange;\n        if (rule.rule_type == \"inoutrange\")\n            do_action = true;\n        else\n            do_action = new_active ? true : false;\n    }\n    //node.warn(`inrange: active:${active} new_act:${new_active} inrange:${inrange} do_action:${do_action}`)\n}\n/* Check out-of-range */\nelse if (rule.rule_type == \"outrange\") {\n    outofrange = false;\n    if ( (rule.min != \"\") && (value < rule.min) )\n        outofrange = true;\n    else if ( (rule.max != \"\") && (value > rule.max) )\n        outofrange = true;\n\n    if (active != outofrange) {\n        new_active = outofrange;\n        do_action = new_active ? true : false;\n    }\n    //node.warn(`outrange: active:${active} new_act:${new_active} outofrange:${outofrange} do_action:${do_action}`)\n}\nelse\n    return null;\n\nif (do_action) {\n    now = new Date();\n    eventStatus.rules.ruleList[rule.name].timestamp_ok = now.toISOString();\n    eventStatus.rules.ruleList[rule.name].counter      = counter + 1;\n    eventStatus.rules.ruleList[rule.name].active       = new_active;\n    global.set(\"eventStatus\", eventStatus);\n    \n    eventConfig = global.get(\"eventConfig\", \"config\");\n    if (!eventConfig.actionsConfig.enable)\n        return null;    // Actions disabled\n\n    msg.action_value = rule.action_value || (new_active ? 1 : 0);\n    msg.payload = {};\n    for (var actionIdx in rule.actionList) {\n        actionName = rule.actionList[actionIdx];\n        action = eventConfig.actionsConfig.actionList[actionName];\n        if (action && action.enable) {\n            msg.payload[actionName] = RED.util.cloneMessage(action);\n            msg.payload[actionName].value = msg.action_value;\n        }\n    }\n    if (Object.keys(msg.payload).length <= 0)\n        return null;\n\n    //msg.actionList   = rule.actionList;\n    return msg;\n}\n\nif (new_active != active) {\n    eventStatus.rules.ruleList[rule.name].active = new_active;\n    global.set(\"eventStatus\", eventStatus);\n}\n\n//node.warn(rule)\n//node.warn(ruleStatus)\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 440,
        "wires": [
            [
                "a4f39dc4.aa512",
                "e490bb24.389908"
            ]
        ]
    },
    {
        "id": "a4f39dc4.aa512",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Exec Simple",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "e490bb24.389908",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "EVENT: Sched Rule Exec (OUT)",
        "links": [
            "8591fd7e.aa48c"
        ],
        "x": 695,
        "y": 420,
        "wires": []
    },
    {
        "id": "8591fd7e.aa48c",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "EVENT: Sched Action (IN)",
        "links": [
            "e490bb24.389908"
        ],
        "x": 115,
        "y": 640,
        "wires": [
            [
                "3f617618.c3725a"
            ]
        ]
    },
    {
        "id": "1af3220f.58403e",
        "type": "switch",
        "z": "1da514ca.601cbb",
        "name": "",
        "property": "payload.action_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "digital-out",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "email",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sms",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "modbus-rtu",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 870,
        "y": 640,
        "wires": [
            [
                "b32c607e.dc5cc"
            ],
            [
                "cdfe3a5f.81c4e8"
            ],
            [
                "719a6a07.2c3d54"
            ],
            [
                "e3627f6b.20f86"
            ]
        ]
    },
    {
        "id": "3f617618.c3725a",
        "type": "split",
        "z": "1da514ca.601cbb",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "1af3220f.58403e",
                "ec83c772.10e898",
                "a5fe3f05.6759a"
            ]
        ]
    },
    {
        "id": "ec83c772.10e898",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action Exec",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 580,
        "wires": []
    },
    {
        "id": "44775607.5ccfc8",
        "type": "inject",
        "z": "1da514ca.601cbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "meas/modbus-rtu/sensor1/Voltage_Sensor/result",
        "payload": "237.5",
        "payloadType": "num",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "a020d235.8da04"
            ]
        ]
    },
    {
        "id": "22685abf.6b8336",
        "type": "inject",
        "z": "1da514ca.601cbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "meas/modbus-rtu/sensor1/Voltage_Sensor/result",
        "payload": "239",
        "payloadType": "num",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "a020d235.8da04"
            ]
        ]
    },
    {
        "id": "dff049a1.74a2f8",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Action Digital-OUT",
        "func": "eventStatus      = global.get(\"eventStatus\");\nvar bbgtAgtInfo  = global.get(\"bbgtAgtInfo\", \"config\");\nvar translate_io = bbgtAgtInfo.translate_io;\n\naction = msg.payload;\n\nif (!eventStatus.actions.actionList[action.name])\n    eventStatus.actions.actionList[action.name] = { counter : 0 };\n\nnow = new Date();\naction_value = msg.payload.value;\n\niopin = translate_io[action.digital_output].pin;\nif (!iopin) {\n    counter_error = eventStatus.actions.actionList[action.name].counter_error || 0;\n    eventStatus.actions.actionList[action.name].counter_error   = counter_error + 1;\n    eventStatus.actions.actionList[action.name].timestamp_error = now.toISOString();\n    eventStatus.actions.actionList[action.name].status          = \"ERROR\";\n    retmsg = null;\n}\nelse {\n    globalFuns = global.get(\"globalFuns\");\n    globalFuns.gpio_set(translate_io[action.digital_output], action_value);\n    eventStatus.actions.actionList[action.name].timestamp_ok = now.toISOString();\n    eventStatus.actions.actionList[action.name].status       = \"OK\";\n    retmsg = msg;\n}\n\ncounter = eventStatus.actions.actionList[action.name].counter || 0;\neventStatus.actions.actionList[action.name].counter = counter + 1;\neventStatus.actions.actionList[action.name].value   = action_value;\nglobal.set(\"eventStatus\", eventStatus);\n\nglobalFuns = global.get(\"globalFuns\");\nglobalFuns.tlnt_log(3, \"Event: Action\", `Digital-OUT (${action.name}): ${action.digital_output}=>${action_value} (trigger=${msg.trigger.name}, rule=${msg.rule.name})`);\n\nreturn retmsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 860,
        "wires": [
            [
                "d6b1f236.85389"
            ]
        ]
    },
    {
        "id": "b32c607e.dc5cc",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action Digital-OUT (OUT)",
        "links": [
            "3dd5b54e.4ae84a"
        ],
        "x": 1095,
        "y": 600,
        "wires": []
    },
    {
        "id": "3dd5b54e.4ae84a",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action Digital-OUT (IN)",
        "links": [
            "b32c607e.dc5cc"
        ],
        "x": 115,
        "y": 860,
        "wires": [
            [
                "dff049a1.74a2f8"
            ]
        ]
    },
    {
        "id": "d6b1f236.85389",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action Digital-OUT",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e82293a.e5bda7",
        "type": "e-mail",
        "z": "1da514ca.601cbb",
        "server": "smtp.telnet-ri.es",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "Event Action e-Mail Send",
        "x": 630,
        "y": 1060,
        "wires": []
    },
    {
        "id": "704316b0.190138",
        "type": "comment",
        "z": "1da514ca.601cbb",
        "name": "EVENT ACTION: Digital OUT",
        "info": "",
        "x": 160,
        "y": 800,
        "wires": []
    },
    {
        "id": "818d50a3.9e04e",
        "type": "comment",
        "z": "1da514ca.601cbb",
        "name": "EVENT ACTION: E-Mail",
        "info": "",
        "x": 140,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a5022e29.00ba2",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Action e-Mail",
        "func": "eventStatus = global.get(\"eventStatus\");\ndataLogger  = global.get(\"dataLogger\", \"config\");\naction = msg.payload;\n\nif (!eventStatus.actions.actionList[action.name])\n    eventStatus.actions.actionList[action.name] = { counter : 0 };\n\nmsg.topic = `DataLogger '${dataLogger.scheduler.dataLoggerID}': Event Action '${action.name}'`;\n\nmsg.payload  = `DataLogger: ${dataLogger.scheduler.dataLoggerID}\\n`;\nmsg.payload += `Trigger: ${msg.trigger.name} (${msg.trigger.description})\\n`;\nmsg.payload += `Trigger Data: ${msg.mqtt_data}\\n`;\nmsg.payload += `Rule: ${msg.rule.name} (${msg.rule.description})\\n`;\nmsg.payload += `Action:  ${action.name} (${action.description})\\n`;\nmsg.payload += `Action Value: ${msg.payload.value}\\n`;\nmsg.payload += `Extra Data: ${msg.extra || \"\"}\\n`;\n\nmsg.to = action.email;\n\nnow = new Date();\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "e428332a.affee",
                "1e82293a.e5bda7"
            ]
        ]
    },
    {
        "id": "ab2d5d88.be9a2",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action e-Mail (IN)",
        "links": [
            "cdfe3a5f.81c4e8"
        ],
        "x": 115,
        "y": 1060,
        "wires": [
            [
                "a5022e29.00ba2"
            ]
        ]
    },
    {
        "id": "e428332a.affee",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action e-Mail",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1020,
        "wires": []
    },
    {
        "id": "cdfe3a5f.81c4e8",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action e-Mail (OUT)",
        "links": [
            "ab2d5d88.be9a2"
        ],
        "x": 1135,
        "y": 620,
        "wires": []
    },
    {
        "id": "e950cc9e.d04c",
        "type": "inject",
        "z": "1da514ca.601cbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "to",
                "v": "dbeamonte@telnet-ri.es",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Prueba",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "1e82293a.e5bda7"
            ]
        ]
    },
    {
        "id": "3a171478.d1ba9c",
        "type": "complete",
        "z": "1da514ca.601cbb",
        "name": "",
        "scope": [
            "1e82293a.e5bda7"
        ],
        "uncaught": false,
        "x": 590,
        "y": 1120,
        "wires": [
            [
                "d248c80d.757248"
            ]
        ]
    },
    {
        "id": "bdc0963d.0df738",
        "type": "catch",
        "z": "1da514ca.601cbb",
        "name": "",
        "scope": [
            "1e82293a.e5bda7"
        ],
        "uncaught": false,
        "x": 570,
        "y": 1160,
        "wires": [
            [
                "71e849a.c24ccb8"
            ]
        ]
    },
    {
        "id": "50411ee9.16e41",
        "type": "status",
        "z": "1da514ca.601cbb",
        "name": "",
        "scope": [
            "1e82293a.e5bda7"
        ],
        "x": 580,
        "y": 1200,
        "wires": [
            [
                "559693e6.cfd93c"
            ]
        ]
    },
    {
        "id": "d248c80d.757248",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action e-Mail Complete",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "71e849a.c24ccb8",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action e-Mail Catch",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "559693e6.cfd93c",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action e-Mail Status",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9eecca61.001c78",
        "type": "ui_template",
        "z": "6c6899a7.084208",
        "group": "a9b35bd0.ff0498",
        "name": "Web Footer",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        var div = document.getElementById('nr-dashboard-footer');\n        if (div) {\n            div.innerHTML = '<div class=\"md-toolbar-tools\">' +\n                '<table style=\"background-color:#0094ce;width:100%;align:center;color:#FFFFFF\">' +\n                '<tr><td align=\"center\">' +\n                'TELNET Redes Inteligentes S.A. - © Copyright 2020 Todos los derechos reservados - <a style=\"color: #FFFFFF\" href=\"https://www.telnet-ri.es/aviso-legal/ \">Aviso legal</a>' +\n                '</td></tr>' +\n                '</table>' +\n                '</div>';\n        }\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1290,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e30d6d55.6ea3d",
        "type": "ui_ui_control",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "events": "all",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "da772cf6.5186a"
            ]
        ]
    },
    {
        "id": "cf8a96b0.31a0c8",
        "type": "comment",
        "z": "1da514ca.601cbb",
        "name": "EVENT ACTION: SMS",
        "info": "",
        "x": 140,
        "y": 1260,
        "wires": []
    },
    {
        "id": "20d48382.e0b58c",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Action SMS",
        "func": "eventStatus = global.get(\"eventStatus\");\ndataLogger  = global.get(\"dataLogger\", \"config\");\naction = msg.payload;\n\nif (!eventStatus.actions.actionList[action.name])\n    eventStatus.actions.actionList[action.name] = { counter : 0 };\n\ntmp = action.telephone;\nif (tmp.length <= 9)\n    telephone = \"0034\" + tmp;\nelse {\n    tmp.replace(/\\+/, \"00\");\n    telephone = tmp;\n}\n\nmsg.payload  = `To: ${telephone}\\n`;\nmsg.payload += \"Alphabet: ISO\\n\\n\";\nmsg.payload += `DataLogger: ${dataLogger.scheduler.dataLoggerID}\\n`;\nmsg.payload += `Trigger: ${msg.trigger.name}\\n`;\nmsg.payload += `Data: ${msg.mqtt_data}\\n`;\nmsg.payload += `Rule: ${msg.rule.name}\\n`;\nmsg.payload += `Action:  ${action.name}\\n`;\nmsg.payload += `Action Value: ${msg.payload.value}\\n`;\nmsg.payload += `Extra Data: ${msg.extra || \"\"}\\n`;\n\nnow = new Date();\nmsg.filename  = \"/var/spool/sms/outgoing/\";\nmsg.filename += `sms-${msg.trigger.name}-${msg.rule.name}-${action.name}-${now.toISOString()}.txt`;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1320,
        "wires": [
            [
                "a056d8f6.ea5278",
                "a0249b47.5934a8"
            ]
        ]
    },
    {
        "id": "60ce471f.bf7cc8",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action SMS (IN)",
        "links": [
            "719a6a07.2c3d54"
        ],
        "x": 115,
        "y": 1320,
        "wires": [
            [
                "20d48382.e0b58c"
            ]
        ]
    },
    {
        "id": "719a6a07.2c3d54",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action SMS (OUT)",
        "links": [
            "60ce471f.bf7cc8"
        ],
        "x": 1175,
        "y": 640,
        "wires": []
    },
    {
        "id": "a0249b47.5934a8",
        "type": "file",
        "z": "1da514ca.601cbb",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 570,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "a056d8f6.ea5278",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action SMS",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1280,
        "wires": []
    },
    {
        "id": "20927423.24eadc",
        "type": "file",
        "z": "6d0c29a1.c03ff8",
        "name": "WR: smsd.conf",
        "filename": "/etc/smsd.conf",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 760,
        "y": 1220,
        "wires": [
            [
                "d4ab76bc.eade08"
            ]
        ]
    },
    {
        "id": "d4ab76bc.eade08",
        "type": "exec",
        "z": "6d0c29a1.c03ff8",
        "command": "systemctl restart smstools.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1080,
        "y": 1220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "57d6f23d.b8668c",
        "type": "mqtt out",
        "z": "1da514ca.601cbb",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "fb155faa.7a0cb",
        "x": 730,
        "y": 680,
        "wires": []
    },
    {
        "id": "a5fe3f05.6759a",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Action Publish MQTT",
        "func": "msg.topic   = `action/${msg.payload.action_type}/${msg.payload.name}/action_value`;\n//msg.payload = `trigger:${msg.trigger.name},rule:${msg.rule.name},action_value:${msg.payload.value}`;\nmsg.payload = `${msg.payload.value}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 680,
        "wires": [
            [
                "504091fc.43c7f",
                "57d6f23d.b8668c"
            ]
        ]
    },
    {
        "id": "504091fc.43c7f",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action Publish MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 720,
        "wires": []
    },
    {
        "id": "7591a33a.aff0cc",
        "type": "mqtt in",
        "z": "1da514ca.601cbb",
        "name": "",
        "topic": "action/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "a020d235.8da04"
            ]
        ]
    },
    {
        "id": "e3627f6b.20f86",
        "type": "link out",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action MODBUS-RTU (OUT)",
        "links": [
            "35287149.2e8abe"
        ],
        "x": 1215,
        "y": 660,
        "wires": []
    },
    {
        "id": "7bad9bb.6e0f064",
        "type": "comment",
        "z": "1da514ca.601cbb",
        "name": "EVENT ACTION: MODBUS-RTU",
        "info": "",
        "x": 170,
        "y": 1480,
        "wires": []
    },
    {
        "id": "35287149.2e8abe",
        "type": "link in",
        "z": "1da514ca.601cbb",
        "name": "Event: Sched: Action MODBUS-RTU (IN)",
        "links": [
            "e3627f6b.20f86"
        ],
        "x": 115,
        "y": 1540,
        "wires": [
            [
                "bbeed81e.cd2808"
            ]
        ]
    },
    {
        "id": "bbeed81e.cd2808",
        "type": "function",
        "z": "1da514ca.601cbb",
        "name": "Event Action MODBUS-RTU",
        "func": "action = msg.payload;\n\nmsg.payload = {\n    fc       : action.modbus_fc,\n    unitid   : action.modbus_unitid,\n    address  : action.modbus_register,\n    quantity : 1,\n    value    : msg.payload.value\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 1540,
        "wires": [
            [
                "e0e802ee.45153",
                "483db038.26ebe"
            ]
        ]
    },
    {
        "id": "483db038.26ebe",
        "type": "modbus-flex-write",
        "z": "1da514ca.601cbb",
        "name": "MODBUS Action Write",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "338ade83.b54192",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 620,
        "y": 1540,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e0e802ee.45153",
        "type": "debug",
        "z": "1da514ca.601cbb",
        "name": "DBG: Event Action MODBUS-RTU",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f4cb9fb.4ae326",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "UnitID",
        "tooltip": "MODBUS RTU UnitID",
        "group": "2765e667.3f5d5a",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "modbus_unitid",
        "x": 970,
        "y": 1020,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "c733155e.2343f8",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "FC",
        "tooltip": "MODBUS RTU FC (1,2,3,4)",
        "group": "2765e667.3f5d5a",
        "order": 9,
        "width": "2",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "modbus_fc",
        "x": 970,
        "y": 1060,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "3b1fd086.69237",
        "type": "ui_text_input",
        "z": "6c6899a7.084208",
        "name": "",
        "label": "Register",
        "tooltip": "MODBUS RTU Register Address",
        "group": "2765e667.3f5d5a",
        "order": 10,
        "width": "2",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "modbus_register",
        "x": 980,
        "y": 1100,
        "wires": [
            [
                "3038be55.8200e2"
            ]
        ]
    },
    {
        "id": "7f47f47b.223c6c",
        "type": "mqtt out",
        "z": "e045593e.092be8",
        "name": "MQTT: config/apply",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "fb155faa.7a0cb",
        "x": 1050,
        "y": 720,
        "wires": []
    },
    {
        "id": "afbb907a.0e921",
        "type": "mqtt in",
        "z": "31c39280.4de9fe",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 1010,
        "y": 1240,
        "wires": [
            [
                "f5157386.89741"
            ]
        ]
    },
    {
        "id": "3b5ea6e1.59837a",
        "type": "mqtt in",
        "z": "31c39280.4de9fe",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "nl": false,
        "rap": false,
        "x": 150,
        "y": 1740,
        "wires": [
            [
                "386677ba.a24d88"
            ]
        ]
    },
    {
        "id": "8cfcde3b.af882",
        "type": "mqtt in",
        "z": "e045593e.092be8",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 160,
        "y": 1360,
        "wires": [
            [
                "b83ea0c4.60017"
            ]
        ]
    },
    {
        "id": "9f73b0b3.53b06",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "Factory Reset Commit",
        "func": "global.set(\"dataLogger\", undefined, \"config\");\nglobal.set(\"dataLoggerStatus\", undefined);\nglobal.set(\"bbgtAgtCfg\", undefined, \"config\");\nglobal.set(\"eventConfig\", undefined, \"config\");\nglobal.set(\"eventStatus\", undefined);\n\nmsg.topic = \"Factory Reset\";\nmsg.payload = \"System is going to restart now!!\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 1020,
        "wires": [
            [
                "514eecaf.ea63b4",
                "f0a10aa9.f9e3b8",
                "b0a94f37.872f"
            ]
        ]
    },
    {
        "id": "63b7e42a.9744ec",
        "type": "ui_dropdown",
        "z": "857c3f85.fb474",
        "d": true,
        "name": "",
        "label": "File Strategy",
        "tooltip": "",
        "place": "Select option",
        "group": "a9b35bd0.ff0498",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": true,
        "options": [
            {
                "label": "All Meas in same file",
                "value": "onefile",
                "type": "str"
            },
            {
                "label": "One File per Meas",
                "value": "measfile",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "file_strategy",
        "x": 470,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ebd5ec40.dd355",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 410,
        "y": 1020,
        "wires": [
            [
                "2899768d.afbb1a"
            ]
        ]
    },
    {
        "id": "47876895.cd1698",
        "type": "exec",
        "z": "31c39280.4de9fe",
        "command": "service node-red restart",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1270,
        "y": 1020,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f0a10aa9.f9e3b8",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1060,
        "y": 1020,
        "wires": [
            [
                "47876895.cd1698"
            ]
        ]
    },
    {
        "id": "514eecaf.ea63b4",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1040,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b0a94f37.872f",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: Factory Reset",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "9ac816e.1d311e8",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: Restart System",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "2899768d.afbb1a",
        "type": "switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 1020,
        "wires": [
            [
                "9f73b0b3.53b06"
            ]
        ]
    },
    {
        "id": "7187230f.20595c",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: Reboot Device",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 560,
        "wires": []
    },
    {
        "id": "98ed05d9.337c78",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "f347a25a.609c3"
            ]
        ]
    },
    {
        "id": "23bad401.aa995c",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "DBG: Change/Create/Delete User",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 540,
        "wires": []
    },
    {
        "id": "b83ea0c4.60017",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "Dev config/apply",
        "func": "flow.set(\"selectedDevice\", undefined, \"memoryOnly\");\nmsg.topic = \"save\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1360,
        "wires": [
            [
                "fca664bc.abc668"
            ]
        ]
    },
    {
        "id": "1a21ce80.48c552",
        "type": "mqtt in",
        "z": "e045593e.092be8",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 290,
        "y": 320,
        "wires": [
            [
                "75857a44.99cc64",
                "67d0a052.7a22e"
            ]
        ]
    },
    {
        "id": "7be429ae.90ba18",
        "type": "mqtt in",
        "z": "857c3f85.fb474",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "8bd4d847.5c79e8"
            ]
        ]
    },
    {
        "id": "e591d33a.0fc97",
        "type": "mqtt in",
        "z": "31c39280.4de9fe",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "nl": false,
        "rap": false,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "5beef210.a88c3c"
            ]
        ]
    },
    {
        "id": "fca34b9e.346438",
        "type": "ui_toast",
        "z": "857c3f85.fb474",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 390,
        "y": 2020,
        "wires": [
            [
                "2973111f.91670e"
            ]
        ]
    },
    {
        "id": "42869a4c.f032c4",
        "type": "http in",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "url": "/enableSSH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "f6b99014.0ea53",
                "ec372a7c.db01a8"
            ]
        ]
    },
    {
        "id": "f6b99014.0ea53",
        "type": "function",
        "z": "9a79c914.b7e6f8",
        "name": "API: enableSSH Build Answer",
        "func": "msg.statusCode = 200;\n\naction = null;\nif (msg.payload.value) {\n    if ( (msg.payload.value == \"true\") || (msg.payload.value == \"enable\") )\n        action = true;\n    else if ( (msg.payload.value == \"false\") || (msg.payload.value == \"disable\") )\n        action = false;\n}\nelse if (msg.payload.enable != undefined)\n    action = true;\nelse if (msg.payload.disable != undefined)\n    action = false;\n\nmsg.payload = {\n    status : \"OK\"\n};\n\nif (action != null) {\n    cp = global.get(\"child_process\");\n    cmd = `ufw ${action ? \"\" : \"delete\"} allow ssh`;\n    node.warn(cmd);\n    try {\n        result = cp.execSync(cmd, { encoding : \"ascii\"} );\n        msg.result = result;\n        msg.payload.result = \"SSH \" + (action ? \"Enabled\" : \"Disabled\");\n    }\n    catch(e) {\n        msg.e = `ERROR changing SSH firewall rule (${cmd}): ${e}`;\n        node.warn(msg.e);\n        msg.payload.result = \"ERROR \" + (action ? \"Enabling\" : \"Disabling\") + \" SSH\";\n        msg.payload.status = \"ERROR\";\n    }\n    msg.cmd    = cmd;\n}\n\nmsg.action = action;\n\nnode.warn(`API enableSSH (action=${action}): payload=` + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1240,
        "wires": [
            [
                "24ed4f22.7f516",
                "1fa1a5af.d7a79a"
            ]
        ]
    },
    {
        "id": "24ed4f22.7f516",
        "type": "http response",
        "z": "9a79c914.b7e6f8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Access-Control-Allow-Headers": "Authorization, Content-Type",
            "Access-Control-Allow-Methods": "POST",
            "Access-Control-Allow-Origin": "*"
        },
        "x": 670,
        "y": 1240,
        "wires": []
    },
    {
        "id": "ec372a7c.db01a8",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Enable SSH IN",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1fa1a5af.d7a79a",
        "type": "debug",
        "z": "9a79c914.b7e6f8",
        "name": "API: HTTP Enable SSH OUT",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "15857dcd.119222",
        "type": "comment",
        "z": "9a79c914.b7e6f8",
        "name": "API: /enableSSH",
        "info": "",
        "x": 140,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d95246cf.a1b528",
        "type": "link in",
        "z": "857c3f85.fb474",
        "name": "DL: Storage Reset (IN)",
        "links": [
            "d71666bd.046538"
        ],
        "x": 55,
        "y": 840,
        "wires": [
            [
                "7f2070e6.76a26"
            ]
        ]
    },
    {
        "id": "d71666bd.046538",
        "type": "link out",
        "z": "857c3f85.fb474",
        "name": "DL: Delete File Actions (OUT)",
        "links": [
            "d95246cf.a1b528"
        ],
        "x": 855,
        "y": 1960,
        "wires": []
    },
    {
        "id": "85034a0.86cf8b8",
        "type": "ui_ui_control",
        "z": "e045593e.092be8",
        "name": "",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "a731e8ee.f0ac28"
            ]
        ]
    },
    {
        "id": "605ac48f.f577dc",
        "type": "mqtt in",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 250,
        "y": 980,
        "wires": [
            [
                "56ee530.ebdb5ac"
            ]
        ]
    },
    {
        "id": "e98102fa.8d72e",
        "type": "mqtt in",
        "z": "f7a9df1f.01316",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "315f1498.d761bc"
            ]
        ]
    },
    {
        "id": "79f0a9a9.25a798",
        "type": "ui_switch",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "label": "Use Time Diff as Value",
        "tooltip": "",
        "group": "c52ab030.ec40a",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "use_time_diff",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1300,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "1901d21d.518c2e",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: Cloud Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f689daea.941d98",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: Prepare Graphs",
        "func": "use_time_diff       = (msg.meas.post_oper || \"none\").includes(\"timediff\");\nchanges_only_commit = msg.changes_only_commit || false;\n\n//node.warn(use_time_diff + \" \" + changes_only_commit);\nif (use_time_diff && !changes_only_commit)\n    return null;\n//node.warn(use_time_diff && !changes_only_commit);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 2280,
        "wires": [
            [
                "7d74760f.d04b98"
            ]
        ]
    },
    {
        "id": "9ff8a9fb.9be568",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "label": "Range Min",
        "tooltip": "Optional. Minimum Range value",
        "group": "c52ab030.ec40a",
        "order": 16,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "range_min",
        "x": 1010,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "57f0d638.efd728",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "d": true,
        "name": "",
        "label": "Range Max",
        "tooltip": "Optional. Minimum Range value",
        "group": "c52ab030.ec40a",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "1500",
        "topic": "range_max",
        "x": 1010,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "10e725df.98592a",
        "type": "ui_text",
        "z": "e045593e.092be8",
        "d": true,
        "group": "c52ab030.ec40a",
        "order": 15,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "Range",
        "format": "",
        "layout": "row-left",
        "x": 990,
        "y": 2760,
        "wires": []
    },
    {
        "id": "f3bd450a.8e3f78",
        "type": "ui_dropdown",
        "z": "e045593e.092be8",
        "name": "",
        "label": "Post-Op",
        "tooltip": "Action to perform after the operation",
        "place": "Select option",
        "group": "c52ab030.ec40a",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "None",
                "value": "none",
                "type": "str"
            },
            {
                "label": "Time Diff as Value",
                "value": "timediff",
                "type": "str"
            },
            {
                "label": "Non-zero value Time Diff",
                "value": "timediff_nonzero",
                "type": "str"
            },
            {
                "label": "Zero value Time Diff",
                "value": "timediff_zero",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "post_oper",
        "x": 1000,
        "y": 2640,
        "wires": [
            [
                "f0febc78.78444"
            ]
        ]
    },
    {
        "id": "d50b3c0.c3de2c8",
        "type": "mqtt in",
        "z": "3022fd6.d249f02",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 370,
        "y": 2240,
        "wires": [
            [
                "7d74760f.d04b98"
            ]
        ]
    },
    {
        "id": "5880efa6.6130a",
        "type": "mqtt in",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "eff4b20f.20254"
            ]
        ]
    },
    {
        "id": "7add7d9b.e4e144",
        "type": "mqtt in",
        "z": "6c6899a7.084208",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "6edd84b3.bab58c"
            ]
        ]
    },
    {
        "id": "6edd84b3.bab58c",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "",
        "func": "msg.topic = \"init\";\nflow.set(\"selectedTrigger\", undefined, \"memoryOnly\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "f0408be9.213168",
                "4225d14a.8acad"
            ]
        ]
    },
    {
        "id": "65773a05.1eb004",
        "type": "mqtt in",
        "z": "6c6899a7.084208",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 90,
        "y": 980,
        "wires": [
            [
                "cdf653f8.f7ff"
            ]
        ]
    },
    {
        "id": "cdf653f8.f7ff",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "",
        "func": "msg.topic = \"init\";\nflow.set(\"selectedAction\", undefined, \"memoryOnly\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 980,
        "wires": [
            [
                "bb9b7c88.3a59b",
                "646739b3.bc6728"
            ]
        ]
    },
    {
        "id": "f7e20e33.0e46f",
        "type": "mqtt in",
        "z": "6c6899a7.084208",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb155faa.7a0cb",
        "x": 90,
        "y": 1540,
        "wires": [
            [
                "cac1f1d8.18d9"
            ]
        ]
    },
    {
        "id": "cac1f1d8.18d9",
        "type": "function",
        "z": "6c6899a7.084208",
        "name": "",
        "func": "msg.topic = \"init\";\nflow.set(\"selectedRule\", undefined, \"memoryOnly\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 1540,
        "wires": [
            [
                "cf6abdbd.66621",
                "aa8e59f5.289018"
            ]
        ]
    },
    {
        "id": "e0a3bb1d.07fb58",
        "type": "mqtt in",
        "z": "87692da3.99da2",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "x": 90,
        "y": 500,
        "wires": [
            [
                "4ed27239.6ea3dc"
            ]
        ]
    },
    {
        "id": "94bab38c.f3742",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "MMCLI Apply 1",
        "func": "cp = global.get(\"child_process\");\n\nif (msg.oldConf.mmcli_mode != msg.modemConf.mmcli_mode)\n    msg.result = cp.execSync(\"systemctl restart snap.modem-manager.modemmanager.service snap.network-manager.networkmanager.service\", { encoding : \"ascii\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 1280,
        "wires": [
            [
                "29ec5107.75711e",
                "222ec3b2.4fc11c"
            ]
        ]
    },
    {
        "id": "29ec5107.75711e",
        "type": "delay",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 940,
        "y": 1280,
        "wires": [
            [
                "8b8d3eee.9d7d6"
            ]
        ]
    },
    {
        "id": "6001ec94.3e56b4",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "",
        "func": "CONN_NAME= \"tlnt-modem-conn\";\n\nbbgtAgtCfg = global.get(\"bbgtAgtCfg\", \"config\");\nif (!bbgtAgtCfg || !bbgtAgtCfg.modem)\n    return null;\n\nif (bbgtAgtCfg.modem.mmcli_mode) {\n    //\"nmcli c  ( up|down) myconn\"\n    if (msg.topic == \"start\")\n        msg.payload = \"/snap/bin/nmcli c up \" + CONN_NAME;\n    else if (msg.topic == \"stop\")\n        msg.payload = \"/snap/bin/nmcli c down \" + CONN_NAME;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1060,
        "wires": [
            [
                "bce19853.9fbea8"
            ]
        ]
    },
    {
        "id": "8b8d3eee.9d7d6",
        "type": "function",
        "z": "6d0c29a1.c03ff8",
        "name": "MMCLI Apply 2",
        "func": "CONN_NAME = \"tlnt-modem-conn\";\n\nmodemConf = msg.modemConf;\n/*\nnmcli c add type gsm ifname '*' con-name myconn apn movistar.es\n*/\n\n//node.warn(modemConf)\nif (modemConf.APN) {\n    cp = global.get(\"child_process\");\n    cmd = `/snap/bin/nmcli c add type gsm ifname '*' con-name ${CONN_NAME} gsm.apn ${modemConf.APN}`;\n    if (modemConf.user)\n        cmd += ` gsm.username ${modemConf.user}`;\n    if (modemConf.password)\n        cmd += ` gsm.password ${modemConf.password}`;\n    if (modemConf.metric)\n        cmd += ` ipv4.route-metric ${modemConf.metric}`;\n    \n    cmd += \" connection.autoconnect \" + (modemConf.auto_connect ? \"yes\" : \"no\");\n    //node.warn(cmd)\n\n    try { cp.execSync(`/snap/bin/nmcli c del ${CONN_NAME}`); }\n    catch(e) {}\n    \n    try {\n        cp.execSync(cmd);\n        msg.cmd = cmd;\n    }\n    catch(e) {\n        node.warn(\"ERROR creating modem connection: \" + e);\n        msg.error = e;\n    }\n}\nelse {\n    msg.cmd = \"No APN\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 1280,
        "wires": [
            [
                "1b49a83e.45f738"
            ]
        ]
    },
    {
        "id": "9031cd60.f302",
        "type": "function",
        "z": "1c8a3583.7e682a",
        "name": "Startup: GPIO INIT",
        "func": "bbgtAgtInfo   = global.get(\"bbgtAgtInfo\", \"config\");\nbbgtAgtStatus = global.get(\"bbgtAgtStatus\");\nif (!bbgtAgtStatus || !bbgtAgtStatus.gpio || !bbgtAgtInfo || !bbgtAgtInfo.translate_io)\n    return null;\n\nglobalFuns = global.get(\"globalFuns\");\n\nfor (var gpio_name in bbgtAgtStatus.gpio) {\n    gpio = bbgtAgtInfo.translate_io[gpio_name];\n    globalFuns.gpio_set(gpio, bbgtAgtStatus.gpio[gpio_name].value, false);\n    node.warn(\"Setting GPIO \" + gpio_name + \" value \" + bbgtAgtStatus.gpio[gpio_name].value);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d32e3f1d.20f15",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "DBG: Modem Action",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "86493eb7.b75a3",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "MMCLI 1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1320,
        "wires": []
    },
    {
        "id": "222ec3b2.4fc11c",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "MMCLI 2",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1b49a83e.45f738",
        "type": "debug",
        "z": "6d0c29a1.c03ff8",
        "name": "MMCLI 3",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1320,
        "wires": []
    },
    {
        "id": "89e9bfe1.54fe",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "Prueba DBG",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 320,
        "wires": []
    },
    {
        "id": "2256f757.bd1348",
        "type": "comment",
        "z": "31c39280.4de9fe",
        "name": "Port Knocking",
        "info": "",
        "x": 210,
        "y": 1840,
        "wires": []
    },
    {
        "id": "a99be44c.6fd478",
        "type": "ui_switch",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "PortKnocking",
        "tooltip": "",
        "group": "290ee9f5.c42786",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "knockd",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 710,
        "y": 1860,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "7b054453.4430cc",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "OpenSSH",
        "tooltip": "port1 port2 port3 (valid_ports: [1-65.535])",
        "group": "290ee9f5.c42786",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "3000",
        "topic": "openssh",
        "x": 700,
        "y": 1920,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "b516d16f.3f49d",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "CloseSSH",
        "tooltip": "port1 port2 port3 (valid_ports: [1-65.535])",
        "group": "290ee9f5.c42786",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "3000",
        "topic": "closessh",
        "x": 710,
        "y": 1960,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "258373a0.358e3c",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "OpenWEB",
        "tooltip": "port1 port2 port3 (valid_ports: [1-65.535])",
        "group": "290ee9f5.c42786",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "3000",
        "topic": "openweb",
        "x": 710,
        "y": 2020,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "d4faed5c.aefe8",
        "type": "ui_text_input",
        "z": "31c39280.4de9fe",
        "name": "",
        "label": "CloseWEB",
        "tooltip": "port1 port2 port3 (valid_ports: [1-65.535])",
        "group": "290ee9f5.c42786",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "3000",
        "topic": "closeweb",
        "x": 710,
        "y": 2060,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "6b186dee.d5afa4",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "290ee9f5.c42786",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Save ",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "save",
        "payloadType": "str",
        "topic": "save",
        "x": 730,
        "y": 2120,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "eb3bff22.344a8",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: KnockCfg Read",
        "func": "//Importing global funtions and variables\nglobalFuns  = global.get(\"globalFuns\");\nbbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\n\nglobalFuns.tlnt_log(6, \"SystemMgmt\", \"portKnocking\");\n\n//Setting of default portKnock configuration on global environement\nknockConfig = bbgtAgtCfg.knockConfig;\nif (!knockConfig) {\n    knockConfig = {\n        knockd   : false,\n        openssh  : \"\",\n        closessh : \"\",\n        openweb  : \"\",\n        closeweb : \"\",\n    }\n    bbgtAgtCfg.knockConfig = knockConfig;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n}\n\n//After an start, reboot or restart system\nif((msg.topic == \"config/apply\")||(msg.topic == \"init\")){\n    \n    cp = global.get(\"child_process\");\n    if(bbgtAgtCfg.web.old_port != bbgtAgtCfg.web.port){\n        \n        //Getting the new knock_port, if web_port changed \n        knock_old_port = flow.get(\"knock_old_port\");\n        knock_port = flow.get(\"knock_port\");\n     \n        //Updating firewall configuration with the new port\n        if(knockConfig.knockd) {\n            cp.execSync(\"ufw allow in on enp2s0 to any port \" + knock_port + \" && ufw allow in on enp3s0 to any port \" + knock_port);\n            cp.execSync(\"ufw delete allow in on enp2s0 to any port \" + knock_old_port + \"&& ufw  delete allow in on enp3s0 to any port \" + knock_old_port);\n            cp.execSync(\"systemctl restart knockd.service\");\n        }else\n            cp.execSync(\"ufw allow in \" + knock_port + \" && ufw delete allow in \" + knock_old_port);\n    }   \n    \n    //Enabling or disabling knockd.service on start\n    if(knockConfig.knockd) \n        cp.execSync(\"systemctl start knockd.service\");\n    else\n        cp.execSync(\"systemctl stop knockd.service\");\n}\n\n//We assing this variable to the enabled property of the ui text input\n//that allows us to enable or disable th input of new values\nenabled = true;        \n\nmsgKnockd = { payload : knockConfig.knockd, enabled : true };\nmsgOpenSsh = { payload : knockConfig.openssh, enabled : enabled };\nmsgCloseSsh = { payload : knockConfig.closessh, enabled : enabled};\nmsgOpenWeb=  { payload : knockConfig.openweb , enabled : enabled};\nmsgCloseWeb= { payload : knockConfig.closeweb, enabled : enabled };\n\nreturn [msgKnockd, msgOpenSsh, msgCloseSsh, msgOpenWeb, msgCloseWeb];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1980,
        "wires": [
            [
                "a99be44c.6fd478"
            ],
            [
                "7b054453.4430cc"
            ],
            [
                "b516d16f.3f49d"
            ],
            [
                "258373a0.358e3c"
            ],
            [
                "d4faed5c.aefe8"
            ]
        ]
    },
    {
        "id": "8a0fac04.53915",
        "type": "inject",
        "z": "31c39280.4de9fe",
        "name": "KnockCfg INIT (3s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1940,
        "wires": [
            [
                "eb3bff22.344a8"
            ]
        ]
    },
    {
        "id": "c5873096.6bccd",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "290ee9f5.c42786",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Apply",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "update",
        "payload": "",
        "payloadType": "str",
        "topic": "apply",
        "x": 730,
        "y": 2160,
        "wires": [
            [
                "fc956853.e85dc8",
                "ae1661e1.0f553"
            ]
        ]
    },
    {
        "id": "1fcbf175.768f1f",
        "type": "ui_button",
        "z": "31c39280.4de9fe",
        "name": "",
        "group": "290ee9f5.c42786",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Stop Knockd Service",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "knockd service stopped",
        "payloadType": "str",
        "topic": "stop",
        "x": 680,
        "y": 2200,
        "wires": [
            [
                "ae1661e1.0f553",
                "fc956853.e85dc8"
            ]
        ]
    },
    {
        "id": "859d8ef.37e3f7",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "MGMT: KnockCfg Action",
        "func": "bbgtAgtCfg  = global.get(\"bbgtAgtCfg\", \"config\");\nglobalFuns  = global.get(\"globalFuns\");\n\nknockConfig = bbgtAgtCfg.knockConfig;\nif (!knockConfig)\n    return [null,null,null,null];\n    \ntmpKnockConfig = flow.get(\"tmpKnockConfig\", \"memoryOnly\");\nif (!tmpKnockConfig) {\n    tmpKnockConfig = RED.util.cloneMessage(knockConfig);\n}\n\nknock_port=flow.get(\"knock_port\");\nglobalFuns.tlnt_log(3, \"SystemMgmt\", \"KnockConfig: \" + msg.topic);\n\nif (msg.topic == \"save\") {\n        \n    //Cloning the msg.payload values saved on the flow variable tmpKnockConfig to the global context\n    knockConfig = RED.util.cloneMessage(tmpKnockConfig);\n    bbgtAgtCfg.knockConfig = knockConfig;\n    global.set(\"bbgtAgtCfg\", bbgtAgtCfg, \"config\");\n    \n    var knockd_conf = \n    \"# File auto-generated by node-red BabelGate Agent\\n\" +\n    \"# Last modification: \" + new Date() + \"\\n\\n\" +\n    \"[options]\\n\"+\n    \"   logfile = /var/log/knockd.log\\n\\n\"+\n        \n    \"[openSSH]\\n\"+\n    \"   sequence = \" + knockConfig.openssh + \"\\n\"+\n    \"   seq_timeout = 5\\n\"+\n    \"   command     = ufw allow in on wwan0 from %IP% to any port 22\\n\"+\n    \"   tcpflags    = syn\\n\\n\"+\n    \n    \"[closeSSH]\\n\"+\n    \"   sequence    = \" + knockConfig.closessh + \"\\n\"+\n    \"   seq_timeout = 5 \\n\"+\n    \"   command     = ufw delete allow in on wwan0 from  %IP% to any port 22\\n\"+\n    \"   tcpflags    = syn\\n\\n\"+\n    \n    \"[openWEB]\\n\"+\n    \"   sequence    = \" + knockConfig.openweb + \"\\n\"+\n    \"   seq_timeout = 5\\n\"+\n    \"   command     = ufw allow in on wwan0 from  %IP% to any port \" + knock_port + \"\\n\"+\n    \"   tcpflags    = syn\\n\\n\"+\n        \n    \"[closeWEB]\\n\"+\n    \"   sequence    = \" + knockConfig.closeweb + \"\\n\"+\n    \"   seq_timeout = 5\\n\"+\n    \"   command     = ufw delete allow in on wwan0 from  %IP% to any port \" + knock_port + \"\\n\"+\n    \"   tcpflags    = syn\\n\"; \n    \n    //Set msg onjects and send\n    msgFile = { payload : knockd_conf }\n    msgNotif = {\n        topic   : \"Port Knocking\",\n        payload : \"Configuration saved OK\"\n    }\n    return[msgFile,msgNotif,null,null]\n}\nelse if (msg.topic == \"apply\") {\n\n    //Updating firewall settings along with the saved knockd confiuration\n    cp = global.get(\"child_process\");\n    \n    if(knockConfig.knockd) {\n        cp.execSync(\"ufw --force disable && ufw --force reset\" +\n                    \"&& ufw allow in 1883 && ufw allow in on enp2s0 to any port 22 && ufw allow in on enp3s0 to any port 22\" +\n                    \"&& ufw allow in on enp2s0 to any port \" + knock_port + \"&& ufw allow in on enp3s0 to any port \" + knock_port +\n                    \"&& ufw --force reload && ufw --force enable\");\n        knockd_command = \"systemctl restart knockd.service\";\n    }else{\n        cp.execSync(\"ufw --force disable && ufw --force reset\" +\n                    \"&& ufw allow in 1883 && ufw allow in 22 && ufw allow in \" + knock_port +\n                    \"&& ufw --force reload && ufw --force enable\");\n       knockd_command = \"systemctl stop knockd.service\";\n    }\n    \n    msgNotif = {\n            topic   : \"Port Knocking\",\n            payload : \"Changes Applied\"\n        }\n    msgCommand = { payload  : knockd_command }\n    return[null, msgNotif, null, msgCommand];\n}\nelse if (msg.topic == \"stop\") {\n\n    //Updating firewall settings and stopping knockd.service\n    msgLink = {\n        topic   : \"knockd\", \n        payload : \"false\"\n    }\n    cp = global.get(\"child_process\");\n\n    if(bbgtAgtCfg.knockConfig.knockd) {\n       cp.execSync(\"ufw --force disable && ufw --force reset\" +\n                    \"&& ufw allow in 1883 && ufw allow in 22 && ufw allow in \" + knock_port +\n                    \"&& ufw --force reload && ufw --force enable\");\n       knockd_command = \"systemctl stop knockd.service\"\n       bbgtAgtCfg.knockConfig.knockd = false;\n    }else{\n       knockd_command = \"systemctl stop knockd.service\";\n    }\n    \n    msgNotif = {\n            topic   : \"Port Knocking\",\n            payload : \"Knocking service stopped\"\n        }\n    msgCommand = { payload  : knockd_command }\n    return[null,msgNotif,msgLink,msgCommand];\n}\nelse {\n    //setting flow variable tmpKnockConfig with any dashboard text input change\n    tmpKnockConfig[msg.topic] = msg.payload;\n    flow.set(\"tmpKnockConfig\", tmpKnockConfig, \"memoryOnly\");\n\n    return[null,null,null,null];\n}\n\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1980,
        "wires": [
            [
                "61fddb29.15aa54"
            ],
            [
                "1f218771.9c6479"
            ],
            [
                "44ae628e.36f68c"
            ],
            [
                "77eb6be5.6bbbc4"
            ]
        ]
    },
    {
        "id": "1f218771.9c6479",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 1960,
        "wires": []
    },
    {
        "id": "61fddb29.15aa54",
        "type": "file",
        "z": "31c39280.4de9fe",
        "name": "",
        "filename": "/etc/knockd.conf",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "ascii",
        "x": 1280,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "ece4c88b.174ae8",
        "type": "mqtt in",
        "z": "31c39280.4de9fe",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "nl": false,
        "rap": false,
        "x": 190,
        "y": 2020,
        "wires": [
            [
                "eb3bff22.344a8"
            ]
        ]
    },
    {
        "id": "77eb6be5.6bbbc4",
        "type": "exec",
        "z": "31c39280.4de9fe",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1270,
        "y": 2060,
        "wires": [
            [
                "16b10c13.3a3294"
            ],
            [],
            []
        ]
    },
    {
        "id": "16b10c13.3a3294",
        "type": "debug",
        "z": "31c39280.4de9fe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2000,
        "wires": []
    },
    {
        "id": "3565aaba.ea1826",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1330,
        "y": 1660,
        "wires": []
    },
    {
        "id": "93d939b2.b20ca8",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1160,
        "y": 1660,
        "wires": [
            [
                "3565aaba.ea1826"
            ]
        ]
    },
    {
        "id": "1e15cd54.b75bb3",
        "type": "ui_toast",
        "z": "31c39280.4de9fe",
        "position": "top right",
        "displayTime": "7",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Port Knocking",
        "name": "",
        "x": 1090,
        "y": 2200,
        "wires": []
    },
    {
        "id": "fc956853.e85dc8",
        "type": "function",
        "z": "31c39280.4de9fe",
        "name": "Notification",
        "func": "if(msg.topic==\"apply\"){\n    msg = {\n        topic   : \"Port Knocking\",\n        payload : \"Wait a little, Updating firewall settings\"\n        }\n}\nif(msg.topic==\"stop\"){\n    msg = {\n        topic   : \"Port Knocking\",\n        payload : \"Wait a little, Stopping Knocking service\"\n        }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2200,
        "wires": [
            [
                "1e15cd54.b75bb3"
            ]
        ]
    },
    {
        "id": "ae1661e1.0f553",
        "type": "delay",
        "z": "31c39280.4de9fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.001",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 910,
        "y": 2160,
        "wires": [
            [
                "859d8ef.37e3f7"
            ]
        ]
    },
    {
        "id": "44ae628e.36f68c",
        "type": "link out",
        "z": "31c39280.4de9fe",
        "name": "",
        "links": [
            "745fa74f.f45368"
        ],
        "x": 1215,
        "y": 2000,
        "wires": []
    },
    {
        "id": "745fa74f.f45368",
        "type": "link in",
        "z": "31c39280.4de9fe",
        "name": "",
        "links": [
            "44ae628e.36f68c",
            "e286e1ce.3b6e5",
            "8594e542.7c48d8"
        ],
        "x": 235,
        "y": 1980,
        "wires": [
            [
                "eb3bff22.344a8"
            ]
        ]
    },
    {
        "id": "4e8675d1.d9ebcc",
        "type": "inject",
        "z": "d390a1f6.a59c1",
        "name": "Make Request",
        "props": [
            {
                "p": "method",
                "v": "get",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "http://192.168.100.185/static?path=/newsite/meterdata/",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "3e63fea2.e4fd12"
            ]
        ]
    },
    {
        "id": "3e63fea2.e4fd12",
        "type": "http request",
        "z": "d390a1f6.a59c1",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 410,
        "y": 160,
        "wires": [
            [
                "47f03afc.11b334",
                "17fb05c3.94fb8a"
            ]
        ]
    },
    {
        "id": "47f03afc.11b334",
        "type": "csv",
        "z": "d390a1f6.a59c1",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "c07dd99.1d29e28",
                "ddbef2c2.80249"
            ]
        ]
    },
    {
        "id": "c07dd99.1d29e28",
        "type": "debug",
        "z": "d390a1f6.a59c1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "ddbef2c2.80249",
        "type": "function",
        "z": "d390a1f6.a59c1",
        "name": "",
        "func": "var data = msg.payload[124];\n\nreturn data;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "6c1de611.332068"
            ]
        ]
    },
    {
        "id": "6c1de611.332068",
        "type": "debug",
        "z": "d390a1f6.a59c1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 240,
        "wires": []
    },
    {
        "id": "17fb05c3.94fb8a",
        "type": "function",
        "z": "d390a1f6.a59c1",
        "name": "",
        "func": "html = msg.payload\ndata = html.split(\"<H2>\");\n\n//Serial Number\nSN = html.split(\"<BR>Serial Number: \")[1];\nSN = SN.split(\"<HR>\")[0];\n\nfor (i=0; i<data.length; i++){\n    \n    if (data[i].includes(\"Firmware\")){      //Firmware version\n       valor = (data[i].split(\"</H2>\"))[1];\n       FV = (valor.split(\"<br>\"))[0];\n    }\n    if (data[i].includes(\"Transformer\")){   //Transformer Ratio\n       valor = (data[i].split(\"</H2>\"))[1];\n       TR = parseFloat((valor.split(\"\\n\"))[0]);\n    }\n    if (data[i].includes(\"Energy\")){        //Active Energy\n       valor = (data[i].split(\"</H2>\"))[1];\n       AE = parseFloat((valor.split(\" \"))[0]);\n    }\n \n}\nmsg.payload = [SN,FV,TR,AE];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            [
                "91cc71b1.895f9"
            ]
        ]
    },
    {
        "id": "91cc71b1.895f9",
        "type": "debug",
        "z": "d390a1f6.a59c1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 100,
        "wires": []
    },
    {
        "id": "644968b8.7eadb8",
        "type": "comment",
        "z": "3022fd6.d249f02",
        "name": "ABB Electricity Meter",
        "info": "",
        "x": 203.35260009765625,
        "y": 843.2561645507812,
        "wires": []
    },
    {
        "id": "536b8e98.44d59",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "",
        "links": [
            "2c727c07.71ff74"
        ],
        "x": 955,
        "y": 260,
        "wires": []
    },
    {
        "id": "2c727c07.71ff74",
        "type": "link in",
        "z": "3022fd6.d249f02",
        "name": "",
        "links": [
            "536b8e98.44d59"
        ],
        "x": 115,
        "y": 900,
        "wires": [
            [
                "e32b3812.63fbe8"
            ]
        ]
    },
    {
        "id": "e32b3812.63fbe8",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: ABB Electricity Meter Build",
        "func": "abb = msg.item.abb;\nif (!abb)\n    return null;\n\nip = abb.ipadd;\nif (!ip)\n    return null;\n\n//It's important to resend tha msg given that is an object with all the necessary data about the device\nmsg.payload = abb;\nmsg.url = \"http://\" + ip + \"/static?path=/newsite/meterdata/\";\nmsg.method = \"get\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 900,
        "wires": [
            [
                "d66fff5a.60d1d"
            ]
        ]
    },
    {
        "id": "d66fff5a.60d1d",
        "type": "http request",
        "z": "3022fd6.d249f02",
        "name": "DL:ABB HTTP Read",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 580,
        "y": 900,
        "wires": [
            [
                "8a954e68.795b1"
            ]
        ]
    },
    {
        "id": "e5bbd303.f24c5",
        "type": "link in",
        "z": "e045593e.092be8",
        "name": "",
        "links": [
            "f001feb1.19dd8"
        ],
        "x": 535,
        "y": 1820,
        "wires": [
            [
                "42ea80c0.26bad"
            ]
        ]
    },
    {
        "id": "42ea80c0.26bad",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Select Dev ABB Electricity Meter",
        "func": "if (msg.topic == \"add\") {\n    selectedDevice = { abb : {} };\n    enable = true;\n}\nelse if (msg.topic == \"edit\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"abb\")\n        return null;\n    enable = true;\n}\nelse if (msg.topic == \"del\") {\n    selectedDevice = { abb : {} };\n    enable = false;\n}\nelse if (msg.topic == \"save\") {\n    selectedDevice = flow.get(\"selectedDevice\", \"memoryOnly\");\n    if (selectedDevice.type != \"abb\")\n        return null;\n    enable = false;\n}\nelse {\n    enable = false;\n    //selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || {};\n    selectedDevice = msg.payload.item;\n    if (selectedDevice.type != \"abb\")\n        return null;\n\n    selectedDevice.abb = msg.payload.item.abb || { };\n    flow.set('selectedDevice', selectedDevice, \"memoryOnly\");\n}\n\nmsgIP = { payload : selectedDevice.abb.ipadd || \"\", enabled : enable };\n\nreturn msgIP\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1820,
        "wires": [
            [
                "106147d3.de17f8"
            ]
        ]
    },
    {
        "id": "106147d3.de17f8",
        "type": "ui_text_input",
        "z": "e045593e.092be8",
        "name": "",
        "label": "IP address",
        "tooltip": "IP address (ej: 192.168.1.12)",
        "group": "d1b2041f.9dac98",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "1000",
        "topic": "ipadd",
        "x": 1010,
        "y": 1820,
        "wires": [
            [
                "6019bad8.b1cd34"
            ]
        ]
    },
    {
        "id": "6019bad8.b1cd34",
        "type": "function",
        "z": "e045593e.092be8",
        "name": "DL: Store Selected Dev ABB Electricity Meter",
        "func": "selectedDevice = flow.get('selectedDevice', \"memoryOnly\") || { };\nif (!selectedDevice.abb)\n    selectedDevice.abb = {};\nselectedDevice.abb[msg.topic] = msg.payload;\nflow.set('selectedDevice', selectedDevice, \"memoryOnly\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "e3a81dfb.93b06",
        "type": "function",
        "z": "d390a1f6.a59c1",
        "name": "",
        "func": "ip = msg.payload;\nmsg = { method : \"get\",\n        url : \"http://\" + ip + \"/static?path=/newsite/meterdata/\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "3e63fea2.e4fd12",
                "4747dcd7.0131e4"
            ]
        ]
    },
    {
        "id": "68fdb941.7492e8",
        "type": "inject",
        "z": "d390a1f6.a59c1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ip",
        "payload": "192.168.100.185",
        "payloadType": "str",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "e3a81dfb.93b06"
            ]
        ]
    },
    {
        "id": "4747dcd7.0131e4",
        "type": "debug",
        "z": "d390a1f6.a59c1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 280,
        "wires": []
    },
    {
        "id": "8a954e68.795b1",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: ABB Electricity Meter Process",
        "func": "try {\n    html = msg.payload\n    data = html.split(\"<H2>\");\n\n    //Serial Number\n    SN = html.split(\"<BR>Serial Number: \")[1];\n    SN = SN.split(\"<HR>\")[0];\n\n    for (i=0; i<data.length; i++){\n    \n        if (data[i].includes(\"Firmware\")){      //Firmware version\n            valor = (data[i].split(\"</H2>\"))[1];\n            FV = (valor.split(\"<br>\"))[0];\n        }\n        if (data[i].includes(\"Transformer\")){   //Transformer Ratio\n            valor = (data[i].split(\"</H2>\"))[1];\n            TR = parseFloat((valor.split(\"\\n\"))[0]);\n        }\n        if (data[i].includes(\"Energy\")){        //Active Energy\n            valor = (data[i].split(\"</H2>\"))[1];\n            AE = parseFloat((valor.split(\" \"))[0]);\n        }\n    }\n}\ncatch(e) {\n    globalFuns = global.get(\"globalFuns\");\n    globalFuns.tlnt_log(2, \"DataLogger\", \"ABB Connect Error: \" + msg.error)\n    return (null);\n}\n\nmsg.payload = [SN,FV,TR,AE];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 900,
        "wires": [
            [
                "2e07c34b.830e8c",
                "dd616e14.2457e"
            ]
        ]
    },
    {
        "id": "2e07c34b.830e8c",
        "type": "link out",
        "z": "3022fd6.d249f02",
        "name": "",
        "links": [
            "30ab35fe.693b6a"
        ],
        "x": 1095,
        "y": 900,
        "wires": []
    },
    {
        "id": "dd616e14.2457e",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL ABB Electricity Meter Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 840,
        "wires": []
    },
    {
        "id": "97a67f0.569b88",
        "type": "mqtt in",
        "z": "31c39280.4de9fe",
        "name": "",
        "topic": "config/apply",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fb155faa.7a0cb",
        "nl": false,
        "rap": false,
        "x": 930,
        "y": 1600,
        "wires": [
            [
                "4ce0a3d3.e7e2bc"
            ]
        ]
    },
    {
        "id": "9317d4d0.704168",
        "type": "catch",
        "z": "3022fd6.d249f02",
        "name": "ABB HTTP Request Error",
        "scope": [
            "d66fff5a.60d1d"
        ],
        "uncaught": false,
        "x": 1290,
        "y": 720,
        "wires": [
            [
                "bb5d1cf6.b24e2"
            ]
        ]
    },
    {
        "id": "96d74a85.9dc898",
        "type": "debug",
        "z": "3022fd6.d249f02",
        "name": "DBG: DL: ABB HTTP Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 800,
        "wires": []
    },
    {
        "id": "bb5d1cf6.b24e2",
        "type": "function",
        "z": "3022fd6.d249f02",
        "name": "DL: ABB HTTP Error",
        "func": "dataLoggerStatus = global.get(\"dataLoggerStatus\");\nif (!dataLoggerStatus || !dataLoggerStatus.monitor || !dataLoggerStatus.monitor.deviceList)\n    return null;\n\ndataLoggerStatus.monitor.deviceList[msg.item.name].status = \"ERROR\";\ndataLoggerStatus.monitor.deviceList[msg.item.name].error = msg.error.message;\ndataLoggerStatus.monitor.deviceList[msg.item.name].timestamp_error = new Date(msg.now);\n\nglobal.set(\"dataLoggerStatus\", dataLoggerStatus);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 760,
        "wires": [
            [
                "96d74a85.9dc898"
            ]
        ]
    }
]